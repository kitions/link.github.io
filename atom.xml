<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Filip</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://kitions.github.io/"/>
  <updated>2019-04-30T06:39:05.224Z</updated>
  <id>https://kitions.github.io/</id>
  
  <author>
    <name>link</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>node.js — koa — Typescript 微信连接api</title>
    <link href="https://kitions.github.io/2019/04/15/node.js%20%E2%80%94%20koa%20%E2%80%94%20Typescript%20%E5%BE%AE%E4%BF%A1%E8%BF%9E%E6%8E%A5api/"/>
    <id>https://kitions.github.io/2019/04/15/node.js — koa — Typescript 微信连接api/</id>
    <published>2019-04-15T03:51:12.000Z</published>
    <updated>2019-04-30T06:39:05.224Z</updated>
    
    <content type="html"><![CDATA[<h3 id="node-js-—-koa-—-Typescript-微信连接api"><a href="#node-js-—-koa-—-Typescript-微信连接api" class="headerlink" title="node.js — koa — Typescript 微信连接api"></a>node.js — koa — Typescript 微信连接api</h3><p>服务器中间层框架为koa，使用node原生的加密方式，应该整个公司项目的微信api都从一个接口上出去，不应该分散到各个项目去单独调api，便于管理维护，减少调用次数</p><p><code>memory-cache</code>为请求到的access_token做缓存，微信调用access_token每日有次数限制。目前是根据时间判断的，理应后期加上定时任务</p><ol><li>获取access_token存入缓存，有效期两小时，有的话从缓存中取</li><li>获取ticket存入缓存，有效期两小时，有的话从缓存中取</li><li>将获取到的ticket和其他三个参数进行sha1-HEX加密，拿到签名signature</li><li>提供一个接口供前端调(ps: 敏感字段请勿传给前台)</li></ol><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> koa <span class="keyword">from</span> <span class="string">"koa"</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; HTTPProtocol &#125; <span class="keyword">from</span> <span class="string">"@Constance/interface"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; getData, httpType &#125; <span class="keyword">from</span> <span class="string">'@Utils/http'</span></span><br><span class="line"><span class="keyword">import</span> Config <span class="keyword">from</span> <span class="string">'@Config/config'</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> cache <span class="keyword">from</span> <span class="string">'memory-cache'</span></span><br><span class="line"><span class="keyword">const</span> crypto = <span class="built_in">require</span>(<span class="string">'crypto'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> IAccessTokenResponse &#123;</span><br><span class="line">errcode: <span class="built_in">number</span>;</span><br><span class="line">errmsg: <span class="built_in">string</span>;</span><br><span class="line">access_token: <span class="built_in">string</span>;</span><br><span class="line">expires_in: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">interface</span> jsAPITicketResponse &#123;</span><br><span class="line">errcode: <span class="built_in">number</span>;</span><br><span class="line">errmsg: <span class="built_in">string</span>;</span><br><span class="line">ticket: <span class="built_in">string</span>;</span><br><span class="line">expires_in: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> getWxConfig = <span class="keyword">async</span> (ctx: koa.Context) =&gt; &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> &#123; url &#125; = ctx.query</span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回给前台的数据</span></span><br><span class="line"><span class="keyword">let</span> res: HTTPProtocol&lt;<span class="built_in">any</span>&gt; = &#123;</span><br><span class="line">code: <span class="number">0</span>,</span><br><span class="line">msg: <span class="string">"成功"</span>,</span><br><span class="line">data: <span class="string">""</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!url) &#123;</span><br><span class="line">res.msg = <span class="string">"无URL"</span></span><br><span class="line">ctx.body = res</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> timestamp: <span class="built_in">number</span> = <span class="built_in">Math</span>.floor(<span class="built_in">Date</span>.now() / <span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取access_token </span></span><br><span class="line"><span class="keyword">if</span> (!cache.get(<span class="string">"tokenObj"</span>) || cache.get(<span class="string">"tokenObj"</span>).expires_in &lt; timestamp || cache.get(<span class="string">"tokenObj"</span>).app_id !== Config.wx_gzh.app_id) &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> getAccessURL = Config.wx_gzh.access_token + <span class="string">`&amp;appid=`</span> + Config.wx_gzh.app_id + <span class="string">`&amp;secret=`</span> + Config.wx_gzh.app_secret</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> WxAccessToken = <span class="keyword">await</span> getData&lt;IAccessTokenResponse&gt;(getAccessURL, httpType.get)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (WxAccessToken &amp;&amp; WxAccessToken.access_token) &#123;</span><br><span class="line">cache.put(<span class="string">"tokenObj"</span>, &#123;</span><br><span class="line">access_token: WxAccessToken.access_token,</span><br><span class="line">expires_in: timestamp + (WxAccessToken.expires_in - <span class="number">1800</span>),</span><br><span class="line">app_id: Config.wx_gzh.app_id</span><br><span class="line">&#125;, <span class="number">1.5</span> * <span class="number">60</span> * <span class="number">60</span> * <span class="number">1000</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">cache.put(<span class="string">"tokenObj"</span>, <span class="literal">null</span>);</span><br><span class="line">ctx.logger.error(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">`wxconfig: <span class="subst">$&#123;JSON.stringify(Config.wx_gzh)&#125;</span>`</span>));</span><br><span class="line">ctx.logger.error(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">`tokenResult: <span class="subst">$&#123;JSON.stringify(WxAccessToken)&#125;</span>`</span>));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">res.code = <span class="number">500</span></span><br><span class="line">res.msg = <span class="string">"获取access失败"</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取ticket</span></span><br><span class="line"><span class="keyword">if</span> (cache.get(<span class="string">"tokenObj"</span>) &amp;&amp; cache.get(<span class="string">"tokenObj"</span>).app_id === Config.wx_gzh.app_id) &#123;</span><br><span class="line">timestamp = <span class="built_in">Math</span>.floor(<span class="built_in">Date</span>.now() / <span class="number">1000</span>);</span><br><span class="line"><span class="keyword">if</span> (!cache.get(<span class="string">"jsapiObj"</span>) || cache.get(<span class="string">"jsapiObj"</span>).expires_in &lt; timestamp || cache.get(<span class="string">"jsapiObj"</span>).app_id !== Config.wx_gzh.app_id) &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> getTicketURL = Config.wx_gzh.js_api + <span class="string">`&amp;access_token=`</span> + cache.get(<span class="string">"tokenObj"</span>).access_token</span><br><span class="line"><span class="keyword">const</span> WxTicket = <span class="keyword">await</span> getData&lt;jsAPITicketResponse&gt;(getTicketURL, httpType.get)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (WxTicket &amp;&amp; WxTicket.ticket) &#123;</span><br><span class="line">cache.put(<span class="string">"jsapiObj"</span>, &#123;</span><br><span class="line">ticket: WxTicket.ticket,</span><br><span class="line">expires_in: timestamp + (WxTicket.expires_in - <span class="number">1800</span>),</span><br><span class="line">app_id: Config.wx_gzh.app_id</span><br><span class="line">&#125;, <span class="number">1.5</span> * <span class="number">60</span> * <span class="number">60</span> * <span class="number">1000</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">cache.put(<span class="string">"jsapiObj"</span>, <span class="literal">null</span>);</span><br><span class="line">ctx.logger.error(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">`wxconfig: <span class="subst">$&#123;JSON.stringify(Config.wx_gzh)&#125;</span>`</span>));</span><br><span class="line">ctx.logger.error(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">`jsapiResult: <span class="subst">$&#123;JSON.stringify(WxTicket)&#125;</span>`</span>));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (cache.get(<span class="string">"jsapiObj"</span>) &amp;&amp; cache.get(<span class="string">"jsapiObj"</span>).app_id === Config.wx_gzh.app_id) &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> jsapi_ticket = cache.get(<span class="string">"jsapiObj"</span>).ticket;</span><br><span class="line"><span class="keyword">const</span> nonceStr = Config.wx_gzh.nonce_str</span><br><span class="line">timestamp = <span class="built_in">Math</span>.floor(<span class="built_in">Date</span>.now() / <span class="number">1000</span>);</span><br><span class="line"><span class="keyword">const</span> string1 = <span class="string">`jsapi_ticket=<span class="subst">$&#123;jsapi_ticket&#125;</span>&amp;noncestr=<span class="subst">$&#123;nonceStr&#125;</span>&amp;timestamp=<span class="subst">$&#123;timestamp&#125;</span>&amp;url=<span class="subst">$&#123;url&#125;</span>`</span>;</span><br><span class="line"><span class="keyword">const</span> signature = sha1Trans(string1)</span><br><span class="line">res.code = <span class="number">0</span></span><br><span class="line">res.msg = <span class="string">"成功"</span></span><br><span class="line">res.data = &#123;</span><br><span class="line">nonceStr: nonceStr,</span><br><span class="line">timestamp: timestamp,</span><br><span class="line">signature: signature,</span><br><span class="line">appId: Config.wx_gzh.app_id</span><br><span class="line">&#125;;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sha1Trans</span>(<span class="params">str: <span class="built_in">string</span></span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> sha1 = crypto.createHash(<span class="string">'sha1'</span>);<span class="comment">//创建哈希加密算法，后边可以是md5，sha1,sha256等</span></span><br><span class="line"><span class="keyword">var</span> newStr = sha1.update(str).digest(<span class="string">'HEX'</span>);</span><br><span class="line"><span class="keyword">return</span> newStr</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ctx.body = res</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> &#123;</span><br><span class="line">getWxConfig</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>配置文件为：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">"wx_gzh": &#123;</span><br><span class="line">   "nonce_str": "随机字符串",</span><br><span class="line">   "app_id": "你自己的",</span><br><span class="line">   "app_secret": "你自己的",</span><br><span class="line">   "js_api": "https://api.weixin.qq.com/cgi-bin/ticket/getticket?type=jsapi",</span><br><span class="line">   "access_token": "https://api.weixin.qq.com/cgi-bin/token?grant_type=client_credential"</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      共4步骤，比较简单，用了memory-cache，后期需要定时任务
    
    </summary>
    
      <category term="默认分类" scheme="https://kitions.github.io/categories/%E9%BB%98%E8%AE%A4%E5%88%86%E7%B1%BB/"/>
    
    
      <category term="微信" scheme="https://kitions.github.io/tags/%E5%BE%AE%E4%BF%A1/"/>
    
  </entry>
  
  <entry>
    <title>golang之http封装</title>
    <link href="https://kitions.github.io/2019/03/28/golang-http%E5%B0%81%E8%A3%85/"/>
    <id>https://kitions.github.io/2019/03/28/golang-http封装/</id>
    <published>2019-03-28T01:53:22.000Z</published>
    <updated>2019-04-30T06:46:00.324Z</updated>
    
    <content type="html"><![CDATA[<h3 id="go让日志显示行数"><a href="#go让日志显示行数" class="headerlink" title="go让日志显示行数"></a>go让日志显示行数</h3><pre><code>log.SetFlags(log.Lshortfile | log.LstdFlags)</code></pre><h3 id="一个简单的golang-http封装"><a href="#一个简单的golang-http封装" class="headerlink" title="一个简单的golang http封装"></a>一个简单的golang http封装</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">HttpGetCall</span><span class="params">(url <span class="keyword">string</span>, params <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">string</span>, cooikes []*http.Cookie, res <span class="keyword">interface</span>&#123;&#125;)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">op := NewRequestOptions()</span><br><span class="line">op.Params = params</span><br><span class="line">op.Cookies = cooikes</span><br><span class="line">resp, err := grequests.Get(url, op)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> !resp.Ok &#123;</span><br><span class="line"><span class="keyword">return</span> fmt.Errorf(<span class="string">"Response failed with status code: %d."</span>, resp.StatusCode)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> res != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> resp.JSON(res)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewRequestOptions</span><span class="params">()</span> *<span class="title">grequests</span>.<span class="title">RequestOptions</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> &amp;grequests.RequestOptions&#123;</span><br><span class="line">DialTimeout:         <span class="number">5</span> * time.Second,</span><br><span class="line">TLSHandshakeTimeout: <span class="number">5</span> * time.Second,</span><br><span class="line">RequestTimeout:      <span class="number">5</span> * time.Second,</span><br><span class="line">InsecureSkipVerify:  <span class="literal">true</span>,</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>返回类型的结构体</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Message <span class="keyword">struct</span> &#123;</span><br><span class="line">Code <span class="keyword">int</span>              <span class="string">`json:"code"`</span></span><br><span class="line">Msg  <span class="keyword">string</span>           <span class="string">`json:"msg"`</span></span><br><span class="line">Data *json.RawMessage <span class="string">`json:"data"`</span> <span class="comment">// must be *json.RawMessage</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调用例子：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">GetUserInfoByAccount</span><span class="params">(account <span class="keyword">string</span>)</span> <span class="params">(*protocol.UserCenterFilterUserInfo, <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">params := <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">string</span>&#123;</span><br><span class="line"><span class="string">"field"</span>: <span class="string">"member_name"</span>,</span><br><span class="line"><span class="string">"value"</span>: account,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> m protocol.Message</span><br><span class="line">url := getUserCenterInnerDomain() + <span class="string">"/get_filter_user_and_company_list"</span></span><br><span class="line">err := util.HttpGetCall(url, params, <span class="literal">nil</span>, &amp;m)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">logger.Warnning(<span class="string">"GetUserInfoByAccount error:"</span>, err.Error())</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, protocol.CODE_SYSTEM_ERROR</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Resp <span class="keyword">struct</span> &#123;</span><br><span class="line">Infos []protocol.UserCenterFilterUserInfo <span class="string">`json:"infos"`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> resp Resp</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> err = json.Unmarshal(*m.Data, &amp;resp); err != <span class="literal">nil</span> &#123;</span><br><span class="line">logger.Warnning(<span class="string">"GetUserInfoByAccount error:"</span>, err.Error())</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, protocol.CODE_SYSTEM_ERROR</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> util.IsDebug() &#123;</span><br><span class="line">logger.Debug(resp)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> m.Code != protocol.CODE_OK &#123;</span><br><span class="line">log.Printf(<span class="string">"request filed:code=%d msg=%s\n"</span>, m.Code, m.Msg)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, protocol.CODE_SYSTEM_ERROR</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(resp.Infos) == <span class="number">0</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, protocol.CODE_USER_NOT_EXIST</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> &amp;resp.Infos[<span class="number">0</span>], protocol.CODE_OK</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      一个简单的golang http封装及一个调用的例子，还有个golang让日志显示行数的一句话
    
    </summary>
    
      <category term="默认分类" scheme="https://kitions.github.io/categories/%E9%BB%98%E8%AE%A4%E5%88%86%E7%B1%BB/"/>
    
    
      <category term="go" scheme="https://kitions.github.io/tags/go/"/>
    
  </entry>
  
  <entry>
    <title>go 坑之并发访问map</title>
    <link href="https://kitions.github.io/2019/03/13/go%20%E5%9D%91%E4%B9%8B%E5%B9%B6%E5%8F%91%E8%AE%BF%E9%97%AEmap/"/>
    <id>https://kitions.github.io/2019/03/13/go 坑之并发访问map/</id>
    <published>2019-03-13T06:53:22.000Z</published>
    <updated>2019-03-26T08:50:41.860Z</updated>
    
    <content type="html"><![CDATA[<h1 id="go-坑之并发访问map"><a href="#go-坑之并发访问map" class="headerlink" title="go 坑之并发访问map"></a>go 坑之并发访问map</h1><p> 并发的对一个map进行读写是有问题的，主要是写(ps: 并发的写map肯定是任何语言都不行的,真的傻)</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">简易解决方法 </span><br><span class="line"><span class="number">1.</span> 给 <span class="keyword">map</span> 加锁</span><br><span class="line"><span class="number">2.</span> 复制出来一个单独的<span class="keyword">map</span></span><br><span class="line">代码<span class="number">2</span>  <span class="comment">// cloneReq帮助函数  防止并发的协程 访问同一个map 造成panic</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">cloneReq</span><span class="params">(req <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">string</span>)</span> <span class="title">map</span>[<span class="title">string</span>]<span class="title">string</span></span> &#123;</span><br><span class="line">clone := <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">string</span>&#123;&#125;</span><br><span class="line">lock := sync.RWMutex&#123;&#125;</span><br><span class="line">lock.RLock()</span><br><span class="line"><span class="keyword">for</span> key, value := <span class="keyword">range</span> req &#123;</span><br><span class="line">clone[key] = value</span><br><span class="line">&#125;</span><br><span class="line">lock.RUnlock()</span><br><span class="line"><span class="keyword">return</span> clone</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>go提供了一种叫map的数据结构，可以翻译成映射，对应于其他语言的字典、哈希表。借助map，可以定义一个键和值，然后可以从map中获取、设置和删除这个值，尤其适合数据查找的场景。但是map的使用有一定的限制，如果是在单个协程中读写map，那么不会存在什么问题，如果是多个协程并发访问一个map，有可能会导致程序退出，并打印下面错误信息：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fatal error: concurrent <span class="keyword">map</span> read and <span class="keyword">map</span> write</span><br></pre></td></tr></table></figure><p>上面的这个错误不是每次都会遇到的，如果并发访问的协程数不大，遇到的可能性就更小了。例如下面的程序：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    Map := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">int</span>]<span class="keyword">int</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123;</span><br><span class="line">        <span class="keyword">go</span> writeMap(Map, i, i)</span><br><span class="line">        <span class="keyword">go</span> readMap(Map, i)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">readMap</span><span class="params">(Map <span class="keyword">map</span>[<span class="keyword">int</span>]<span class="keyword">int</span>, key <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> Map[key]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">writeMap</span><span class="params">(Map <span class="keyword">map</span>[<span class="keyword">int</span>]<span class="keyword">int</span>, key <span class="keyword">int</span>, value <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">    Map[key] = value</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>只循环了10次，产生了20个协程并发访问map，程序基本不会出错，但是如果将循环次数变大，比如10万，运行下面程序基本每次都会出错：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    Map := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">int</span>]<span class="keyword">int</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">100000</span>; i++ &#123;</span><br><span class="line">        <span class="keyword">go</span> writeMap(Map, i, i)</span><br><span class="line">        <span class="keyword">go</span> readMap(Map, i)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">readMap</span><span class="params">(Map <span class="keyword">map</span>[<span class="keyword">int</span>]<span class="keyword">int</span>, key <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> Map[key]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">writeMap</span><span class="params">(Map <span class="keyword">map</span>[<span class="keyword">int</span>]<span class="keyword">int</span>, key <span class="keyword">int</span>, value <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">    Map[key] = value</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://link.jianshu.com?t=https://blog.golang.org/go-maps-in-action" target="_blank" rel="noopener">go官方博客</a>有如下说明：</p><blockquote><p>Maps are not safe for concurrent use: it’s not defined what happens when you read and write to them simultaneously. If you need to read from and write to a map from concurrently executing goroutines, the accesses must be mediated by some kind of synchronization mechanism. One common way to protect maps is with sync.RWMutex.</p></blockquote><p>大致意思就是说，并发访问map是不安全的，会出现未定义行为，导致程序退出。所以如果希望在多协程中并发访问map，必须提供某种同步机制，一般情况下通过读写锁sync.RWMutex实现对map的并发访问控制，将map和sync.RWMutex封装一下，可以实现对map的安全并发访问，示例代码如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"sync"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> SafeMap <span class="keyword">struct</span> &#123;</span><br><span class="line">    sync.RWMutex</span><br><span class="line">    Map <span class="keyword">map</span>[<span class="keyword">int</span>]<span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    safeMap := newSafeMap(<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">100000</span>; i++ &#123;</span><br><span class="line">        <span class="keyword">go</span> safeMap.writeMap(i, i)</span><br><span class="line">        <span class="keyword">go</span> safeMap.readMap(i)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">newSafeMap</span><span class="params">(size <span class="keyword">int</span>)</span> *<span class="title">SafeMap</span></span> &#123;</span><br><span class="line">    sm := <span class="built_in">new</span>(SafeMap)</span><br><span class="line">    sm.Map = <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">int</span>]<span class="keyword">int</span>)</span><br><span class="line">    <span class="keyword">return</span> sm</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(sm *SafeMap)</span> <span class="title">readMap</span><span class="params">(key <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">    sm.RLock()</span><br><span class="line">    value := sm.Map[key]</span><br><span class="line">    sm.RUnlock()</span><br><span class="line">    <span class="keyword">return</span> value</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(sm *SafeMap)</span> <span class="title">writeMap</span><span class="params">(key <span class="keyword">int</span>, value <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">    sm.Lock()</span><br><span class="line">    sm.Map[key] = value</span><br><span class="line">    sm.Unlock()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 原链接：<a href="https://www.jianshu.com/p/10a998089486" target="_blank" rel="noopener">https://www.jianshu.com/p/10a998089486</a>   </p>]]></content>
    
    <summary type="html">
    
      go 坑之并发访问map,并发的对一个map进行读写是有问题的，主要是写
    
    </summary>
    
      <category term="默认分类" scheme="https://kitions.github.io/categories/%E9%BB%98%E8%AE%A4%E5%88%86%E7%B1%BB/"/>
    
    
      <category term="go" scheme="https://kitions.github.io/tags/go/"/>
    
  </entry>
  
  <entry>
    <title>go 之grpc 获取来的数据 转为json</title>
    <link href="https://kitions.github.io/2019/02/16/grpc%20%E8%8E%B7%E5%8F%96%E6%9D%A5%E7%9A%84%E6%95%B0%E6%8D%AE%20%E8%BD%AC%E4%B8%BAjson/"/>
    <id>https://kitions.github.io/2019/02/16/grpc 获取来的数据 转为json/</id>
    <published>2019-02-16T06:53:22.000Z</published>
    <updated>2019-03-05T08:26:55.301Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// grpc 获取来的数据 转为json</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">SmartPrint</span><span class="params">(xm <span class="keyword">interface</span>&#123;&#125;)</span></span> &#123;</span><br><span class="line">js, err := json.Marshal(xm)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(<span class="keyword">string</span>(js))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      SmartPrint()方法
    
    </summary>
    
      <category term="默认分类" scheme="https://kitions.github.io/categories/%E9%BB%98%E8%AE%A4%E5%88%86%E7%B1%BB/"/>
    
    
      <category term="go" scheme="https://kitions.github.io/tags/go/"/>
    
  </entry>
  
  <entry>
    <title>go之defer延迟函数</title>
    <link href="https://kitions.github.io/2018/12/03/golang-defer/"/>
    <id>https://kitions.github.io/2018/12/03/golang-defer/</id>
    <published>2018-12-03T02:13:23.000Z</published>
    <updated>2019-03-05T08:27:43.705Z</updated>
    
    <content type="html"><![CDATA[<h1 id="go之defer延迟函数"><a href="#go之defer延迟函数" class="headerlink" title="go之defer延迟函数"></a>go之defer延迟函数</h1><h5 id="Example1"><a href="#Example1" class="headerlink" title="Example1"></a>Example1</h5><h6 id="bad"><a href="#bad" class="headerlink" title="bad"></a>bad</h6><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">do</span><span class="params">()</span> <span class="title">error</span></span> &#123;</span><br><span class="line">    f, err := os.Open(<span class="string">"book.txt"</span>)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> err</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">defer</span> f.Close()</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ..code...</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="good"><a href="#good" class="headerlink" title="good"></a>good</h6><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">do</span><span class="params">()</span> <span class="title">error</span></span> &#123;</span><br><span class="line">    f, err := os.Open(<span class="string">"book.txt"</span>)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> err</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">if</span> err := f.Close(); err != <span class="literal">nil</span> &#123;</span><br><span class="line">            <span class="comment">// log etc</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;()</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ..code...</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 检查可能的错误而不是直接交给 defer 就完事，你可以把 defer 内的代码写成一个帮助函数来简化我们的代码，这里为了讲解方便就没有进行简化。</span></span><br><span class="line"><span class="comment">// 还可以通过命名的返回变量来返回 defer 内的错误。</span></span><br></pre></td></tr></table></figure><ol><li>函数不会立即调用</li></ol><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">SaveSitemap</span><span class="params">(cat <span class="keyword">string</span>)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">fd, err := os.Create(<span class="string">"sitemap/sitemap"</span> + cat + <span class="string">".xml"</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Printf(<span class="string">"expected error happended when create BaikeSitemap file %v\n"</span>, err.Error())</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> fd.Close()       <span class="comment">// 这儿close不影响后面</span></span><br><span class="line">vinfo, err := GenerateSitemap(cat)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line">_, err = fd.Write([]<span class="keyword">byte</span>(vinfo))</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line">log.Printf(<span class="string">" %v Sitemap 写入成功"</span>, NameReverse[cat])</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// defer 会在最后执行</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      go之defer延迟函数
    
    </summary>
    
      <category term="默认分类" scheme="https://kitions.github.io/categories/%E9%BB%98%E8%AE%A4%E5%88%86%E7%B1%BB/"/>
    
    
      <category term="go" scheme="https://kitions.github.io/tags/go/"/>
    
  </entry>
  
  <entry>
    <title>前端性能-chorme performance</title>
    <link href="https://kitions.github.io/2018/11/15/performance/"/>
    <id>https://kitions.github.io/2018/11/15/performance/</id>
    <published>2018-11-15T09:14:31.000Z</published>
    <updated>2018-12-05T03:36:38.351Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前端性能"><a href="#前端性能" class="headerlink" title="前端性能"></a>前端性能</h1><p><strong>性能API上的流程时间点</strong>（timing的整体结构）<br><img src="https://ws4.sinaimg.cn/large/006tNbRwgy1fx6f9oc290j314v0ofdjm.jpg" alt="性能API上的流程时间点"></p><ul><li>navigationStart: 表示从上一个文档卸载结束时的 unix 时间戳，如果没有上一个文档，这个值将和 fetchStart 相等。</li><li>unloadEventStart: 表示前一个网页（与当前页面同域）unload 的时间戳，如果无前一个网页 unload 或者前一个网页与当前页面不同域，则值为 0。</li><li>unloadEventEnd: 返回前一个页面 unload 时间绑定的回调函数执行完毕的时间戳。</li><li>redirectStart: 第一个 HTTP 重定向发生时的时间。有跳转且是同域名内的重定向才算，否则值为 0。</li><li>redirectEnd: 最后一个 HTTP 重定向完成时的时间。有跳转且是同域名内部的重定向才算，否则值为 0。</li><li>fetchStart: 浏览器准备好使用 HTTP 请求抓取文档的时间，这发生在检查本地缓存之前。</li><li>domainLookupStart/domainLookupEnd: DNS 域名查询开始/结束的时间，如果使用了本地缓存（即无 DNS 查询）或持久连接，则与 fetchStart 值相等</li><li>connectStart: HTTP（TCP）开始/重新 建立连接的时间，如果是持久连接，则与 fetchStart 值相等。</li><li>connectEnd: HTTP（TCP） 完成建立连接的时间（完成握手），如果是持久连接，则与 fetchStart 值相等。</li><li>secureConnectionStart: HTTPS 连接开始的时间，如果不是安全连接，则值为 0。</li><li>requestStart: HTTP 请求读取真实文档开始的时间（完成建立连接），包括从本地读取缓存。</li><li>responseStart: HTTP 开始接收响应的时间（获取到第一个字节），包括从本地读取缓存。</li><li>responseEnd: HTTP 响应全部接收完成的时间（获取到最后一个字节），包括从本地读取缓存。</li><li>domLoading: 开始解析渲染 DOM 树的时间，此时 Document.readyState 变为 loading，并将抛出 readystatechange 相关事件。</li><li>domInteractive: 完成解析 DOM 树的时间，Document.readyState 变为 interactive，并将抛出 readystatechange 相关事件，注意只是 DOM 树解析完成，这时候并没有开始加载网页内的资源。</li><li>domContentLoadedEventStart: DOM 解析完成后，网页内资源加载开始的时间，在 DOMContentLoaded 事件抛出前发生。</li><li>domContentLoadedEventEnd: DOM 解析完成后，网页内资源加载完成的时间（如 JS 脚本加载执行完毕）。</li><li>domComplete: DOM 树解析完成，且资源也准备就绪的时间，Document.readyState 变为 complete，并将抛出 readystatechange 相关事件。</li><li>loadEventStart: load 事件发送给文档，也即 load 回调函数开始执行的时间。</li><li>loadEventEnd: load 事件的回调函数执行完毕的时间。</li></ul><p>or</p><ul><li><p><code>startTime</code>：有些浏览器实现为<a href="https://msdn.microsoft.com/en-us/library/ff974724(v=vs.85" target="_blank" rel="noopener"><code>navigationStart</code></a>.aspx)，代表浏览器开始unload前一个页面文档的开始时间节点。比如我们当前正在浏览baidu.com，在地址栏输入google.com并回车，浏览器的执行动作依次为：unload当前文档（即baidu.com）-&gt;请求下一文档（即google.com）。navigationStart的值便是触发unload当前文档的时间节点。</p><blockquote><p>如果当前文档为空，则navigationStart的值等于fetchStart。</p></blockquote></li><li><p><code>redirectStart</code>和<code>redirectEnd</code>：如果页面是由redirect而来，则redirectStart和redirectEnd分别代表redirect开始和结束的时间节点；</p></li><li><p><code>unloadEventStart</code>和<code>unloadEventEnd</code>：如果前一个文档和请求的文档是同一个域的，则<code>unloadEventStart</code>和<code>unloadEventEnd</code>分别代表浏览器unload前一个文档的开始和结束时间节点。否则两者都等于0；</p></li><li><p><code>fetchStart</code>是指在浏览器发起任何请求之前的时间值。在fetchStart和<code>domainLookupStart</code>之间，浏览器会检查当前文档的缓存；</p></li><li><p><code>domainLookupStart</code>和<code>domainLookupEnd</code>分别代表DNS查询的开始和结束时间节点。如果浏览器没有进行DNS查询（比如使用了cache），则两者的值都等于<code>fetchStart</code>；</p></li><li><p><code>connectStart</code>和<code>connectEnd</code>分别代表TCP建立连接和连接成功的时间节点。如果浏览器没有进行TCP连接（比如使用持久化连接webscoket），则两者都等于<code>domainLookupEnd</code>；</p></li><li><p><code>secureConnectionStart</code>：可选。如果页面使用HTTPS，它的值是安全连接握手之前的时刻。如果该属性不可用，则返回undefined。如果该属性可用，但没有使用HTTPS，则返回0；</p></li><li><p><code>requestStart</code>代表浏览器发起请求的时间节点，请求的方式可以是请求服务器、缓存、本地资源等；</p></li><li><p><code>responseStart</code>和<code>responseEnd</code>分别代表浏览器收到从服务器端（或缓存、本地资源）响应回的第一个字节和最后一个字节数据的时刻；</p></li><li><p><code>domLoading</code>代表浏览器开始解析html文档的时间节点。我们知道IE浏览器下的document有<code>readyState</code>属性，<code>domLoading</code>的值就等于<code>readyState</code>改变为<code>loading</code>的时间节点；</p></li><li><p><code>domInteractive</code>代表浏览器解析html文档的状态为<code>interactive</code>时的时间节点。<code>domInteractive</code>并非DOMReady，它早于DOMReady触发，代表html文档解析完毕（即dom tree创建完成）但是内嵌资源（比如外链css、js等）还未加载的时间点；</p></li><li><p><code>domContentLoadedEventStart</code>：代表<code>DOMContentLoaded</code>事件触发的时间节点：</p><blockquote><p>页面文档完全加载并解析完毕之后,会触发DOMContentLoaded事件，HTML文档不会等待样式文件,图片文件,子框架页面的加载(load事件可以用来检测HTML页面是否完全加载完毕(fully-loaded))。</p></blockquote></li><li><p><code>domContentLoadedEventEnd</code>：代表<code>DOMContentLoaded</code>事件完成的时间节点，此刻用户可以对页面进行操作，也就是JS 脚本加载执行完毕或者jQuery中的domready时间；</p></li><li><p><code>domComplete</code>：html文档完全解析完毕的时间节点；</p></li><li><p><code>loadEventStart</code>和<code>loadEventEnd</code>分别代表onload事件触发和结束的时间节点</p></li></ul><p><strong>DOM的时间点</strong></p><p><img src="https://ws3.sinaimg.cn/large/006tNbRwgy1fx6fc3x5quj309n08umxm.jpg" alt=""></p><p>上图几个DOM时间点的解释：</p><ul><li><p>domLoading：这是整个过程的起始时间戳，浏览器即将开始解析第一批收到的 HTML 文档字节。</p></li><li><p>domInteractive：表示浏览器完成对所有 HTML 的解析并且 DOM 构建完成的时间点。</p></li><li><p>domContentLoaded：表示 DOM 准备就绪并且没有样式表阻止 JavaScript 执行的时间点，这意味着现</p><p>在我们可以构建渲染树了。</p><ul><li>许多 JavaScript 框架都会等待此事件发生后，才开始执行它们自己的逻辑。因此，浏览器会捕获<br>EventStart 和 EventEnd 时间戳，让我们能够追踪执行所花费的时间。</li></ul></li><li><p>domComplete：顾名思义，所有处理完成，并且网页上的所有资源（图像等）都已下载完毕，也就是说，加载转环已停止旋转。</p></li><li><p>loadEvent：作为每个网页加载的最后一步，浏览器会触发 onload 事件，以便触发额外的应用逻辑。</p></li></ul><h4 id="2-2-2-计算性能指标"><a href="#2-2-2-计算性能指标" class="headerlink" title="2.2.2 计算性能指标"></a>2.2.2 计算性能指标</h4><p>可以使用<code>Navigation.timing</code> 统计到的时间数据来计算一些页面性能指标，比如DNS查询耗时、白屏时间、domready等等。如下：</p><ul><li>DNS查询耗时 = domainLookupEnd - domainLookupStart</li><li>TCP链接耗时 = connectEnd - connectStart</li><li>request请求耗时 = responseEnd - responseStart</li><li>解析dom树耗时 = domComplete - domInteractive</li><li>白屏时间 = domloadng - fetchStart</li><li>domready时间 = domContentLoadedEventEnd - fetchStart</li><li>onload时间 = loadEventEnd - fetchStart</li></ul><h3 id="W3C-API"><a href="#W3C-API" class="headerlink" title="W3C API"></a>W3C API</h3><p>window.performance 是W3C性能小组引入的新的API，目前IE9以上的浏览器都支持。在Console Tab下，我们可以通过输入window.performance.timing来查询到浏览器显示一个页面，各个阶段所耗费的时间。</p><p><img src="https://ws3.sinaimg.cn/large/006tNbRwgy1fx6fhyllqej30bf0d70ue.jpg" alt=""></p><p>除了timing字段，performance还有几个字段，可以让我们对页面进行更好的分析</p><ol><li><p>memory字段代表的是JS对内存的占用</p></li><li><p>navigation字段统计的是一些网页导航。</p><p>2.1.  redirectCount 同源重定向的数量等</p><p>2.2.  type 返回值是0，1，2，</p><ul><li>0 : TYPE_NAVIGATE (用户通过常规导航方式访问页面，比如点一个链接，或者一般的get方式)</li><li>1 : TYPE_RELOAD (用户通过刷新，包括JS调用刷新接口等方式访问页面)</li><li>2 : TYPE_BACK_FORWARD (用户通过后退按钮访问本页面)</li></ul></li></ol><h3 id="chrome-API"><a href="#chrome-API" class="headerlink" title="chrome API"></a>chrome API</h3><p><img src="https://ws3.sinaimg.cn/large/006tNbRwgy1fx6fjvukvaj30c10frmzg.jpg" alt=""></p><h2 id="performance"><a href="#performance" class="headerlink" title="performance"></a>performance</h2><p>之前chorme老版本名为timeline，指的是当你的页面在浏览器运行时的性能表现，用这个performance功能去分析Response, Animation, 以及 Idle 这三个性能指标。</p><h3 id="Begin"><a href="#Begin" class="headerlink" title="Begin"></a>Begin</h3><ol><li>打开Chrome的匿名模式。匿名模式可以保证Chrome在一个相对干净的环境下运行。比如，你安装了许多chrome插件，这些插件可能会影响我们分析性能表现。</li><li>在匿名模式下打开右边这个链接，<a href="https://googlechrome.github.io/devtools-samples/jank/" target="_blank" rel="noopener">DEMO</a>，这个网页就是我们要用来分析的DEMO。这个页面里都是很多上下移动的蓝色小方块。</li><li>右键检查Command+Opiton+I（Mac）或者Control+shift+I (Windows, Linux) 来打开Devtools。</li><li>开发使用的电脑配置普遍较高，在Performance选项卡中，对于CPU，选择4x减速。DevTools限制你的CPU，使其比平时慢4倍。</li></ol><blockquote><p>如果要确保它们在低端移动设备上运行良好，请将CPU限制设置为<strong>20x减速</strong>。</p></blockquote><p><img src="https://ws3.sinaimg.cn/large/006tNbRwgy1fwwyn0656fj30v40j441i.jpg" alt="performance"></p><ol><li>control 条，最上面一条，有录制，刷新页面，清除结果等操作</li><li>overview总览图，横轴是时间线，包含fps帧率，cpu占用，net网络请求，页面性能的汇总</li><li>火焰图，Network，Frames, Interactions, Main等 </li><li>总结：精确到毫秒级的分析，按调用层级，事件分类的整理</li></ol><p>在火焰图的network中 ： </p><ol><li>HTML 文件为蓝色。 </li><li>脚本为黄色。 </li><li>样式表为紫色。 </li><li>媒体文件为绿色。 </li><li>其他资源为灰色。</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">with</span>(performance)&#123;</span><br><span class="line">            readyStart = timing.fetchStart - timing.navigationStart;</span><br><span class="line">            redirectTime = timing.redirectEnd  - timing.redirectStart;</span><br><span class="line">            appcacheTime = timing.domainLookupStart  - timing.fetchStart;</span><br><span class="line">            unloadEventTime = timing.unloadEventEnd - timing.unloadEventStart;</span><br><span class="line">            lookupDomainTime = timing.domainLookupEnd - timing.domainLookupStart;</span><br><span class="line">            connectTime = timing.connectEnd - timing.connectStart;</span><br><span class="line">            requestTime = timing.responseEnd - timing.requestStart;</span><br><span class="line">            initDomTreeTime = timing.domInteractive - timing.responseEnd;</span><br><span class="line">            domReadyTime = timing.domContentLoadedEventEnd - timing.navigationStart;</span><br><span class="line">            loadTime = timing.loadEventEnd - timing.navigationStart;</span><br><span class="line">             <span class="comment">//过早获取时 domComplete有时会是0loadEventTime = timing.loadEventEnd - timing.loadEventStart;loadTime = timing.loadEventEnd - timing.navigationStart;</span></span><br><span class="line">             <span class="comment">//过早获取时 loadEventEnd有时会是0</span></span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'准备新页面时间耗时: '</span> + readyStart);</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'redirect 重定向耗时: '</span> + redirectTime);</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'Appcache 耗时: '</span> + appcacheTime);</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'unload 前文档耗时: '</span> + unloadEventTime);</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'DNS 查询耗时: '</span> + lookupDomainTime);</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'TCP连接耗时: '</span> + connectTime);</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'request请求耗时: '</span> + requestTime);</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'请求完毕至DOM加载: '</span> + initDomTreeTime);</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'DOM加载完成: '</span> + domReadyTime);</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'从开始至load总耗时: '</span> + loadTime);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,<span class="number">2000</span>) </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过分析，发现用此方法 DOM加载完成和全部加载完成耗用的时间和chrome浏览器NETWORDK面板上显示的DomContentLoaded 、Load时间基本一致，误差几ms，<br> 所以我们基本上可以用这个方法来统计我们所做的H5网站在不同地域、不同客户端下加载H5所耗用的时间，进而逐个优化。比如DNS耗时, DOM加载耗时了 </p><h3 id="reflow（回流）"><a href="#reflow（回流）" class="headerlink" title="reflow（回流）"></a>reflow（回流）</h3><p>说到页面为什么会慢？那是因为浏览器要花时间、花精力去渲染，尤其是当它发现某个部分发生了点变化影响了布局，需要倒回去重新渲染， 该过程称为<strong>reflow（回流）。</strong></p><p>在浏览器的渲染过程中（页面初始化，用户行为改变页面样式，动画改变页面样式） reflow（回流）repaint(重绘)都会大大影响web性能，尤其是h5页面。</p><p>reflow 几乎是无法避免的。现在界面上流行的一些效果，比如树状目录的折叠、展开（实质上是元素的显示与隐藏）等，都将引起浏览器的 reflow。鼠标滑过、点击……只要这些行为引起了页面上某些元素的占位面积、定位方式、边距等属性的变化，都会引起它内部、周围甚至整个页面的重新渲 染。通常我们都无法预估浏览器到底会 reflow 哪一部分的代码，它们都彼此相互影响着。</p>]]></content>
    
    <summary type="html">
    
      chorme performance，之前chorme老版本名为timeline，指的是当你的页面在浏览器运行时的性能表现，用这个performance功能去分析Response, Animation, 以及 Idle 这三个性能指标。
    
    </summary>
    
      <category term="默认分类" scheme="https://kitions.github.io/categories/%E9%BB%98%E8%AE%A4%E5%88%86%E7%B1%BB/"/>
    
    
      <category term="性能" scheme="https://kitions.github.io/tags/%E6%80%A7%E8%83%BD/"/>
    
  </entry>
  
  <entry>
    <title>Rxjs浅浅滴学习</title>
    <link href="https://kitions.github.io/2018/11/04/Rxjs/"/>
    <id>https://kitions.github.io/2018/11/04/Rxjs/</id>
    <published>2018-11-04T07:44:35.000Z</published>
    <updated>2018-12-05T03:35:13.356Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Rxjs浅浅滴学习"><a href="#Rxjs浅浅滴学习" class="headerlink" title="Rxjs浅浅滴学习"></a>Rxjs浅浅滴学习</h1><p>我们都知道 JS 是什么，那么什么是 Rx 呢？Rx 是 Reactive Extension（也叫 ReactiveX）的简称，指的是实践响应式编程的一套工具，<a href="http://reactivex.io/" target="_blank" rel="noopener">Rx 官网</a>首页的介绍是一套通过可监听流来做异步编程的 API（An API for asynchronous programming with observable streams）。</p><p>RxJS 是基于观察者模式和迭代器模式以函数式编程思维来实现的。</p><h3 id="RxJS-的特点"><a href="#RxJS-的特点" class="headerlink" title="RxJS 的特点"></a>RxJS 的特点</h3><ul><li>数据流抽象了很多现实问题</li><li>擅长处理异步问题</li><li>把复杂问题分解为简单问题的组合</li></ul><p>前端中的 DOM 事件、WebSocket 推送消息、AJAX 请求资源、动画都可以看作是数据流。</p><p>RxJS 对数据采用“推”的方式，当一个数据产生时，会将其推送给对应的处理函数，这个处理函数不用关心数据时同步产生还是异步产生的，因此处理异步将会变得非常简单。</p><p>RxJS 中很多操作符，每个操作符都提供了一个小功能，学习 RxJS 最重要的就是学习如何组合操作符来解决复杂问题。</p><p>在 RxJS 中用来解决异步事件管理的的基本概念是：</p><ul><li><strong>Observable (可观察对象):</strong> 表示一个概念，这个概念是一个可调用的未来值或事件的集合。</li><li><strong>Observer (观察者):</strong> 一个回调函数的集合，它知道如何去监听由 Observable 提供的值。</li><li><strong>Subscription (订阅):</strong> 表示 Observable 的执行，主要用于取消 Observable 的执行。</li><li><strong>Operators (操作符):</strong> 采用函数式编程风格的纯函数 (pure function)，使用像 <code>map</code>、<code>filter</code>、<code>concat</code>、<code>flatMap</code> 等这样的操作符来处理集合。</li><li><strong>Subject (主体):</strong> 相当于 EventEmitter，并且是将值或事件多路推送给多个 Observer 的唯一方式。</li><li><strong>Schedulers (调度器):</strong> 用来控制并发并且是中央集权的调度员，允许我们在发生计算时进行协调，例如 <code>setTimeout</code> 或 <code>requestAnimationFrame</code> 或其他。</li></ul><h2 id="Observable-可观察对象"><a href="#Observable-可观察对象" class="headerlink" title="Observable (可观察对象)"></a>Observable (可观察对象)</h2><p>Observables 是多个值的惰性推送集合。它填补了下面表格中的空白：</p><table><thead><tr><th></th><th>单个值</th><th>多个值</th></tr></thead><tbody><tr><td><strong>拉取</strong></td><td><a href="https://developer.mozilla.org/en-US/docs/Glossary/Function" target="_blank" rel="noopener"><code>Function</code></a></td><td><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols" target="_blank" rel="noopener"><code>Iterator</code></a></td></tr><tr><td><strong>推送</strong></td><td><a href="https://developer.mozilla.org/en-US/docs/Mozilla/JavaScript_code_modules/Promise.jsm/Promise" target="_blank" rel="noopener"><code>Promise</code></a></td><td><a href="https://cn.rx.js.org/class/es6/Observable.js~Observable.html" target="_blank" rel="noopener"><code>Observable</code></a></td></tr></tbody></table><p><strong>示例</strong> - 当订阅下面代码中的 Observable 的时候会立即(同步地)推送值<code>1</code>、<code>2</code>、<code>3</code>，然后1秒后会推送值<code>4</code>，再然后是完成流：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> observable = Rx.Observable.create(<span class="function"><span class="keyword">function</span> (<span class="params">observer</span>) </span>&#123;</span><br><span class="line">  observer.next(<span class="number">1</span>);</span><br><span class="line">  observer.next(<span class="number">2</span>);</span><br><span class="line">  observer.next(<span class="number">3</span>);</span><br><span class="line">  setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    observer.next(<span class="number">4</span>);</span><br><span class="line">    observer.complete();</span><br><span class="line">  &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><blockquote><p>Observables 像是没有参数, 但可以泛化为多个值的函数。</p></blockquote><p>Demo01：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'Hello'</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">42</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> x = foo.call(); <span class="comment">// 等同于 foo()</span></span><br><span class="line"><span class="built_in">console</span>.log(x);</span><br><span class="line"><span class="keyword">var</span> y = foo.call(); <span class="comment">// 等同于 foo()</span></span><br><span class="line"><span class="built_in">console</span>.log(y);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">"Hello"</span></span><br><span class="line"><span class="number">42</span></span><br><span class="line"><span class="string">"Hello"</span></span><br><span class="line"><span class="number">42</span></span><br></pre></td></tr></table></figure><p>Observables 重写上面的代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> foo = Rx.Observable.create(<span class="function"><span class="keyword">function</span> (<span class="params">observer</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'Hello'</span>);</span><br><span class="line">  observer.next(<span class="number">42</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">foo.subscribe(<span class="function"><span class="keyword">function</span> (<span class="params">x</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(x);</span><br><span class="line">&#125;);</span><br><span class="line">foo.subscribe(<span class="function"><span class="keyword">function</span> (<span class="params">y</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(y);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">"Hello"</span></span><br><span class="line"><span class="number">42</span></span><br><span class="line"><span class="string">"Hello"</span></span><br><span class="line"><span class="number">42</span></span><br></pre></td></tr></table></figure><p>这是因为函数和 Observables 都是惰性运算。如果你不调用函数，<code>console.log(&#39;Hello&#39;)</code> 就不会执行。Observables 也是如此，如果你不“调用”它(使用 <code>subscribe</code>)，<code>console.log(&#39;Hello&#39;)</code> 也不会执行。此外，“调用”或“订阅”是独立的操作：两个函数调用会触发两个单独的副作用，两个 Observable 订阅同样也是触发两个单独的副作用。EventEmitters 共享副作用并且无论是否存在订阅者都会尽早执行，Observables 与之相反，不会共享副作用并且是延迟执行。</p><blockquote><p>订阅 Observable 类似于调用函数。</p></blockquote><blockquote><p>Observables 传递值可以是同步的，也可以是异步的。</p></blockquote><h4 id="Observable剖析"><a href="#Observable剖析" class="headerlink" title="Observable剖析"></a>Observable剖析</h4><p>Observables 是使用 <code>Rx.Observable.create</code> 或创建操作符<strong>创建的</strong>，并使用观察者来<strong>订阅</strong>它，然后<strong>执行</strong>它并发送 <code>next</code> / <code>error</code> / <code>complete</code> 通知给观察者，而且执行可能会被<strong>清理</strong>。这四个方面全部编码在 Observables 实例中，但某些方面是与其他类型相关的，像 Observer (观察者) 和 Subscription (订阅)。</p><p>Observable 的核心关注点：</p><ul><li><strong>创建</strong> Observables</li><li><strong>订阅</strong> Observables</li><li><strong>执行</strong> Observables</li><li><strong>清理</strong> Observables</li></ul><h4 id="创建-Observables"><a href="#创建-Observables" class="headerlink" title="创建 Observables"></a>创建 Observables</h4><p><code>Rx.Observable.create</code> 是 <code>Observable</code> 构造函数的别名，它接收一个参数：<code>subscribe</code> 函数。</p><p>下面的示例创建了一个 Observable，它每隔一秒会向观察者发送字符串 <code>&#39;hi&#39;</code> 。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> observable = Rx.Observable.create(<span class="function"><span class="keyword">function</span> <span class="title">subscribe</span>(<span class="params">observer</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> id = setInterval(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    observer.next(<span class="string">'hi'</span>)</span><br><span class="line">  &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>Observables 可以使用 <code>create</code> 来创建, 但通常我们使用所谓的<a href="https://cn.rx.js.org/manual/overview.html#creation-operators" target="_blank" rel="noopener">创建操作符</a>, 像 <code>of</code>、<code>from</code>、<code>interval</code>、等等。</p><p> 在上面的示例中，<code>subscribe</code> 函数是用来描述 Observable 最重要的一块。我们来看下订阅是什么意思。</p><h4 id="订阅-Observables"><a href="#订阅-Observables" class="headerlink" title="订阅 Observables"></a>订阅 Observables</h4><p>示例中的 Observable 对象 <code>observable</code> 可以<strong>订阅</strong>，像这样：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">observable.subscribe(<span class="function"><span class="params">x</span> =&gt;</span> <span class="built_in">console</span>.log(x));</span><br></pre></td></tr></table></figure><p><code>observable.subscribe</code> 和 <code>Observable.create(function subscribe(observer) {...})</code> 中的 <code>subscribe</code> 有着同样的名字，这并不是一个巧合。在库中，它们是不同的，但从实际出发，可以认为在概念上它们是等同的。</p><blockquote><p>订阅 Observable 像是调用函数, 并提供接收数据的回调函数。</p></blockquote><p><code>subscribe</code> 调用是启动 “Observable 执行”的一种简单方式， 并将值或事件传递给本次执行的观察者。</p><h4 id="执行-Observables"><a href="#执行-Observables" class="headerlink" title="执行 Observables"></a>执行 Observables</h4><p><code>Observable.create(function subscribe(observer) {...})</code> 中<code>...</code>的代码表示 “Observable 执行”，它是惰性运算，只有在每个观察者订阅后才会执行。随着时间的推移，执行会以同步或异步的方式产生多个值。</p><p>Observable 执行可以传递三种类型的值：</p><ul><li>“Next” 通知： 发送一个值，比如数字、字符串、对象，等等。</li><li>“Error” 通知： 发送一个 JavaScript 错误 或 异常。</li><li>“Complete” 通知： 不再发送任何值。</li></ul><p>“Next” 通知是最重要，也是最常见的类型：它们表示传递给观察者的实际数据。”Error” 和 “Complete” 通知可能只会在 Observable 执行期间发生一次，并且只会执行其中的一个。</p><blockquote><p>在 Observable 执行中, 可能会发送零个到无穷多个 “Next” 通知。如果发送的是 “Error” 或 “Complete” 通知的话，那么之后不会再发送任何通知了。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> observable = Rx.Observable.create(<span class="function"><span class="keyword">function</span> <span class="title">subscribe</span>(<span class="params">observer</span>) </span>&#123;</span><br><span class="line">  observer.next(<span class="number">1</span>);</span><br><span class="line">  observer.next(<span class="number">2</span>);</span><br><span class="line">  observer.next(<span class="number">3</span>);</span><br><span class="line">  observer.complete();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> observable = Rx.Observable.create(<span class="function"><span class="keyword">function</span> <span class="title">subscribe</span>(<span class="params">observer</span>) </span>&#123;</span><br><span class="line">  observer.next(<span class="number">1</span>);</span><br><span class="line">  observer.next(<span class="number">2</span>);</span><br><span class="line">  observer.next(<span class="number">3</span>);</span><br><span class="line">  observer.complete();</span><br><span class="line">  observer.next(<span class="number">4</span>); <span class="comment">// 因为违反规约，所以不会发送</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> observable = Rx.Observable.create(<span class="function"><span class="keyword">function</span> <span class="title">subscribe</span>(<span class="params">observer</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    observer.next(<span class="number">1</span>);</span><br><span class="line">    observer.next(<span class="number">2</span>);</span><br><span class="line">    observer.next(<span class="number">3</span>);</span><br><span class="line">    observer.complete();</span><br><span class="line">  &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">    observer.error(err); <span class="comment">// 如果捕获到异常会发送一个错误</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="清理-Observable-执行"><a href="#清理-Observable-执行" class="headerlink" title="清理 Observable 执行"></a>清理 Observable 执行</h4><p>因为 Observable 执行可能会是无限的，并且观察者通常希望能在有限的时间内中止执行，所以我们需要一个 API 来取消执行。因为每个执行都是其对应观察者专属的，一旦观察者完成接收值，它必须要一种方法来停止执行，以避免浪费计算能力或内存资源。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> observable = Rx.Observable.from([<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>]);</span><br><span class="line"><span class="keyword">var</span> subscription = observable.subscribe(<span class="function"><span class="params">x</span> =&gt;</span> <span class="built_in">console</span>.log(x));</span><br><span class="line"><span class="comment">// 稍后：</span></span><br><span class="line">subscription.unsubscribe();</span><br></pre></td></tr></table></figure><blockquote><p>当你订阅了 Observable，你会得到一个 Subscription ，它表示进行中的执行。只要调用 <code>unsubscribe()</code> 方法就可以取消执行。</p></blockquote><h2 id="Observer-观察者"><a href="#Observer-观察者" class="headerlink" title="Observer (观察者)"></a>Observer (观察者)</h2><p><strong>什么是观察者？</strong> - 观察者是由 Observable 发送的值的消费者。观察者只是一组回调函数的集合，每个回调函数对应一种 Observable 发送的通知类型：<code>next</code>、<code>error</code> 和 <code>complete</code> 。下面的示例是一个典型的观察者对象：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> observer = &#123;</span><br><span class="line">  next: <span class="function"><span class="params">x</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">'Observer got a next value: '</span> + x),</span><br><span class="line">  error: <span class="function"><span class="params">err</span> =&gt;</span> <span class="built_in">console</span>.error(<span class="string">'Observer got an error: '</span> + err),</span><br><span class="line">  complete: <span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">'Observer got a complete notification'</span>),</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>要使用观察者，需要把它提供给 Observable 的 <code>subscribe</code> 方法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">observable.subscribe(observer);</span><br></pre></td></tr></table></figure><blockquote><p>观察者只是有三个回调函数的对象，每个回调函数对应一种 Observable 发送的通知类型。</p></blockquote><h2 id="Subscription（订阅）"><a href="#Subscription（订阅）" class="headerlink" title="Subscription（订阅）"></a>Subscription（订阅）</h2><p><strong>什么是 Subscription ？</strong> - Subscription 是表示可清理资源的对象，通常是 Observable 的执行。Subscription 有一个重要的方法，即 <code>unsubscribe</code>，它不需要任何参数，只是用来清理由 Subscription 占用的资源。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> observable = Rx.Observable.interval(<span class="number">1000</span>);</span><br><span class="line"><span class="keyword">var</span> subscription = observable.subscribe(<span class="function"><span class="params">x</span> =&gt;</span> <span class="built_in">console</span>.log(x));</span><br><span class="line"><span class="comment">// 稍后：</span></span><br><span class="line"><span class="comment">// 这会取消正在进行中的 Observable 执行</span></span><br><span class="line"><span class="comment">// Observable 执行是通过使用观察者调用 subscribe 方法启动的</span></span><br><span class="line">subscription.unsubscribe();</span><br></pre></td></tr></table></figure><blockquote><p>Subscription 基本上只有一个 <code>unsubscribe()</code> 函数，这个函数用来释放资源或去取消 Observable 执行。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> observable1 = Rx.Observable.interval(<span class="number">400</span>);</span><br><span class="line"><span class="keyword">var</span> observable2 = Rx.Observable.interval(<span class="number">300</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> subscription = observable1.subscribe(<span class="function"><span class="params">x</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">'first: '</span> + x));</span><br><span class="line"><span class="keyword">var</span> childSubscription = observable2.subscribe(<span class="function"><span class="params">x</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">'second: '</span> + x));</span><br><span class="line"></span><br><span class="line">subscription.add(childSubscription);</span><br><span class="line"></span><br><span class="line">setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// subscription 和 childSubscription 都会取消订阅</span></span><br><span class="line">  subscription.unsubscribe();</span><br><span class="line">&#125;, <span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line">output:</span><br><span class="line">    second: <span class="number">0</span></span><br><span class="line">    first: <span class="number">0</span></span><br><span class="line">    second: <span class="number">1</span></span><br><span class="line">    first: <span class="number">1</span></span><br><span class="line">    second: <span class="number">2</span></span><br></pre></td></tr></table></figure><h4 id="simple-Demo1"><a href="#simple-Demo1" class="headerlink" title="simple Demo1"></a>simple Demo1</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> button = <span class="built_in">document</span>.querySelector(<span class="string">'button'</span>);</span><br><span class="line">button.addEventListener(<span class="string">'click'</span>, () =&gt;</span><br><span class="line">                        <span class="built_in">console</span>.log(<span class="string">'Clicked!'</span>)</span><br><span class="line">                       );</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> button = <span class="built_in">document</span>.querySelector(<span class="string">'button'</span>);</span><br><span class="line">Rx.Observable.fromEvent(button, <span class="string">'click'</span>)</span><br><span class="line">  .subscribe(<span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">'Clicked!'</span>));</span><br></pre></td></tr></table></figure><p><code>Rx.Observable.fromEvent()</code>相当于创建了一个可观察对象<code>Observable</code>,也就是监听的代理对象,subscribe是这个对象的一个方法,该方法返回这个监听的事件,<code>subscribe</code>方法的参数是对观察对象返回值做出下一步操作(回调函数).</p><h4 id="Demo2（控制流动）"><a href="#Demo2（控制流动）" class="headerlink" title="Demo2（控制流动）"></a>Demo2（控制流动）</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 输入 "hello world"</span></span><br><span class="line"><span class="keyword">var</span> input = Rx.Observable.fromEvent(<span class="built_in">document</span>.querySelector(<span class="string">'input'</span>), <span class="string">'input'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 过滤掉小于3个字符长度的目标值</span></span><br><span class="line">input.filter(<span class="function"><span class="params">event</span> =&gt;</span> event.target.value.length &gt; <span class="number">2</span>)</span><br><span class="line">  .map(<span class="function"><span class="params">event</span> =&gt;</span> event.target.value)</span><br><span class="line">  .subscribe(<span class="function"><span class="params">value</span> =&gt;</span> <span class="built_in">console</span>.log(value)); <span class="comment">// "hel"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 延迟事件</span></span><br><span class="line">input.delay(<span class="number">200</span>)</span><br><span class="line">  .map(<span class="function"><span class="params">event</span> =&gt;</span> event.target.value)</span><br><span class="line">  .subscribe(<span class="function"><span class="params">value</span> =&gt;</span> <span class="built_in">console</span>.log(value)); <span class="comment">// "h" -200ms-&gt; "e" -200ms-&gt; "l" ...</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 每200ms只能通过一个事件</span></span><br><span class="line">input.throttleTime(<span class="number">200</span>)</span><br><span class="line">  .map(<span class="function"><span class="params">event</span> =&gt;</span> event.target.value)</span><br><span class="line">  .subscribe(<span class="function"><span class="params">value</span> =&gt;</span> <span class="built_in">console</span>.log(value)); <span class="comment">// "h" -200ms-&gt; "w"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 停止输入后200ms方能通过最新的那个事件</span></span><br><span class="line">input.debounceTime(<span class="number">200</span>)</span><br><span class="line">  .map(<span class="function"><span class="params">event</span> =&gt;</span> event.target.value)</span><br><span class="line">  .subscribe(<span class="function"><span class="params">value</span> =&gt;</span> <span class="built_in">console</span>.log(value)); <span class="comment">// "o" -200ms-&gt; "d"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 在3次事件后停止事件流</span></span><br><span class="line">input.take(<span class="number">3</span>)</span><br><span class="line">  .map(<span class="function"><span class="params">event</span> =&gt;</span> event.target.value)</span><br><span class="line">  .subscribe(<span class="function"><span class="params">value</span> =&gt;</span> <span class="built_in">console</span>.log(value)); <span class="comment">// "hel"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 直到其他 observable 触发事件才停止事件流</span></span><br><span class="line"><span class="keyword">var</span> stopStream = Rx.Observable.fromEvent(<span class="built_in">document</span>.querySelector(<span class="string">'button'</span>), <span class="string">'click'</span>);</span><br><span class="line">input.takeUntil(stopStream)</span><br><span class="line">  .map(<span class="function"><span class="params">event</span> =&gt;</span> event.target.value)</span><br><span class="line">  .subscribe(<span class="function"><span class="params">value</span> =&gt;</span> <span class="built_in">console</span>.log(value)); <span class="comment">// "hello" (点击才能看到)</span></span><br></pre></td></tr></table></figure><h4 id="Demo3（产生值）"><a href="#Demo3（产生值）" class="headerlink" title="Demo3（产生值）"></a>Demo3（产生值）</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 输入 "hello world"</span></span><br><span class="line"><span class="keyword">var</span> input = Rx.Observable.fromEvent(<span class="built_in">document</span>.querySelector(<span class="string">'input'</span>), <span class="string">'input'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 传递一个新的值</span></span><br><span class="line">input.map(<span class="function"><span class="params">event</span> =&gt;</span> event.target.value)</span><br><span class="line">  .subscribe(<span class="function"><span class="params">value</span> =&gt;</span> <span class="built_in">console</span>.log(value)); <span class="comment">// "h"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 通过提取属性传递一个新的值</span></span><br><span class="line">input.pluck(<span class="string">'target'</span>, <span class="string">'value'</span>)</span><br><span class="line">  .subscribe(<span class="function"><span class="params">value</span> =&gt;</span> <span class="built_in">console</span>.log(value)); <span class="comment">// "h"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 传递之前的两个值</span></span><br><span class="line">input.pluck(<span class="string">'target'</span>, <span class="string">'value'</span>).pairwise()</span><br><span class="line">  .subscribe(<span class="function"><span class="params">value</span> =&gt;</span> <span class="built_in">console</span>.log(value)); <span class="comment">// ["h", "he"]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 只会通过唯一的值</span></span><br><span class="line">input.pluck(<span class="string">'data'</span>).distinct()</span><br><span class="line">  .subscribe(<span class="function"><span class="params">value</span> =&gt;</span> <span class="built_in">console</span>.log(value)); <span class="comment">// "helo wrd"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 不会传递重复的值</span></span><br><span class="line">input.pluck(<span class="string">'data'</span>).distinctUntilChanged()</span><br><span class="line">  .subscribe(<span class="function"><span class="params">value</span> =&gt;</span> <span class="built_in">console</span>.log(value)); <span class="comment">// "helo world"</span></span><br></pre></td></tr></table></figure><p>### </p>]]></content>
    
    <summary type="html">
    
      Rx 是 Reactive Extension（也叫 ReactiveX）的简称，指的是实践响应式编程的一套工具，Rx 官网首页的介绍是一套通过可监听流来做异步编程的 API（An API for asynchronous programming with observable streams）。RxJS 是基于观察者模式和迭代器模式以函数式编程思维来实现的。
    
    </summary>
    
      <category term="默认分类" scheme="https://kitions.github.io/categories/%E9%BB%98%E8%AE%A4%E5%88%86%E7%B1%BB/"/>
    
    
      <category term="rxjs" scheme="https://kitions.github.io/tags/rxjs/"/>
    
  </entry>
  
  <entry>
    <title>css-动画-PPT</title>
    <link href="https://kitions.github.io/2018/08/08/css-%E5%8A%A8%E7%94%BB-PPT/"/>
    <id>https://kitions.github.io/2018/08/08/css-动画-PPT/</id>
    <published>2018-08-08T09:19:33.000Z</published>
    <updated>2018-09-03T09:48:17.430Z</updated>
    
    <content type="html"><![CDATA[<p>实为简陋</p><p><a href="https://slides.com/nsplknsplk/deck/live#/" target="_blank" rel="noopener">css动画简析-在线PPT</a></p>]]></content>
    
    <summary type="html">
    
      网页版PPT，slides.com，
    
    </summary>
    
      <category term="默认分类" scheme="https://kitions.github.io/categories/%E9%BB%98%E8%AE%A4%E5%88%86%E7%B1%BB/"/>
    
    
      <category term="animation" scheme="https://kitions.github.io/tags/animation/"/>
    
  </entry>
  
  <entry>
    <title>css-GPU加速</title>
    <link href="https://kitions.github.io/2018/08/07/css-GPU%E5%8A%A0%E9%80%9F/"/>
    <id>https://kitions.github.io/2018/08/07/css-GPU加速/</id>
    <published>2018-08-07T08:31:13.000Z</published>
    <updated>2018-07-28T12:58:04.000Z</updated>
    
    <content type="html"><![CDATA[<p>我们可以在浏览器中用css开启硬件加速，使GPU (Graphics Processing Unit) 发挥功能，从而提升性能吗？</p><p>现在大多数电脑的显卡都支持硬件加速。鉴于此，我们可以发挥GPU的力量，从而使我们的网站或应用表现的更为流畅。</p><h3 id="在桌面端和移动端用CSS开启硬件加速"><a href="#在桌面端和移动端用CSS开启硬件加速" class="headerlink" title="在桌面端和移动端用CSS开启硬件加速"></a>在桌面端和移动端用CSS开启硬件加速</h3><p>CSS animations, transforms 以及 transitions 不会自动开启GPU加速，而是由浏览器的缓慢的软件渲染引擎来执行。那我们怎样才可以切换到GPU模式呢，很多浏览器提供了某些触发的CSS规则。</p><p>现在，像Chrome, FireFox, Safari, IE9+和最新版本的Opera都支持硬件加速，当它们检测到页面中某个DOM元素应用了某些CSS规则时就会开启，最显著的特征的元素的3D变换。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.cube</span> &#123;</span><br><span class="line">   <span class="attribute">-webkit-transform</span>: <span class="built_in">translate3d</span>(250px,250px,250px)</span><br><span class="line">   <span class="built_in">rotate3d</span>(250px,250px,250px,-120deg)</span><br><span class="line">   <span class="built_in">scale3d</span>(0.5, 0.5, 0.5);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可是在一些情况下，我们并不需要对元素应用3D变换的效果，那怎么办呢？这时候我们可以使用个小技巧“欺骗”浏览器来开启硬件加速。</p><p>虽然我们可能不想对元素应用3D变换，可我们一样可以开启3D引擎。例如我们可以用transform: translateZ(0); 来开启硬件加速 。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.cube</span> &#123;</span><br><span class="line">   <span class="attribute">-webkit-transform</span>: <span class="built_in">translateZ</span>(0);</span><br><span class="line">   <span class="attribute">-moz-transform</span>: <span class="built_in">translateZ</span>(0);</span><br><span class="line">   <span class="attribute">-ms-transform</span>: <span class="built_in">translateZ</span>(0);</span><br><span class="line">   <span class="attribute">-o-transform</span>: <span class="built_in">translateZ</span>(0);</span><br><span class="line">   <span class="attribute">transform</span>: <span class="built_in">translateZ</span>(0);</span><br><span class="line">   <span class="comment">/* Other transform properties here */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 Chrome and Safari中，当我们使用CSS transforms 或者 animations时可能会有页面闪烁的效果，下面的代码可以修复此情况：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.cube</span> &#123;</span><br><span class="line">   <span class="attribute">-webkit-backface-visibility</span>: hidden;</span><br><span class="line">   <span class="attribute">-moz-backface-visibility</span>: hidden;</span><br><span class="line">   <span class="attribute">-ms-backface-visibility</span>: hidden;</span><br><span class="line">   <span class="attribute">backface-visibility</span>: hidden;</span><br><span class="line"> </span><br><span class="line">   <span class="attribute">-webkit-perspective</span>: <span class="number">1000</span>;</span><br><span class="line">   <span class="attribute">-moz-perspective</span>: <span class="number">1000</span>;</span><br><span class="line">   <span class="attribute">-ms-perspective</span>: <span class="number">1000</span>;</span><br><span class="line">   <span class="attribute">perspective</span>: <span class="number">1000</span>;</span><br><span class="line">   <span class="comment">/* Other transform properties here */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在webkit内核的浏览器中，另一个行之有效的方法是</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.cube</span> &#123;</span><br><span class="line">   <span class="attribute">-webkit-transform</span>: <span class="built_in">translate3d</span>(0, 0, 0);</span><br><span class="line">   <span class="attribute">-moz-transform</span>: <span class="built_in">translate3d</span>(0, 0, 0);</span><br><span class="line">   <span class="attribute">-ms-transform</span>: <span class="built_in">translate3d</span>(0, 0, 0);</span><br><span class="line">   <span class="attribute">transform</span>: <span class="built_in">translate3d</span>(0, 0, 0);</span><br><span class="line">  <span class="comment">/* Other transform properties here */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>原生的移动端应用(Native mobile applications)总是可以很好的运用GPU，这是为什么它比网页应用(Web apps)表现更好的原因。硬件加速在移动端尤其有用，因为它可以有效的减少资源的利用(麦时注：移动端本身资源有限)。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>只对我们需要实现动画效果的元素应用以上方法，如果仅仅为了开启硬件加速而随便乱用，那是不明智的。</p><p>小心使用这些方法，如果通过你的测试，结果确是提高了性能，你才可以使用这些方法。使用GPU可能会导致严重的性能问题，因为它增加了内存的使用，而且它会减少移动端设备的电池寿命。</p><p>原文地址：<a href="http://blog.teamtreehouse.com/increase-your-sites-performance-with-hardware-accelerated-css" target="_blank" rel="noopener">http://blog.teamtreehouse.com/increase-your-sites-performance-with-hardware-accelerated-css</a>。</p>]]></content>
    
    <summary type="html">
    
      主要使用transform3D开启，浏览器开启硬件加速在移动端性能提升明显，如果仅仅为了开启硬件加速而随便乱用，那是不明智的。小心使用这些方法，如果通过你的测试，结果确是提高了性能，你才可以使用这些方法。使用GPU可能会导致严重的性能问题，因为它增加了内存的使用，而且它会减少移动端设备的电池寿命。
    
    </summary>
    
      <category term="默认分类" scheme="https://kitions.github.io/categories/%E9%BB%98%E8%AE%A4%E5%88%86%E7%B1%BB/"/>
    
    
      <category term="css" scheme="https://kitions.github.io/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>go接口、指针</title>
    <link href="https://kitions.github.io/2018/07/13/go%20%E6%8E%A5%E5%8F%A3%E6%8C%87%E9%92%88/"/>
    <id>https://kitions.github.io/2018/07/13/go 接口指针/</id>
    <published>2018-07-13T13:56:35.000Z</published>
    <updated>2018-09-03T09:47:29.076Z</updated>
    
    <content type="html"><![CDATA[<p>go 接口</p><ul><li>通过考虑数据类型之间的相同功能来创建抽象，而不是相同字段</li><li><code>interface{}</code> 的值不是任意类型，而是 <code>interface{}</code> 类型</li><li>接口包含两个字的大小，类似于 <code>(type, value)</code> </li><li><p>函数可以接受 <code>interface{}</code> 作为参数，但最好不要返回 <code>interface{}</code> </p></li><li><p>指针类型可以调用其所指向的值的方法，反过来不可以</p></li><li><p>函数中的参数甚至接受者都是通过值传递</p></li><li><p>一个接口的值就是就是接口而已，跟指针没什么关系</p></li><li><p>如果你想在方法中修改指针所指向的值，使用 <code>*</code> 操作符</p></li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"><span class="keyword">type</span> LessAdder <span class="keyword">interface</span> &#123;</span><br><span class="line">    Less(INTEGER) <span class="keyword">bool</span></span><br><span class="line">    Add(INTEGER)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">type</span> INTEGER <span class="keyword">int</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(a INTEGER)</span> <span class="title">Less</span><span class="params">(b INTEGER)</span> <span class="title">bool</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> a &lt; b</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(a *INTEGER)</span> <span class="title">Add</span><span class="params">(b INTEGER)</span></span> &#123; </span><br><span class="line">    fmt.Println(*a)   <span class="comment">//10</span></span><br><span class="line">    fmt.Println(b)  <span class="comment">// 40</span></span><br><span class="line">    *a += b</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> a INTEGER = <span class="number">10</span></span><br><span class="line">    <span class="keyword">var</span> b LessAdder = &amp;a</span><br><span class="line">    </span><br><span class="line">    fmt.Println(b.Less(<span class="number">20</span>)) <span class="comment">//true 等价于a.Less(20)</span></span><br><span class="line">    b.Add(<span class="number">40</span>)</span><br><span class="line">    fmt.Println(a) <span class="comment">//50</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"math"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Vertex <span class="keyword">struct</span> &#123;</span><br><span class="line">X, Y <span class="keyword">float64</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(v Vertex)</span> <span class="title">Abs</span><span class="params">()</span> <span class="title">float64</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> math.Sqrt(v.X*v.X + v.Y*v.Y)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(v *Vertex)</span> <span class="title">Scale</span><span class="params">(f <span class="keyword">float64</span>)</span></span> &#123;</span><br><span class="line">v.X = v.X * f</span><br><span class="line">v.Y = v.Y * f</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">v := Vertex&#123;<span class="number">3</span>, <span class="number">4</span>&#125;</span><br><span class="line">v.Scale(<span class="number">10</span>)   <span class="comment">//去掉这一行 5</span></span><br><span class="line">fmt.Println(v.Abs())   <span class="comment">//50</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://tour.golang.org/methods/6" target="_blank" rel="noopener">https://tour.golang.org/methods/6</a></p>]]></content>
    
    <summary type="html">
    
      如果你想在方法中修改指针所指向的值，使用 * 操作符
    
    </summary>
    
      <category term="默认分类" scheme="https://kitions.github.io/categories/%E9%BB%98%E8%AE%A4%E5%88%86%E7%B1%BB/"/>
    
    
      <category term="go" scheme="https://kitions.github.io/tags/go/"/>
    
  </entry>
  
  <entry>
    <title>go-fmt包之格式占位符</title>
    <link href="https://kitions.github.io/2018/07/12/go%20fmt%E5%8D%A0%E4%BD%8D%E7%AC%A6/"/>
    <id>https://kitions.github.io/2018/07/12/go fmt占位符/</id>
    <published>2018-07-12T03:13:11.000Z</published>
    <updated>2018-09-03T09:44:48.241Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 定义示例类型和变量</span><br><span class="line">type Human struct &#123;</span><br><span class="line">    Name string</span><br><span class="line">&#125;</span><br><span class="line">var people = Human&#123;Name:&quot;zhangsan&quot;&#125;</span><br></pre></td></tr></table></figure><h4 id="普通占位符"><a href="#普通占位符" class="headerlink" title="普通占位符"></a>普通占位符</h4><table><thead><tr><th style="text-align:center">占位符</th><th style="text-align:left">说明</th><th>举例</th><th>输出</th></tr></thead><tbody><tr><td style="text-align:center">%v</td><td style="text-align:left">响应值的默认格式</td><td>Printf(“%v”, people)</td><td>{zhangsan}</td></tr><tr><td style="text-align:center">%+v</td><td style="text-align:left">打印结构体时，会添加字段名</td><td>Printf(“%+v”, people)</td><td>{Name:zhangsan}</td></tr><tr><td style="text-align:center">%#v</td><td style="text-align:left">相应值的GO语法表示</td><td>Printf(“#v”, people)</td><td>main.Human{Name:zhangsan}</td></tr><tr><td style="text-align:center">%T</td><td style="text-align:left">相应值的类型的GO语法表示</td><td>Printf(“%T”,people)</td><td>main.Human</td></tr><tr><td style="text-align:center">%%</td><td style="text-align:left">字面上的百分号，并非值的占位符</td><td>Printf(“%%”)</td><td>%</td></tr></tbody></table><h4 id="布尔占位符"><a href="#布尔占位符" class="headerlink" title="布尔占位符"></a>布尔占位符</h4><table><thead><tr><th style="text-align:center">占位符</th><th style="text-align:left">说明</th><th>举例</th><th>输出</th></tr></thead><tbody><tr><td style="text-align:center">%t</td><td style="text-align:left">true或false</td><td>Printf(“%t”, true)</td><td>true</td></tr></tbody></table><h4 id="整数占位符"><a href="#整数占位符" class="headerlink" title="整数占位符"></a>整数占位符</h4><table><thead><tr><th style="text-align:center">占位符</th><th style="text-align:left">说明</th><th>举例</th><th>输出</th></tr></thead><tbody><tr><td style="text-align:center">%b</td><td style="text-align:left">二进制表示</td><td>Printf(“%b”, 5)</td><td>101</td></tr><tr><td style="text-align:center">%c</td><td style="text-align:left">相应Unicode码点所表示的字符</td><td>Printf(“%c”, 0x4E2D)</td><td>中</td></tr><tr><td style="text-align:center">%d</td><td style="text-align:left">十进制表示</td><td>Printf(“%d”, 0x12)</td><td>18</td></tr><tr><td style="text-align:center">%o</td><td style="text-align:left">八进制</td><td>Printf(“%d”, 10)</td><td>12</td></tr><tr><td style="text-align:center">%q</td><td style="text-align:left">单引号围绕的字符字面值，由Go语法安全地转义</td><td>Printf(“%q”, 0x4E2D)</td><td>‘中’</td></tr><tr><td style="text-align:center">%x</td><td style="text-align:left">十六进制表示，字母形式为小写 a-f</td><td>Printf(“%x”, 13)</td><td>d</td></tr><tr><td style="text-align:center">%X</td><td style="text-align:left">十六进制表示，字母形式为大写 A-F</td><td>Printf(“%x”, 13)</td><td>D</td></tr><tr><td style="text-align:center">%U</td><td style="text-align:left">Unicode格式：U+1234，等同于 “U+%04X”</td><td>Printf(“%U”, 0x4E2D)</td><td>U+4E2D</td></tr></tbody></table><h4 id="浮点数和复数的组成部分（实部和虚部）"><a href="#浮点数和复数的组成部分（实部和虚部）" class="headerlink" title="浮点数和复数的组成部分（实部和虚部）"></a>浮点数和复数的组成部分（实部和虚部）</h4><p>%e 和 %f 的默认精度为6</p><table><thead><tr><th style="text-align:center">占位符</th><th style="text-align:left">说明</th><th>举例</th><th>输出</th></tr></thead><tbody><tr><td style="text-align:center">%b</td><td style="text-align:left"></td><td></td><td></td></tr><tr><td style="text-align:center">%e</td><td style="text-align:left">科学计数法，例如 -1234.456e+78</td><td>Printf(“%e”, 10.2)</td><td>1.020000e+01</td></tr><tr><td style="text-align:center">%E</td><td style="text-align:left">科学计数法，例如 -1234.456E+78</td><td>Printf(“%e”, 10.2)</td><td>1.020000E+01</td></tr><tr><td style="text-align:center">%f</td><td style="text-align:left">有小数点而无指数，例如 123.456</td><td>Printf(“%f”, 10.2)</td><td>10.200000</td></tr><tr><td style="text-align:center">%g</td><td style="text-align:left">根据情况选择 %e 或 %f 以产生更紧凑的（无末尾的0）</td><td>Printf(“%g”, 10.20)</td><td>10.2</td></tr><tr><td style="text-align:center">%G</td><td style="text-align:left">根据情况选择 %E 或 %f 以产生更紧凑的（无末尾的0）</td><td>Printf(“%G”, 10.20+2i)</td><td>(10.2+2i)</td></tr></tbody></table><h4 id="字符串与字节切片"><a href="#字符串与字节切片" class="headerlink" title="字符串与字节切片"></a>字符串与字节切片</h4><table><thead><tr><th style="text-align:center">占位符</th><th style="text-align:left">说明</th><th>举例</th><th>输出</th></tr></thead><tbody><tr><td style="text-align:center">%s</td><td style="text-align:left">输出字符串表示（string类型或[]byte）</td><td>Printf(“%s”, []byte(“Go语言”))</td><td>Go语言</td></tr><tr><td style="text-align:center">%q</td><td style="text-align:left">双引号围绕的字符串，由Go语法安全地转义</td><td>Printf(“%q”, “Go语言”)</td><td>“Go语言”</td></tr><tr><td style="text-align:center">%x</td><td style="text-align:left">十六进制，小写字母，每字节两个字符</td><td>Printf(“%x”, “golang”)</td><td>676f6c616e67</td></tr><tr><td style="text-align:center">%X</td><td style="text-align:left">十六进制，大写字母，每字节两个字符</td><td>Printf(“%X”, “golang”)</td><td>676F6C616E67</td></tr></tbody></table><h4 id="指针"><a href="#指针" class="headerlink" title="指针"></a>指针</h4><table><thead><tr><th style="text-align:center">占位符</th><th style="text-align:left">说明</th><th>举例</th><th>输出</th></tr></thead><tbody><tr><td style="text-align:center">%p</td><td style="text-align:left">十六进制表示，前缀 0x</td><td>Printf(“%p”, &amp;people)</td><td>0x4f57f0</td></tr></tbody></table><h4 id="其他标记"><a href="#其他标记" class="headerlink" title="其他标记"></a>其他标记</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">占位符      说明                             举例          输出</span><br><span class="line">+      总打印数值的正负号；对于%q（%+q）保证只输出ASCII编码的字符。 </span><br><span class="line">                                           Printf(<span class="string">"%+q"</span>, <span class="string">"中文"</span>)  <span class="string">"\u4e2d\u6587"</span></span><br><span class="line">-      在右侧而非左侧填充空格（左对齐该区域）</span><br><span class="line">#      备用格式：为八进制添加前导 <span class="number">0</span>（%#o）      Printf(<span class="string">"%#U"</span>, <span class="string">'中'</span>)      U+<span class="number">4E2</span>D</span><br><span class="line">       为十六进制添加前导 <span class="number">0</span>x（%#x）或 <span class="number">0</span>X（%#X），为 %p（%#p）去掉前导 <span class="number">0</span>x；</span><br><span class="line">       如果可能的话，%q（%#q）会打印原始 （即反引号围绕的）字符串；</span><br><span class="line">       如果是可打印字符，%U（%#U）会写出该字符的</span><br><span class="line">       Unicode 编码形式（如字符 x 会被打印成 U+<span class="number">0078</span> <span class="string">'x'</span>）。</span><br><span class="line"><span class="string">' '</span>    (空格)为数值中省略的正负号留出空白（% d）；</span><br><span class="line">       以十六进制（% x, % X）打印字符串或切片时，在字节之间用空格隔开</span><br><span class="line"><span class="number">0</span>      填充前导的<span class="number">0</span>而非空格；对于数字，这会将填充移到正负号之后</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      fmt类似于c中的printf和scanf
    
    </summary>
    
      <category term="默认分类" scheme="https://kitions.github.io/categories/%E9%BB%98%E8%AE%A4%E5%88%86%E7%B1%BB/"/>
    
    
      <category term="go" scheme="https://kitions.github.io/tags/go/"/>
    
  </entry>
  
  <entry>
    <title>typescript之类、接口、定义</title>
    <link href="https://kitions.github.io/2018/07/10/typescript%E4%B9%8B%E7%B1%BB%E3%80%81%E6%8E%A5%E5%8F%A3%E3%80%81%E5%AE%9A%E4%B9%89/"/>
    <id>https://kitions.github.io/2018/07/10/typescript之类、接口、定义/</id>
    <published>2018-07-10T04:44:23.000Z</published>
    <updated>2018-09-03T09:46:43.918Z</updated>
    
    <content type="html"><![CDATA[<h3 id="类"><a href="#类" class="headerlink" title="类"></a>类</h3><pre><code>TS引入了类的概念，可以看做是一个语法糖。通过class关键字，可以定义类</code></pre><p>定义一个类</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> Student &#123;</span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params">x, y</span>) &#123;</span><br><span class="line">    <span class="keyword">this</span>.x = x;</span><br><span class="line">    <span class="keyword">this</span>.y = y;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  toString() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'('</span> + <span class="keyword">this</span>.x + <span class="string">', '</span> + <span class="keyword">this</span>.y + <span class="string">')'</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> s = <span class="keyword">new</span> Student(<span class="string">'wang'</span>,<span class="string">'li'</span>)</span><br></pre></td></tr></table></figure><ol><li>类和模块内部默认采用严格模式</li><li><code>constructor</code>方法是类的默认方法，通过new生成对象实例时，自动调用该方法。一个类必须有constuctor 方法，如果没有显式定义，一个空的constuctor方法会被默认添加。</li><li>必须使用new命令来调用class</li><li>类不存在变量提升，只有先声明类，才能使用类。</li><li>类的方法内部如果含有this，它默认指向类的实例。但是如果我们单独将其方法提取出来，this值可能会指向当前运行的环境。这个时候可以用箭头函数（this值指向初始化的函数）</li></ol><h3 id="public、private、protected和readonly"><a href="#public、private、protected和readonly" class="headerlink" title="public、private、protected和readonly"></a><strong>public、private、protected和readonly</strong></h3><p>   <code>public</code>、<code>private</code>、<code>protected</code>和<code>readonly</code>都是类的成员（属性）修饰符  </p><ol><li><p><strong>public</strong></p><pre><code>在TS里，成员都默认为`public`。被`public`修饰的属性，我们在类的内外都可以自由访问到这些被定义的属性。</code></pre></li></ol><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> Animal &#123;</span><br><span class="line">    <span class="keyword">public</span> name: <span class="built_in">string</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">constructor</span>(<span class="params">theName: <span class="built_in">string</span></span>) &#123; <span class="keyword">this</span>.name = theName; &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> <span class="keyword">new</span> Animal(<span class="string">"Cat"</span>).name;<span class="comment">//Cat</span></span><br></pre></td></tr></table></figure><ol start="2"><li><p><strong>private</strong></p><p>当成员被标记成private时，它就不能在声明它的类的外部访问。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> Animal &#123;</span><br><span class="line">     <span class="keyword">private</span> name: <span class="built_in">string</span>;</span><br><span class="line">     <span class="keyword">constructor</span>(<span class="params">theName: <span class="built_in">string</span></span>) &#123; <span class="keyword">this</span>.name = theName; &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> <span class="keyword">new</span> Animal(<span class="string">"Cat"</span>).name;<span class="comment">//Error!: Property 'name' is private and only access</span></span><br></pre></td></tr></table></figure></li><li><p><strong>protected</strong> </p><p><code>protected</code> 修饰符与 <code>private</code> 修饰符的行为很相似，但有一点不同，<code>protected</code> 成员在派生类中仍然可以访问。  使用 <code>private</code> 修饰的父类成员，派生类无法访问。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> Person &#123;</span><br><span class="line">    <span class="keyword">private</span> name: <span class="built_in">string</span>; <span class="comment">//如果这儿是protected就可以</span></span><br><span class="line">    <span class="keyword">constructor</span>(<span class="params">name: <span class="built_in">string</span></span>) &#123; <span class="keyword">this</span>.name = name; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Employee <span class="keyword">extends</span> Person &#123;</span><br><span class="line">    <span class="keyword">constructor</span>(<span class="params">name: <span class="built_in">string</span></span>) &#123; <span class="keyword">super</span>(name)&#125;</span><br><span class="line">    <span class="keyword">public</span> sayName() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.name;<span class="comment">//ERROR!: Property 'name' is private and only accessible within class 'Person'.</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> xiaoming = <span class="keyword">new</span> Employee(<span class="string">"xiaoming"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(xiaoming.sayName());</span><br></pre></td></tr></table></figure></li></ol><ol start="4"><li><p><strong>readonly修饰符</strong>  </p><p> <code>readonly</code> 关键字与 <code>public</code> 、 <code>private</code> 和 <code>protected</code> 不一样，它修饰的不是成员的访问权限，而是成员的再赋值权限。 </p><p>​        使用<code>readonly</code> 关键字将属性设置为只读的。 <strong>只读属性必须在声明时或构造函数里被初始化。</strong></p></li></ol><h3 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h3><blockquote><p>在面向对象的语言中，术语 <code>interface</code> 经常被用来定义一个不包含数据和逻辑代码但是用函数签名定义了行为的抽象类型。</p></blockquote><pre><code>但是对于TS来说，接口更重要的意义是对值所具有的 *结构* 进行类型检查。  接口根据属性划分，可以划分成三类，一种是**必选属性**，另一种是**可选属性**，还有一种就是**只读属性**。</code></pre><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> AnimalVaule&#123;</span><br><span class="line">    name?:<span class="built_in">string</span>;</span><br><span class="line">    eat:<span class="built_in">string</span>;</span><br><span class="line">    lifestyle?:<span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Animal</span>(<span class="params">animal:AnimalVaule</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name=animal.name;</span><br><span class="line">    <span class="keyword">this</span>.eat=animal.eat;</span><br><span class="line">    <span class="keyword">this</span>.lifestyle=animal.lifestyle;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> cat=<span class="keyword">new</span> Animal(&#123;eat:<span class="string">"食肉动物"</span>,lifestyle:<span class="string">"昼伏夜出"</span>&#125;);</span><br></pre></td></tr></table></figure><p><strong>可选属性</strong> 名字定义的后面加一个?符号</p><p>可选属性的好处： 可以对可能存在的属性进行预定义；可以捕获引用了不存在的属性时的错误。</p><p>只读属性 你可以在属性名前用<code>readonly</code>来指定只读属性:</p><p>做为变量使用的话用<code>const</code>，  做为属性则使用<code>readonly</code>。</p><pre><code>接口不仅仅能描述对象的属性，还能描述**函数类型**，**可索引类型**和**类类型**。（blur）</code></pre><h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><p>TS允许我们通过<code>extends</code>关键字来 <em>创建子类</em>（实现继承）。  下面这个例子，<code>Dog</code> 类继承自 <code>Animal</code> 类，在<code>Dog</code> 类中我们可以访问父类 <code>Animal</code> 的属性和方法</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> Animal &#123;</span><br><span class="line">    name: <span class="built_in">string</span>;</span><br><span class="line">    <span class="keyword">constructor</span>(<span class="params">theName: <span class="built_in">string</span></span>) &#123; <span class="keyword">this</span>.name = theName; &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> Dog <span class="keyword">extends</span> Animal &#123;</span><br><span class="line">    breed: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Dog(<span class="string">"mydog"</span>).name;<span class="comment">//mydog</span></span><br></pre></td></tr></table></figure><p><strong>注意：</strong>包含构造函数的派生类必须调用<code>super()</code>，它会执行基类的构造方法。</p>]]></content>
    
    <summary type="html">
    
      typescirpt的类 接口  继承
    
    </summary>
    
      <category term="默认分类" scheme="https://kitions.github.io/categories/%E9%BB%98%E8%AE%A4%E5%88%86%E7%B1%BB/"/>
    
    
      <category term="ts" scheme="https://kitions.github.io/tags/ts/"/>
    
  </entry>
  
  <entry>
    <title>数组根据某项分组</title>
    <link href="https://kitions.github.io/2018/07/03/%E6%95%B0%E7%BB%84%E6%A0%B9%E6%8D%AE%E6%9F%90%E9%A1%B9%E5%88%86%E7%BB%84/"/>
    <id>https://kitions.github.io/2018/07/03/数组根据某项分组/</id>
    <published>2018-07-03T03:11:35.000Z</published>
    <updated>2018-09-03T09:48:39.064Z</updated>
    
    <content type="html"><![CDATA[<p>一个数组中，每个数组对象有个公有属性，按照这个属性对数组进行分组（业务中遇到）。</p><p><img src="https://ws2.sinaimg.cn/large/006tNbRwgy1fu4dvrb6i6j30l80g3tdm.jpg" alt="后端返回数组"></p><p>将此数组按照category_name将数组分组，得到的数据结构方便我们渲染。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// js中方法</span></span><br><span class="line">groupData = data.data.infos;</span><br><span class="line">              <span class="keyword">let</span> map = &#123;&#125;,</span><br><span class="line">                  groupItems = [];</span><br><span class="line">              <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; groupData.length; i++)&#123;</span><br><span class="line">                  <span class="keyword">let</span> items = groupData[i];</span><br><span class="line">                  items.label=items.name;</span><br><span class="line">                  items.value=items.id;</span><br><span class="line">                  items.checked=<span class="literal">false</span>;</span><br><span class="line">                  <span class="keyword">if</span>(!map[items.category_name])&#123;</span><br><span class="line">                      groupItems.push(&#123;</span><br><span class="line">                          indeterminate:<span class="literal">null</span>,  <span class="comment">//样式需要</span></span><br><span class="line">                          checked:<span class="literal">false</span>,  </span><br><span class="line">                          name: items.category_name,</span><br><span class="line">                          data: [items]</span><br><span class="line">                      &#125;);</span><br><span class="line">                      map[items.category_name] = items;</span><br><span class="line">                  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                      <span class="keyword">for</span>(<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; groupItems.length; j++)&#123;</span><br><span class="line">                          <span class="keyword">let</span> s = groupItems[j];</span><br><span class="line">                          <span class="keyword">if</span>(s.name == items.category_name)&#123;</span><br><span class="line">                              s.data.push(items);</span><br><span class="line">                              <span class="keyword">break</span>;</span><br><span class="line">                          &#125;</span><br><span class="line">                      &#125;</span><br><span class="line">                  &#125;</span><br><span class="line">              &#125;</span><br><span class="line">              <span class="keyword">this</span>.groupItems = groupItems;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">&lt;!-- html-angular-antd-渲染  --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> *<span class="attr">ngFor</span>=<span class="string">"let item of groupItems;let idx=index"</span> &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"background-color: white;margin: 10px 0;padding: 10px;"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"border-bottom: 1px solid rgb(233, 233, 233);"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">label</span> <span class="attr">nz-checkbox</span> [(<span class="attr">ngModel</span>)]=<span class="string">"item.checked"</span> (<span class="attr">ngModelChange</span>)=<span class="string">"updateAllChecked(idx)"</span> [(<span class="attr">nzIndeterminate</span>)]=<span class="string">"item.indeterminate"</span> <span class="attr">style</span>=<span class="string">"font-weight: 600"</span>&gt;</span></span><br><span class="line">                &#123;&#123;item.name ? item.name : '其它'&#125;&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span>                      </span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">nz-checkbox-group</span> <span class="attr">class</span>=<span class="string">"input-demo"</span> [(<span class="attr">ngModel</span>)]=<span class="string">"item.data"</span> (<span class="attr">ngModelChange</span>)=<span class="string">"updateSingleChecked(idx)"</span>&gt;</span><span class="tag">&lt;/<span class="name">nz-checkbox-group</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>业务需要实现单选，全选checkbox</p><p><img src="https://ws3.sinaimg.cn/large/006tNbRwgy1fu4e2cpz0aj30j90k1wg9.jpg" alt=""></p>]]></content>
    
    <summary type="html">
    
      一个数组中，每个数组对象有个公有属性，按照这个属性对数组进行分组，业务需要实现单选，全选checkbox。
    
    </summary>
    
      <category term="默认分类" scheme="https://kitions.github.io/categories/%E9%BB%98%E8%AE%A4%E5%88%86%E7%B1%BB/"/>
    
    
      <category term="数组" scheme="https://kitions.github.io/tags/%E6%95%B0%E7%BB%84/"/>
    
  </entry>
  
  <entry>
    <title>八个明确（忽略）</title>
    <link href="https://kitions.github.io/2018/04/03/8%E4%B8%AA%E6%98%8E%E7%A1%AE/"/>
    <id>https://kitions.github.io/2018/04/03/8个明确/</id>
    <published>2018-04-03T08:41:35.000Z</published>
    <updated>2018-09-03T09:49:24.752Z</updated>
    
    <content type="html"><![CDATA[<ol><li>明确坚持和发展中国特色社会主义，总任务是实现社会主义现代化和中华民族伟大复兴，在全面建成小康社会的基础上，分两步走在本世纪中叶建成富强民主文明和谐美丽的社会主义现代化强国。</li><li>明确新时代我国社会的主要矛盾是人民日益增长的美好生活需要和不平衡不充分的发展之间的矛盾，必须坚持以人为中心的发展思想，不断促进人的全面发展，全体人民共同富裕。</li><li>明确中国特色社会主义事业<strong>总体布局</strong>是‘‘五位一体’’、<strong>战略布局</strong>是‘‘四个全面’’’，强调坚定道路自信、理论自信、制度自信、文化自信。(五位一体:经济建设、政治建设、文化建设、社会建设、生态文明建设；四个全面：全面建成小康社会、全面深化改革、全面依法治国、全面从严治党；四个自信：中国特色社会主义道路自信、理论自信、制度自信、文化自信)</li><li>明确<strong>全面深化改革总目标</strong>是完善和发展中国特色社会主义制度、推进国家治理体系和治理能力现代化。</li><li>明确全面推进<strong>依法治国总目标</strong>是建设中国特色社会主义法制体系、建设社会主义法治国家。</li><li>明确党在<strong>新时代的强军目标</strong>是建设一支听党指挥、能打胜仗、作风优良的人民军队，把人民军队建设成为世界一流军队。</li><li>明确中国特色大国外交要推动构建新型国际关系，推动构建人类命运共同体。</li><li>明确中国特色社会主义最本质的特征是中国共产党领导，中国特色社会主义制度的最大优势是中国共产党领导，党是最高政治领导力量，提出新时代党的建设总要求，突出政治建设在党的建设中的重要地位</li></ol>]]></content>
    
    <summary type="html">
    
      无
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>圣杯布局</title>
    <link href="https://kitions.github.io/2018/03/24/%E5%9C%A3%E6%9D%AF%E5%B8%83%E5%B1%80/"/>
    <id>https://kitions.github.io/2018/03/24/圣杯布局/</id>
    <published>2018-03-24T07:44:35.000Z</published>
    <updated>2018-12-05T03:34:25.226Z</updated>
    
    <content type="html"><![CDATA[<p>flex应用之一</p><p><img src="https://ws2.sinaimg.cn/large/006tKfTcgy1fqni3jw5ymj31kw0wljt2.jpg" style="width:400px"></p><p>如果是小屏幕，躯干的三栏自动变为垂直叠加。隐藏aside</p><p><img src="https://ws3.sinaimg.cn/large/006tKfTcgy1fqni5pg7hqj30rg13q0ur.jpg" style="width:400px"></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>layout<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css">    <span class="selector-class">.header</span> &#123;</span></span><br><span class="line"><span class="undefined">        height: 120px;</span></span><br><span class="line"><span class="undefined">        background: aliceblue;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.footer</span>&#123;</span></span><br><span class="line"><span class="undefined">        height: 120px;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">background</span><span class="selector-pseudo">:aqua</span> ;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="css">    <span class="selector-class">.HolyGrail-body</span>&#123;</span></span><br><span class="line"><span class="undefined">        min-height: 400px;</span></span><br><span class="line"><span class="undefined">        display: flex;</span></span><br><span class="line"><span class="undefined">        flex: 1;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.HolyGrail-content</span>&#123;</span></span><br><span class="line"><span class="undefined">        flex: 1;</span></span><br><span class="line"><span class="undefined">        background: blueviolet;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.HolyGrail-nav</span>, <span class="selector-class">.HolyGrail-ads</span>&#123;</span></span><br><span class="line"><span class="undefined">        flex:  0 0 200px;</span></span><br><span class="line"><span class="undefined">        background: yellow;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.HolyGrail-ads</span>&#123;</span></span><br><span class="line"><span class="undefined">        background: chartreuse;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.HolyGrail-nav</span>&#123;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">order</span><span class="selector-pseudo">:-1</span></span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">    @media(max-width: 768px)&#123;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.HolyGrail-body</span>&#123;</span></span><br><span class="line"><span class="undefined">            flex-direction: column;</span></span><br><span class="line"><span class="undefined">            flex: 1;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.HolyGrail-nav</span>,<span class="selector-class">.HolyGrail-content</span>&#123;</span></span><br><span class="line"><span class="undefined">            flex: auto;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.HolyGrail-ads</span>&#123;</span></span><br><span class="line"><span class="undefined">            display: none;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">header</span> <span class="attr">class</span>=<span class="string">"header"</span>&gt;</span>header<span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"HolyGrail-body"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">main</span> <span class="attr">class</span>=<span class="string">"HolyGrail-content"</span>&gt;</span>main<span class="tag">&lt;/<span class="name">main</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">nav</span> <span class="attr">class</span>=<span class="string">"HolyGrail-nav"</span>&gt;</span>nav<span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">aside</span> <span class="attr">class</span>=<span class="string">"HolyGrail-ads"</span>&gt;</span>aside<span class="tag">&lt;/<span class="name">aside</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">footer</span> <span class="attr">class</span>=<span class="string">"footer"</span>&gt;</span>footer<span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      圣杯布局（Holy Grail Layout）指的是一种最常见的网站布局。页面从上到下，分成三个部分：头部（header），躯干（body），尾部（footer）。其中躯干又水平分成三栏，从左到右为：导航、主栏、副栏。
    
    </summary>
    
      <category term="默认分类" scheme="https://kitions.github.io/categories/%E9%BB%98%E8%AE%A4%E5%88%86%E7%B1%BB/"/>
    
    
      <category term="HTML" scheme="https://kitions.github.io/tags/HTML/"/>
    
  </entry>
  
  <entry>
    <title>JS深拷贝和浅拷贝</title>
    <link href="https://kitions.github.io/2018/02/15/js%E6%B7%B1%E6%8B%B7%E8%B4%9D%E6%B5%85%E6%8B%B7%E8%B4%9D/"/>
    <id>https://kitions.github.io/2018/02/15/js深拷贝浅拷贝/</id>
    <published>2018-02-15T06:18:35.000Z</published>
    <updated>2018-09-03T09:47:03.999Z</updated>
    
    <content type="html"><![CDATA[<h4 id="深拷贝和浅拷贝"><a href="#深拷贝和浅拷贝" class="headerlink" title="深拷贝和浅拷贝"></a>深拷贝和浅拷贝</h4><hr><ul><li>深拷贝：拷贝实例；浅拷贝：拷贝引用（原对象）。</li><li>JavaScript的变量类型：</li></ul><ol><li><p>基本类型：undefined、null、Boolean、number、string。变量直接按指存放在栈区内，可以直接访问，所以我们平时把字符串、数字的值赋值给新变量，相当于把值完全复制过去，新变量的改变不会影响旧变量。</p></li><li><p>引用类型：存放在堆区的对象，变量在栈区中保存的是一个指针地址。</p></li><li><p>例子</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="number">123</span>;</span><br><span class="line"><span class="keyword">let</span> b = a;</span><br><span class="line">b = <span class="number">456</span>;</span><br><span class="line"><span class="built_in">console</span>.log(a);<span class="comment">//123</span></span><br><span class="line"><span class="built_in">console</span>.log(b);<span class="comment">//456</span></span><br></pre></td></tr></table></figure></li></ol><ul><li>深拷贝和浅拷贝图解<br><img src="http://img.blog.csdn.net/20171023222235180?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvQV94aWxpeGlhb2d1aQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></li><li>浅拷贝实现方式</li></ul><ol><li><p>函数实现</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">shallowClone</span> (<span class="params">source</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!source || <span class="keyword">typeof</span> source != <span class="string">'object'</span>)&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span> (<span class="string">'error'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> targetObj = source.constructor === <span class="built_in">Array</span> ? [] : &#123;&#125;;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> keys <span class="keyword">in</span> source) &#123;</span><br><span class="line">        <span class="keyword">if</span>(source.hasOwnProperty(keys))&#123;</span><br><span class="line">            targetObj[keys] = source[keys];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> targetObj；</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>最简单的浅拷贝：变量复制</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="number">123</span>;</span><br><span class="line"><span class="keyword">let</span> b = a;</span><br><span class="line">b = <span class="number">456</span>;</span><br><span class="line"><span class="built_in">console</span>.log(a);</span><br><span class="line"><span class="built_in">console</span>.log(b);</span><br></pre></td></tr></table></figure></li><li><p>通过es6新增的Object.assign来复制对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123; <span class="attr">name</span>: <span class="string">'程序狗'</span>, <span class="attr">age</span>:&#123;<span class="attr">child</span>: <span class="number">12</span>&#125; &#125;</span><br><span class="line"><span class="keyword">let</span> copy = <span class="built_in">Object</span>.assign(&#123;&#125;, obj);</span><br><span class="line">copy.name = <span class="string">'单身狗'</span>;</span><br><span class="line">copy.age.child = <span class="number">24</span>;</span><br><span class="line"><span class="built_in">console</span>.log(obj);<span class="comment">// &#123; name: '程序狗', age:&#123;child: 24&#125; &#125;</span></span><br></pre></td></tr></table></figure></li><li><p>jquey中的$.extend({}, obj); Array.prototype.slice()和Array.prototype.concat()都会返回一个数组或者对象的浅拷贝。（看起来像深拷贝）</p></li></ol><ul><li>深拷贝实现</li></ul><ol><li><p>函数实现</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">cloneDeep</span>(<span class="params">obj</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">typeof</span> obj !== <span class="string">'object'</span> || <span class="built_in">Object</span>.keys(obj).length === <span class="number">0</span> )&#123;</span><br><span class="line">        <span class="keyword">return</span> obj;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> resultData = &#123;&#125;;</span><br><span class="line">    <span class="keyword">return</span> recurison(obj, resultData);</span><br><span class="line">&#125;</span><br><span class="line">   </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">recurison</span>(<span class="params">obj, data = &#123;&#125;</span>)</span>&#123;  <span class="comment">//递归子对象</span></span><br><span class="line">    <span class="keyword">for</span>(key <span class="keyword">in</span> obj)&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">typeof</span> obj[key] == <span class="string">'object'</span> &amp;&amp; <span class="built_in">Object</span>.keys(obj[key].length &gt; <span class="number">0</span> ))&#123;</span><br><span class="line">            data[key] = recurison(obj[key]);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            data[key] = obj[key];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> data;</span><br><span class="line">&#125;</span><br><span class="line">   </span><br><span class="line"><span class="keyword">var</span> o1 = &#123;</span><br><span class="line">    arr: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>],</span><br><span class="line">    obj: &#123;</span><br><span class="line">        key: <span class="string">'value'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    func: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">   </span><br><span class="line"><span class="keyword">var</span> o3 = cloneDeep(o1);</span><br><span class="line"><span class="built_in">console</span>.log(o3 === o1);<span class="comment">//false</span></span><br><span class="line"><span class="built_in">console</span>.log(o3.obj === <span class="number">01.</span>obj);<span class="comment">//false</span></span><br><span class="line"><span class="built_in">console</span>.log(o3.func === o1.func);<span class="comment">//true</span></span><br></pre></td></tr></table></figure><p>//因为浅复制只会将对象的各个属性进行依次复制，并不会进行递归复制，而 JavaScript 存储对象都是存地址的，所以浅复制会导致 o3.key 和 o1.key 指向同一块内存地址</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">   &gt; *需要注意的是，如果对象比较大，层级也比较多，深复制会带来性能上的问题。在遇到需要采用深复制的场景时，可以考虑有没有其他替代的方案。在实际的应用场景中，也是浅复制更为常用。*</span><br><span class="line"></span><br><span class="line">2. JSON对象中的parse和stringify，JOSN对象中的stringify可以把一个js对象序列化为一个JSON字符串，parse可以把JSON字符串反序列化为一个js对象，通过这两个方法，也可以实现对象的深复制。</span><br><span class="line"></span><br><span class="line">   ```Js</span><br><span class="line">   var cloneObj = function(obj)&#123;</span><br><span class="line">       var str, newobj = obj.constructor === Array ? [] : &#123;&#125;;</span><br><span class="line">       if(typeof obj !== &apos;object&apos;)&#123;</span><br><span class="line">           return;</span><br><span class="line">       &#125; else if(window.JSON)&#123;</span><br><span class="line">           str = JSON.stringify(obj), //系列化对象</span><br><span class="line">           newobj = JSON.parse(str); //还原</span><br><span class="line">       &#125; else &#123;</span><br><span class="line">           for(var i in obj)&#123;</span><br><span class="line">               newobj[i] = typeof obj[i] === &apos;object&apos; ? </span><br><span class="line">               cloneObj(obj[i]) : obj[i]; </span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       return newobj;</span><br><span class="line">   &#125;;</span><br></pre></td></tr></table></figure><p>​</p></li></ol>]]></content>
    
    <summary type="html">
    
      对于字符串类型，浅复制是对值的复制，对于对象来说，浅复制是对对象地址的复制，并没有开辟新的栈，也就是复制的结果是两个对象指向同一个地址，修改其中一个对象的属性，则另一个对象的属性也会改变，而深复制则是开辟新的栈，两个对象对应两个不同的地址，修改一个对象的属性，不会改变另一个对象的属性。
    
    </summary>
    
      <category term="js" scheme="https://kitions.github.io/categories/js/"/>
    
    
      <category term="js" scheme="https://kitions.github.io/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>ES6之promise</title>
    <link href="https://kitions.github.io/2018/01/11/ES6%E4%B9%8Bpromise/"/>
    <id>https://kitions.github.io/2018/01/11/ES6之promise/</id>
    <published>2018-01-11T05:58:37.000Z</published>
    <updated>2018-09-03T09:48:06.316Z</updated>
    
    <content type="html"><![CDATA[<p><code>Promise</code>构造函数接受一个函数作为参数，该函数的两个参数分别是<code>resolve</code>和<code>reject</code>  </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ... some code</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (<span class="comment">/* 异步操作成功 */</span>)&#123;</span><br><span class="line">    resolve(value);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    reject(error);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//Promise实例生成以后，可以用then方法分别指定resolved状态和rejected状态的回调函数。</span></span><br><span class="line">promise.then(<span class="function"><span class="keyword">function</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// success</span></span><br><span class="line">&#125;, <span class="function"><span class="keyword">function</span>(<span class="params">error</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// failure</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><code>resolve</code>函数的作用是，将<code>Promise</code>对象的状态从“未完成”变为“成功”（即从 pending 变为 resolved），在异步操作成功时调用，并将异步操作的结果，作为参数传递出去；<code>reject</code>函数的作用是，将<code>Promise</code>对象的状态从“未完成”变为“失败”（即从 pending 变为 rejected），在异步操作失败时调用，并将异步操作报出的错误，作为参数传递出去。</p><p>例1：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">let promise = new Promise(function(resolve, reject) &#123;</span><br><span class="line">  console.log(&apos;Promise&apos;);</span><br><span class="line">  resolve();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">promise.then(function() &#123;</span><br><span class="line">  console.log(&apos;resolved.&apos;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">console.log(&apos;Hi!&apos;);</span><br><span class="line"></span><br><span class="line">// Promise</span><br><span class="line">// Hi!</span><br><span class="line">// resolved</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      ES6之promise，promise对象是一个构造函数，用来生成Promise实例
    
    </summary>
    
      <category term="默认分类" scheme="https://kitions.github.io/categories/%E9%BB%98%E8%AE%A4%E5%88%86%E7%B1%BB/"/>
    
    
      <category term="ES6" scheme="https://kitions.github.io/tags/ES6/"/>
    
  </entry>
  
  <entry>
    <title>VUE.JS 双向绑定实现原理Object.defineProperty()</title>
    <link href="https://kitions.github.io/2018/01/04/vue.js%20%E5%8F%8C%E5%90%91%E7%BB%91%E5%AE%9A%E5%8E%9F%E7%90%86/"/>
    <id>https://kitions.github.io/2018/01/04/vue.js 双向绑定原理/</id>
    <published>2018-01-04T10:13:35.000Z</published>
    <updated>2018-09-03T09:46:32.341Z</updated>
    
    <content type="html"><![CDATA[<h2 id="VUE-JS-双向绑定实现原理Object-defineProperty"><a href="#VUE-JS-双向绑定实现原理Object-defineProperty" class="headerlink" title="VUE.JS 双向绑定实现原理Object.defineProperty()"></a>VUE.JS 双向绑定实现原理Object.defineProperty()</h2><p>复习<a href="#object">Object.defineProperty()</a></p><p>目前常见的几种 mvc （mvvm）框架 都实现了单向数据绑定。</p><p>双向数据绑定就是在单向绑定的基础上给可输入的元素添加change 事件，来动态的修改 model 和 view。</p><blockquote><p>发布者-订阅者模式 (backbone.js)</p><p>脏值检查 (angular.js)</p><p><strong>数据劫持</strong>（vue.js）</p></blockquote><p><strong>发布者-订阅者模式</strong>：一般通过 sub，pub 的方式实现数据和视图的监听绑定，更新数据方式通常做法是<code>vm.set(&#39;property&#39;,value)</code></p><p>这种方式现在显得 low，我们希望通过 <code>vm.property = value</code> 这种方式更新数据，同时更新视图，于是有了下面两种方式</p><p><strong>脏值检查</strong>：angular.js 是通过脏值检测的方式比对数据是否有变更，来决定是否更新视图，最简单的方式就是通过 <code>setInterval()</code> 定时轮询检测数据变动，当然Google不会这么low，angular只有在指定的事件触发时进入脏值检测，大致如下：</p><ul><li>DOM事件，譬如用户输入文本，点击按钮等。( ng-click )</li><li>XHR响应事件 ( $http )</li><li>浏览器Location变更事件 ( $location )</li><li>Timer事件( $timeout , $interval )</li><li>执行 $digest() 或 $apply()</li></ul><p><strong><em>数据劫持</em> :</strong> vue.js 则是采用数据劫持结合发布者-订阅者模式的方式，通过<code>Object.defineProperty()</code>来劫持各个属性的<code>setter</code>，<code>getter</code>，在数据变动时发布消息给订阅者，触发相应的监听回调。</p><p><img src="https://ws4.sinaimg.cn/large/006tNc79gy1fpsk16q33oj30lt0g2myd.jpg" width="700px"></p><p>要实现 mvvm 的双向绑定，必须</p><ol><li>实现一个<strong>数据监听器</strong><code>Observer</code>，能够对数据对象的所有属性进行监听，如有变动可拿到最新值并通知订阅者</li><li>实现一个<strong>指令解析器</strong><code>Compile</code>，对每个元素节点的指令进行扫描和解析，根据指令模板替换数据，以及绑定相应的更新函数</li><li>实现一个<code>Watcher</code>，作为连接Observer和Compile的桥梁，能够订阅并收到每个属性变动的通知，执行指令绑定的相应回调函数，从而更新视图</li><li>mvvm入口函数，整合以上三者</li></ol><h4 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h4><h5 id="1-实现一个-Observer"><a href="#1-实现一个-Observer" class="headerlink" title="1. 实现一个 Observer"></a>1. 实现一个 Observer</h5><p>Observer是一个数据监听器，其实现核心方法就是前文所说的Object.defineProperty( )。如果要对所有属性都进行监听的话，那么可以通过递归方法遍历所有属性值，并对其进行Object.defineProperty( )处理。如下代码，实现了一个Observer。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">defineReactive</span>(<span class="params">data, key, val</span>) </span>&#123;</span><br><span class="line">    observe(val); <span class="comment">// 递归遍历所有子属性(这边不太明白)</span></span><br><span class="line">    <span class="built_in">Object</span>.defineProperty(data, key, &#123;</span><br><span class="line">        enumerable: <span class="literal">true</span>,</span><br><span class="line">        configurable: <span class="literal">true</span>,</span><br><span class="line">        get: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> val;</span><br><span class="line">        &#125;,</span><br><span class="line">        set: <span class="function"><span class="keyword">function</span>(<span class="params">newVal</span>) </span>&#123;</span><br><span class="line">            val = newVal;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'属性'</span> + key + <span class="string">'已经被监听了，现在值为：“'</span> + newVal.toString() + <span class="string">'”'</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">observe</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!data || <span class="keyword">typeof</span> data !== <span class="string">'object'</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">Object</span>.keys(data).forEach(<span class="function"><span class="keyword">function</span>(<span class="params">key</span>) </span>&#123;</span><br><span class="line">        defineReactive(data, key, data[key]);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">var</span> library = &#123;</span><br><span class="line">    book1: &#123;</span><br><span class="line">        name: <span class="string">''</span></span><br><span class="line">    &#125;,</span><br><span class="line">    book2: <span class="string">''</span></span><br><span class="line">&#125;;</span><br><span class="line">observe(library);</span><br><span class="line">library.book1.name = <span class="string">'vue权威指南'</span>; <span class="comment">// 属性name已经被监听了，现在值为：“vue权威指南”</span></span><br><span class="line">library.book2 = <span class="string">'没有此书籍'</span>;  <span class="comment">// 属性book2已经被监听了，现在值为：“没有此书籍”</span></span><br></pre></td></tr></table></figure><p>思路分析中，需要创建一个可以容纳订阅者的消息订阅器Dep，订阅器Dep主要负责收集订阅者，然后再属性变化的时候执行对应订阅者的更新函数。所以显然订阅器需要有一个容器，这个容器就是list，将上面的Observer稍微改造下，植入消息订阅器：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//link  这边不太明白</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">defineReactive</span>(<span class="params">data, key, val</span>) </span>&#123;</span><br><span class="line">    observe(val); <span class="comment">// 递归遍历所有子属性</span></span><br><span class="line">    <span class="keyword">var</span> dep = <span class="keyword">new</span> Dep(); </span><br><span class="line">    <span class="built_in">Object</span>.defineProperty(data, key, &#123;</span><br><span class="line">        enumerable: <span class="literal">true</span>,</span><br><span class="line">        configurable: <span class="literal">true</span>,</span><br><span class="line">        get: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (是否需要添加订阅者) &#123;</span><br><span class="line">                dep.addSub(watcher); <span class="comment">// 在这里添加一个订阅者</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> val;</span><br><span class="line">        &#125;,</span><br><span class="line">        set: <span class="function"><span class="keyword">function</span>(<span class="params">newVal</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (val === newVal) &#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            val = newVal;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'属性'</span> + key + <span class="string">'已经被监听了，现在值为：“'</span> + newVal.toString() + <span class="string">'”'</span>);</span><br><span class="line">            dep.notify(); <span class="comment">// 如果数据变化，通知所有订阅者</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Dep</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.subs = [];</span><br><span class="line">&#125;</span><br><span class="line">Dep.prototype = &#123;</span><br><span class="line">    addSub: <span class="function"><span class="keyword">function</span>(<span class="params">sub</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.subs.push(sub);</span><br><span class="line">    &#125;,</span><br><span class="line">    notify: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.subs.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">sub</span>) </span>&#123;</span><br><span class="line">            sub.update();</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>从代码上看，我们将订阅器Dep添加一个订阅者设计在getter里面，这是为了让Watcher初始化进行触发，因此需要判断是否要添加订阅者，至于具体设计方案，下文会详细说明的。在setter函数里面，如果数据变化，就会去通知所有订阅者，订阅者们就会去执行对应的更新的函数。到此为止，一个比较完整Observer已经实现了，接下来我们开始设计Watcher。</p><blockquote><p>之后有点不明白</p></blockquote><p>学习链接  <a href="https://www.cnblogs.com/libin-1/p/6893712.html" target="_blank" rel="noopener"><strong>vue数据双向绑定原理</strong></a></p><p><a href="https://segmentfault.com/a/1190000006599500" target="_blank" rel="noopener"><a href="https://segmentfault.com/a/1190000006599500" target="_blank" rel="noopener">剖析Vue原理&amp;实现双向绑定MVVM</a></a></p><h5 id="2-实现-watcher"><a href="#2-实现-watcher" class="headerlink" title="2.实现 watcher"></a>2.实现 watcher</h5><blockquote><p>补充：<a name="object">Object.defineProperty()</a></p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//数据描述</span></span><br><span class="line"><span class="built_in">Object</span>.defineProperty(obj,<span class="string">"key"</span>,&#123; </span><br><span class="line">    enumerable:<span class="literal">false</span>,  <span class="comment">// 可否 delete  目标属性是否可以再次设置特性   默认 false</span></span><br><span class="line">    configurable:<span class="literal">false</span>, <span class="comment">//可否枚举 使用for...in或Object.keys()                      默认 false</span></span><br><span class="line">    writable:<span class="literal">false</span>, <span class="comment">// 是否被赋值运算符改变(重写)  默认 false</span></span><br><span class="line">    value:<span class="string">"static"</span>  <span class="comment">//值 默认 undefined</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//obj：必需。目标对象 </span></span><br><span class="line"><span class="comment">//prop：必需。需定义或修改的属性的名字(key)</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//存取器描述</span></span><br><span class="line"><span class="keyword">var</span> obj = &#123;&#125;;</span><br><span class="line"><span class="built_in">Object</span>.defineProperty(obj,<span class="string">"newKey"</span>,&#123;</span><br><span class="line">    get:<span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;&#125; | <span class="literal">undefined</span>,</span><br><span class="line">    set:<span class="function"><span class="keyword">function</span> (<span class="params">value</span>)</span>&#123;&#125; | <span class="literal">undefined</span></span><br><span class="line">    configurable: <span class="literal">true</span> | <span class="literal">false</span></span><br><span class="line">    enumerable: <span class="literal">true</span> | <span class="literal">false</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//注意：当使用了getter或setter方法，不允许使用writable和value这两个属性</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//注意：get或set不是必须成对出现，任写其一就可以。如果不设置方法，则get和set的默认值为undefined</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//configurable和enumerable同上面的用法。</span></span><br></pre></td></tr></table></figure><p>在ie8下只能在DOM对象上使用，尝试在原生的对象使用 Object.defineProperty()会报错。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">"en"</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;<span class="regexp">/title&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div id=<span class="string">"app"</span>&gt;</span><br><span class="line">        &lt;input type=<span class="string">"text"</span> id=<span class="string">"a"</span> h-model=<span class="string">"text"</span>&gt;</span><br><span class="line">        &#123;&#123;text&#125;&#125;</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;script type="text/</span>javascript<span class="string">"&gt;</span></span><br><span class="line"><span class="string">    //和dom有关  数据绑定初始化</span></span><br><span class="line"><span class="string">    function convertNode(node, vm) &#123;</span></span><br><span class="line"><span class="string">        var fragment = document.createDocumentFragment(),child;</span></span><br><span class="line"><span class="string">        while(child = node.firstChild)&#123;</span></span><br><span class="line"><span class="string">            compile(child,vm)</span></span><br><span class="line"><span class="string">            fragment.appendChild(child)</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">        return fragment</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">    function compile(node,vm) &#123;</span></span><br><span class="line"><span class="string">        var reg = /\&#123;\&#123;(.*)\&#125;\&#125;/;</span></span><br><span class="line"><span class="string">        if(node.nodeType===1)&#123; //节点类型为元素节点</span></span><br><span class="line"><span class="string">            var attr = node.attributes; //对所有属性进行解析</span></span><br><span class="line"><span class="string">            for(var i = 0;i&lt;attr.length;i++)&#123;</span></span><br><span class="line"><span class="string">                if(attr[i].nodeName == 'h-model')&#123;  //匹配h-model</span></span><br><span class="line"><span class="string">                    //将元素与数据绑定</span></span><br><span class="line"><span class="string">                    var bindName = attr[i].nodeValue;</span></span><br><span class="line"><span class="string">                    node.value = vm.data[bindName]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">                    //为输入框添加事件监听触发</span></span><br><span class="line"><span class="string">                    node.addEventListener('input',function (e) &#123;</span></span><br><span class="line"><span class="string">                        vm.data[bindName] = e.target.value;</span></span><br><span class="line"><span class="string">                        node.value = vm.data[bindName];</span></span><br><span class="line"><span class="string">                    &#125;)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">                    node.removeAttribute('h-model');</span></span><br><span class="line"><span class="string">                &#125;</span></span><br><span class="line"><span class="string">            &#125;</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">        if(node.nodeType===3)&#123;</span></span><br><span class="line"><span class="string">            if(reg.test(node.nodeValue))&#123;</span></span><br><span class="line"><span class="string">                var bindName = RegExp.$1.trim()</span></span><br><span class="line"><span class="string">                // console.log(RegExp.$1)</span></span><br><span class="line"><span class="string">                // node.nodeValue = vm.data[bindName]</span></span><br><span class="line"><span class="string">                new Watcher(vm,node,bindName)</span></span><br><span class="line"><span class="string">            &#125;</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    //获取数据相关 数据响应</span></span><br><span class="line"><span class="string">    function Observer(data, vm) &#123;</span></span><br><span class="line"><span class="string">        // console.log(data)</span></span><br><span class="line"><span class="string">        if (!data || typeof data !== 'object') &#123;</span></span><br><span class="line"><span class="string">            return;</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">        Object.keys(data).forEach(function(key) &#123;</span></span><br><span class="line"><span class="string">            defineReactive(data, key, data[key]);</span></span><br><span class="line"><span class="string">        &#125;);</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">    function defineReactive(data, key, val) &#123;</span></span><br><span class="line"><span class="string">        Observer(val); // 递归遍历所有子属性</span></span><br><span class="line"><span class="string">        var dep = new Dep();</span></span><br><span class="line"><span class="string">        Object.defineProperty(data, key, &#123;</span></span><br><span class="line"><span class="string">            enumerable: true,</span></span><br><span class="line"><span class="string">            configurable: true,</span></span><br><span class="line"><span class="string">            get: function() &#123;</span></span><br><span class="line"><span class="string">                // console.log(Dep.target)</span></span><br><span class="line"><span class="string">                if(Dep.target)&#123;  //Dep.target存在的话，将目标元素添加到当前data属性的观察者列表中</span></span><br><span class="line"><span class="string">                    dep.addSub(Dep.target);</span></span><br><span class="line"><span class="string">                &#125;</span></span><br><span class="line"><span class="string">                return val;</span></span><br><span class="line"><span class="string">            &#125;,</span></span><br><span class="line"><span class="string">            set: function(newVal) &#123;</span></span><br><span class="line"><span class="string">                if(val === newVal) return;</span></span><br><span class="line"><span class="string">                val = newVal;</span></span><br><span class="line"><span class="string">                dep.notify(); // 如果数据变化，通知所有订阅者</span></span><br><span class="line"><span class="string">                // console.log('属性' + key + '已经被监听了，现在值为：“' + newVal.toString() + '”');</span></span><br><span class="line"><span class="string">            &#125;</span></span><br><span class="line"><span class="string">        &#125;);</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    function Dep() &#123;</span></span><br><span class="line"><span class="string">        this.subs=[];</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">    Dep.prototype = &#123;</span></span><br><span class="line"><span class="string">        addSub:function (sub) &#123;  //被观察者列表的添加动作</span></span><br><span class="line"><span class="string">            this.subs.push(sub);</span></span><br><span class="line"><span class="string">        &#125;,</span></span><br><span class="line"><span class="string">        notify: function () &#123;  //对观察者列表的所有观察者触发更新</span></span><br><span class="line"><span class="string">            this.subs.forEach(function (value) &#123;</span></span><br><span class="line"><span class="string">                console.log(value)</span></span><br><span class="line"><span class="string">                value.update();</span></span><br><span class="line"><span class="string">            &#125;)</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">    function Watcher(vm, node, bindname) &#123;</span></span><br><span class="line"><span class="string">        //将全局dep.target设置为当前页面元素node</span></span><br><span class="line"><span class="string">        Dep.target = this;</span></span><br><span class="line"><span class="string">        //完成watcher 的初始化</span></span><br><span class="line"><span class="string">        this.name = bindname;</span></span><br><span class="line"><span class="string">        this.node = node;</span></span><br><span class="line"><span class="string">        this.vm = vm;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        this.update(); //初次绑定时进行更新</span></span><br><span class="line"><span class="string">        Dep.target = null;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">    Watcher.prototype = &#123;</span></span><br><span class="line"><span class="string">        get:function () &#123;</span></span><br><span class="line"><span class="string">            this.value = this.vm.data[this.name]</span></span><br><span class="line"><span class="string">        &#125;,</span></span><br><span class="line"><span class="string">        update: function () &#123;</span></span><br><span class="line"><span class="string">            this.get();</span></span><br><span class="line"><span class="string">            this.node.nodeValue = this.value;</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    function Vue(options)&#123;</span></span><br><span class="line"><span class="string">        this.data = options.data</span></span><br><span class="line"><span class="string">        Observer(this.data,this)</span></span><br><span class="line"><span class="string">        var id = options.el;</span></span><br><span class="line"><span class="string">        var dom = convertNode(document.getElementById(id),this)</span></span><br><span class="line"><span class="string">        document.getElementById(id).appendChild(dom)</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">    var vm = new Vue(&#123;</span></span><br><span class="line"><span class="string">        el:'app',</span></span><br><span class="line"><span class="string">        data:&#123;</span></span><br><span class="line"><span class="string">            text:'Hello MVVM',</span></span><br><span class="line"><span class="string">            aaa:&#123;</span></span><br><span class="line"><span class="string">                text:"</span>hello<span class="string">"</span></span><br><span class="line"><span class="string">            &#125;</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">    &#125;);</span></span><br><span class="line"><span class="string">&lt;/script&gt;</span></span><br><span class="line"><span class="string">&lt;/body&gt;</span></span><br><span class="line"><span class="string">&lt;/html&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      vue.js 则是采用数据劫持结合发布者-订阅者模式的方式，通过Object.defineProperty()来劫持各个属性的setter，getter，在数据变动时发布消息给订阅者，触发相应的监听回调。创建 watcher 和 Compile 还不太明白，仍需要多加学习。
    
    </summary>
    
      <category term="vue.js" scheme="https://kitions.github.io/categories/vue-js/"/>
    
    
      <category term="vue.js" scheme="https://kitions.github.io/tags/vue-js/"/>
    
  </entry>
  
  <entry>
    <title>ES6之reduce (可数组对象的去重)</title>
    <link href="https://kitions.github.io/2017/12/23/ES6%E4%B9%8Breduce/"/>
    <id>https://kitions.github.io/2017/12/23/ES6之reduce/</id>
    <published>2017-12-23T10:42:54.000Z</published>
    <updated>2018-09-03T09:47:51.892Z</updated>
    
    <content type="html"><![CDATA[<p>除了for方法，研究数组的那几个迭代方法。使用下来，感觉确实妙用无穷，仿佛自己的逼格在无形中变得高大了一点点，重新一些总结文章。</p><p>这篇文章就是专门总结reduce方法的，这个方法大有可研究的地方，值得大家get它并去同手实践一下。</p><p>从最简单的例子开始。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span>  arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line">sum = arr.reduce(<span class="function"><span class="keyword">function</span>(<span class="params">prev, cur, index, arr</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(prevres, cur, index);</span><br><span class="line">    <span class="keyword">return</span> prevres + cur;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(arr, sum);</span><br></pre></td></tr></table></figure><p>输出结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1 2 1</span><br><span class="line">3 3 2</span><br><span class="line">6 4 3</span><br><span class="line">10 5 4</span><br><span class="line">[1, 2, 3, 4, 5] 15</span><br></pre></td></tr></table></figure><p>我们先重新回顾一下reduce中回调函数的参数，这个回调函数中有4个参数，意思分别为</p><p>prev: 第一项的值或者上一次叠加的结果值<br>cur: 当前会参与叠加的项<br>index： 当前值的索引<br>arr: 数组本身</p><p>首先我们要区分prev与cur这2个参数的区别，刚开始的时候我以为他们是一种类型的，可是后来我发现我理解错了。prev表示每次叠加之后的结果，类型可能与数组中的每一项不同，而cur则表示数组中参与叠加的当前项。在后边我们可以结合实例来理解这个地方。</p><p>其次我们看到，上例中其实值遍历了4次，数组有五项。数组中的第一项被当做了prev的初始值，而遍历从第二项开始。</p><p>我们看下面一个例子。</p><p>某同学的期末成绩如下表示</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> result = [</span><br><span class="line">    &#123;</span><br><span class="line">        subject: <span class="string">'math'</span>,</span><br><span class="line">        score: <span class="number">88</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        subject: <span class="string">'chinese'</span>,</span><br><span class="line">        score: <span class="number">95</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        subject: <span class="string">'english'</span>,</span><br><span class="line">        score: <span class="number">80</span></span><br><span class="line">    &#125;</span><br><span class="line">];</span><br></pre></td></tr></table></figure><p>如何求该同学的总成绩？</p><p>很显然，利用for循环可以很简单得出结论</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var sum = 0;</span><br><span class="line">for(var i=0; i&lt;result.length; i++) &#123;</span><br><span class="line">    sum += result[i].score;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是我们的宗旨就是抛弃for循环，因此使用reduce来搞定这个问题</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> sum = result.reduce(<span class="function"><span class="keyword">function</span>(<span class="params">prev, cur</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> cur.score + prev;</span><br><span class="line">&#125;, <span class="number">0</span>);</span><br></pre></td></tr></table></figure><p>这个时候，我给reduce参数添加了第二个参数。通过打印我发现设置了这个参数之后，reduce遍历便已经从第一项开始了。</p><p>这第二个参数就是设置prev的初始类型和初始值，比如为0，就表示prev的初始值为number类型，值为0，因此，reduce的最终结果也会是number类型。</p><p>因为第二个参数为累计结果的初始值，因此假设该同学因为违纪被处罚在总成绩总扣10分，只需要将初始值设置为-10即可。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var sum = result.reduce(function(prev, cur) &#123;</span><br><span class="line">    return cur.score + prev;</span><br><span class="line">&#125;, -10);</span><br></pre></td></tr></table></figure><p>我们来给这个例子增加一点难度。假如该同学的总成绩中，各科所占的比重不同，分别为50%，30%，20%，我们应该如何求出最终的权重结果呢？</p><p>解决方案如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">var dis = &#123;</span><br><span class="line">    math: 0.5,</span><br><span class="line">    chinese: 0.3,</span><br><span class="line">    english: 0.2</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var sum = result.reduce(function(prev, cur) &#123;</span><br><span class="line">    console.log(prev);</span><br><span class="line">    return cur.score + prev;</span><br><span class="line">&#125;, -10);</span><br><span class="line"></span><br><span class="line">var qsum = result.reduce(function(prev, cur) &#123;</span><br><span class="line">    return prev + cur.score * dis[cur.subject]</span><br><span class="line">&#125;, 0)</span><br><span class="line"></span><br><span class="line">console.log(sum, qsum);</span><br></pre></td></tr></table></figure><p>为了计算出权重之后的总值，我们在回调函数内部修改了数组当前项，是使他和权重比例关联袭来，并重新返回一个一样的回调函数，将新修改的当前项传入，就和之前的例子是一样的了。</p><p>有一道题，如何知道一串字符串中每个字母出现的次数？</p><p>我们可以运用reduce来解决这个问题。</p><p>我们在reduce的第二个参数里面初始了回调函数第一个参数的类型和值，将字符串转化为数组，那么迭代的结果将是一个对象，对象的每一项key值就是字符串的字母。运行感受一下吧。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arrString = <span class="string">'abcdaabc'</span>;</span><br><span class="line"></span><br><span class="line">arrString.split(<span class="string">''</span>).reduce(<span class="function"><span class="keyword">function</span>(<span class="params">res, cur</span>) </span>&#123;</span><br><span class="line">    res[cur] ? res[cur] ++ : res[cur] = <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;, &#123;&#125;)</span><br></pre></td></tr></table></figure><p>由于可以通过第二参数设置叠加结果的类型初始值，因此这个时候reduce就不再仅仅只是做一个加法了，我们可以灵活的运用它来进行各种各样的类型转换，比如将数组按照一定规则转换为对象，也可以将一种形式的数组转换为另一种形式的数组，大家可以动手去尝试一样。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[1, 2].reduce(function(res, cur) &#123; </span><br><span class="line">    res.push(cur + 1); </span><br><span class="line">    return res; </span><br><span class="line">&#125;, [])</span><br></pre></td></tr></table></figure><p>这种特性使得reduce在实际开发中大有可为！但是需要注意点，在ie9一下的浏览器中，并不支持该方法 ！</p><h6 id="利用reduce可以对数组对象进行一个去重"><a href="#利用reduce可以对数组对象进行一个去重" class="headerlink" title="利用reduce可以对数组对象进行一个去重"></a>利用reduce可以对数组对象进行一个去重</h6><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> result = [</span><br><span class="line">    &#123;</span><br><span class="line">        subject: <span class="string">'math'</span>,</span><br><span class="line">        score: <span class="number">88</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        subject: <span class="string">'chinese'</span>,</span><br><span class="line">        score: <span class="number">55</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        subject: <span class="string">'chinese'</span>,</span><br><span class="line">        score: <span class="number">44</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        subject: <span class="string">'english'</span>,</span><br><span class="line">        score: <span class="number">55</span></span><br><span class="line">    &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        subject: <span class="string">'chimney'</span>,</span><br><span class="line">        score: <span class="number">35</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        subject: <span class="string">'english'</span>,</span><br><span class="line">        score: <span class="number">80</span></span><br><span class="line">    &#125;</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="comment">//这是一个数组里包含的对象</span></span><br><span class="line"><span class="keyword">var</span> hash=&#123;&#125;,arr=[]</span><br><span class="line"><span class="keyword">var</span> arr = result.reduce(<span class="function"><span class="keyword">function</span>(<span class="params">res,cur</span>)</span>&#123;</span><br><span class="line">  hash[cur.subject] ? <span class="string">''</span> : hash[cur.subject] = <span class="literal">true</span> &amp;&amp; res.push(cur)  </span><br><span class="line">  <span class="keyword">return</span> res</span><br><span class="line">&#125;,[])</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(arr)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">reduce(function(res,cur)&#123;</span><br><span class="line">  </span><br><span class="line">&#125;,abc)</span><br><span class="line"></span><br><span class="line">//我个人理解abc这儿是一个初始化数据，比如写0，就定义为数字类型，res的初始值或者初始类型</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      ES6之reduce遍历数组，利用reduce可以进行对数组对象的去重
    
    </summary>
    
      <category term="默认分类" scheme="https://kitions.github.io/categories/%E9%BB%98%E8%AE%A4%E5%88%86%E7%B1%BB/"/>
    
    
      <category term="ES6" scheme="https://kitions.github.io/tags/ES6/"/>
    
  </entry>
  
  <entry>
    <title>ES6之promise</title>
    <link href="https://kitions.github.io/2017/12/14/ES6%D6%AEpromise/"/>
    <id>https://kitions.github.io/2017/12/14/ES6֮promise/</id>
    <published>2017-12-14T14:47:12.000Z</published>
    <updated>2018-09-03T09:47:36.175Z</updated>
    
    <content type="html"><![CDATA[<p><code>Promise</code>构造函数接受一个函数作为参数，该函数的两个参数分别是<code>resolve</code>和<code>reject</code>  </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ... some code</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (<span class="comment">/* 异步操作成功 */</span>)&#123;</span><br><span class="line">    resolve(value);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    reject(error);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//Promise实例生成以后，可以用then方法分别指定resolved状态和rejected状态的回调函数。</span></span><br><span class="line">promise.then(<span class="function"><span class="keyword">function</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// success</span></span><br><span class="line">&#125;, <span class="function"><span class="keyword">function</span>(<span class="params">error</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// failure</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><code>resolve</code>函数的作用是，将<code>Promise</code>对象的状态从“未完成”变为“成功”（即从 pending 变为 resolved），在异步操作成功时调用，并将异步操作的结果，作为参数传递出去；<code>reject</code>函数的作用是，将<code>Promise</code>对象的状态从“未完成”变为“失败”（即从 pending 变为 rejected），在异步操作失败时调用，并将异步操作报出的错误，作为参数传递出去。</p><p>例1：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">let promise = new Promise(function(resolve, reject) &#123;</span><br><span class="line">  console.log(&apos;Promise&apos;);</span><br><span class="line">  resolve();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">promise.then(function() &#123;</span><br><span class="line">  console.log(&apos;resolved.&apos;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">console.log(&apos;Hi!&apos;);</span><br><span class="line"></span><br><span class="line">// Promise</span><br><span class="line">// Hi!</span><br><span class="line">// resolved</span><br></pre></td></tr></table></figure><h6 id="promise代替回调函数的优缺点"><a href="#promise代替回调函数的优缺点" class="headerlink" title="promise代替回调函数的优缺点"></a>promise代替回调函数的优缺点</h6><p>优点：</p><ul><li>避免可读性极差的回调地狱</li><li>使用<code>.then()</code>编写的顺序异步代码，简单易读</li><li>使用<code>Promise.all()</code>编写并行异步代码变容易</li></ul><ul><li>使得原本的多层级的嵌套代码，变成了链式调用</li><li>让代码更清晰，减少嵌套数<br>​</li></ul><h6 id="promise执行顺序（settimeout、asnyc）"><a href="#promise执行顺序（settimeout、asnyc）" class="headerlink" title="promise执行顺序（settimeout、asnyc）"></a>promise执行顺序（settimeout、asnyc）</h6><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">'a'</span>), <span class="number">0</span>);</span><br><span class="line"><span class="keyword">var</span> p = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'b'</span>);</span><br><span class="line">  resolve();</span><br><span class="line">&#125;);</span><br><span class="line">p.then(<span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">'c'</span>));</span><br><span class="line">p.then(<span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">'d'</span>));</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'e'</span>);</span><br><span class="line"><span class="comment">// 结果：b e c d a</span></span><br><span class="line"><span class="comment">// 任务队列优先级：promise.Trick()&gt;promise的回调&gt;setTimeout&gt;setImmediate</span></span><br><span class="line"><span class="comment">// 先执行同步代码，遇到异步代码就先加入队列，然后按入队的顺序执行异步代码，最后执行setTimeout队列的代码。</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">async1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"a"</span>);</span><br><span class="line">    <span class="keyword">await</span>  async2(); <span class="comment">//执行这一句后，await会让出当前线程，将后面的代码加到任务队列中，然后继续执行函数后面的同步代码</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"b"</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">async2</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">   <span class="built_in">console</span>.log( <span class="string">'c'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"d"</span>);</span><br><span class="line">setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"e"</span>);</span><br><span class="line">&#125;,<span class="number">0</span>);</span><br><span class="line">async1();</span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"f"</span>);</span><br><span class="line">    resolve();</span><br><span class="line">&#125;).then(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"g"</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'h'</span>);</span><br><span class="line"><span class="comment">// 谁知道为啥结果不一样？？？？？？？？？？？？？  </span></span><br><span class="line"><span class="comment">// 直接在控制台中运行结果：      d a c f h g b e</span></span><br><span class="line"><span class="comment">// 在页面的script标签中运行结果：d a c f h b g e</span></span><br><span class="line"><span class="comment">// 我也不知道为什么不一样！</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      ES6之promise，promise对象是一个构造函数，用来生成Promise实例
    
    </summary>
    
      <category term="默认分类" scheme="https://kitions.github.io/categories/%E9%BB%98%E8%AE%A4%E5%88%86%E7%B1%BB/"/>
    
    
      <category term="ES6" scheme="https://kitions.github.io/tags/ES6/"/>
    
  </entry>
  
</feed>
