<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Filip</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://kitions.github.io/"/>
  <updated>2020-04-07T02:02:39.036Z</updated>
  <id>https://kitions.github.io/</id>
  
  <author>
    <name>link</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Angular中的自定义表单控件ControlValueAccessor</title>
    <link href="https://kitions.github.io/2020/04/02/Angular%E4%B8%AD%E7%9A%84%E8%87%AA%E5%AE%9A%E4%B9%89%E8%A1%A8%E5%8D%95%E6%8E%A7%E4%BB%B6ControlValueAccessor/"/>
    <id>https://kitions.github.io/2020/04/02/Angular中的自定义表单控件ControlValueAccessor/</id>
    <published>2020-04-02T09:52:16.000Z</published>
    <updated>2020-04-07T02:02:39.036Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Angular中的自定义表单控件ControlValueAccessor"><a href="#Angular中的自定义表单控件ControlValueAccessor" class="headerlink" title="Angular中的自定义表单控件ControlValueAccessor"></a>Angular中的自定义表单控件ControlValueAccessor</h1><p>这个是个较为简单的理解</p><p> ControlValueAccessor acts as a bridge between the Angular forms API and a native element in the DOM.</p><p>作用：</p><ul><li>把 form 模型中值映射到视图中</li><li>当视图发生变化时，通知 form directives 或 form controls</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> ControlValueAccessor &#123;</span><br><span class="line">  writeValue(obj: <span class="built_in">any</span>): <span class="built_in">void</span></span><br><span class="line">  registerOnChange(fn: <span class="built_in">any</span>): <span class="built_in">void</span></span><br><span class="line">  registerOnTouched(fn: <span class="built_in">any</span>): <span class="built_in">void</span></span><br><span class="line">  setDisabledState(isDisabled: <span class="built_in">boolean</span>)?: <span class="built_in">void</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>writeValue(obj: any)：该方法用于将模型中的新值写入视图或 DOM 属性中，即model-&gt;view</li><li>registerOnChange(fn: any)：设置当控件接收到 change 事件后，调用的函数，可以用来通知外部，组件已经发生变化，即view-&gt;model</li><li>registerOnTouched(fn: any)：设置当控件接收到 touched 事件后，调用的函数</li><li>setDisabledState?(isDisabled: boolean)：当控件状态变成 DISABLED 或从 DISABLED 状态变化成 ENABLE 状态时，会调用该函数。该函数会根据参数值，启用或禁用指定的 DOM 元素。</li></ul><p>任何一个组件或指令都可以通过实现 <code>ControlValueAccessor</code> 接口并注册为 <code>NG_VALUE_ACCESSOR</code>，从而转变成 <code>ControlValueAccessor</code> 类型的对象</p><p><code>registerOnChange</code> 方法来注册由每次原生表单控件值更新时触发的回调函数</p><p>Example:</p><p>子组件</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">    selector: <span class="string">'app-demo'</span>,</span><br><span class="line">    templateUrl: <span class="string">'./demo.component.html'</span>,</span><br><span class="line">    styleUrls: [<span class="string">'./demo.component.css'</span>],</span><br><span class="line">    providers: [</span><br><span class="line">        &#123;</span><br><span class="line">            provide: NG_VALUE_ACCESSOR,</span><br><span class="line">            useExisting: DemoComponent,</span><br><span class="line">            multi: <span class="literal">true</span></span><br><span class="line">        &#125;,</span><br><span class="line">        DemoService</span><br><span class="line">    ]</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> DemoComponent <span class="keyword">implements</span> ControlValueAccessor, OnInit &#123;</span><br><span class="line">    <span class="keyword">private</span> _result: &#123; [index: <span class="built_in">string</span>]: [] &#125; = &#123;&#125;;</span><br><span class="line">    <span class="keyword">private</span> _labelHandler: <span class="function">(<span class="params">val: <span class="built_in">any</span></span>) =&gt;</span> <span class="built_in">void</span>;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params"></span></span><br><span class="line"><span class="params">        <span class="keyword">private</span> service: DemoService,</span></span><br><span class="line"><span class="params">    </span>) &#123; &#125;</span><br><span class="line">  </span><br><span class="line">  aTestFunc()&#123;</span><br><span class="line">      <span class="keyword">this</span>._labelHandler(<span class="string">"123123"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">  writeValue(value: <span class="built_in">string</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (value) &#123;</span><br><span class="line">            <span class="comment">// todo 在这里对父组件传进来的ngmodel值做处理</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    registerOnChange(fn: <span class="built_in">any</span>) &#123;</span><br><span class="line">      <span class="comment">//每次控件view层的值发生改变，都要调用该方法通知外部</span></span><br><span class="line">        <span class="keyword">this</span>._labelHandler = fn;</span><br><span class="line">    &#125;</span><br><span class="line">    registerOnTouched(fn: <span class="built_in">any</span>) &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>父组件</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// html</span><br><span class="line">    <span class="tag">&lt;<span class="name">app-demo</span> [(<span class="attr">ngModel</span>)]=<span class="string">"demo"</span> &gt;</span><span class="tag">&lt;/<span class="name">app-demo</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// component.ts</span></span><br><span class="line"></span><br><span class="line">ngOnInit() &#123;</span><br><span class="line">  <span class="comment">// 给demo一个值双向绑定</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      ControlValueAccessor acts as a bridge between the Angular forms API and a native element in the DOM.
    
    </summary>
    
      <category term="默认分类" scheme="https://kitions.github.io/categories/%E9%BB%98%E8%AE%A4%E5%88%86%E7%B1%BB/"/>
    
    
      <category term="Angnular" scheme="https://kitions.github.io/tags/Angnular/"/>
    
  </entry>
  
  <entry>
    <title>Angular 6  -  ng2-ckedior上传图片自定义接口使用总结</title>
    <link href="https://kitions.github.io/2020/03/19/Ng2-ckedior%E4%B8%8A%E4%BC%A0%E5%9B%BE%E7%89%87%20%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8E%A5%E5%8F%A3%E4%BD%BF%E7%94%A8/"/>
    <id>https://kitions.github.io/2020/03/19/Ng2-ckedior上传图片 自定义接口使用/</id>
    <published>2020-03-19T09:29:44.000Z</published>
    <updated>2020-03-19T09:31:16.559Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// editor.module.ts</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; NgModule, CUSTOM_ELEMENTS_SCHEMA &#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; ShareModule &#125; <span class="keyword">from</span> <span class="string">'../../../share/share.module'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; CKEditorModule &#125; <span class="keyword">from</span> <span class="string">'ng2-ckeditor'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; CkEditorComponent &#125; <span class="keyword">from</span> <span class="string">'./ckeditor/ckeditor.component'</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@NgModule(&#123;</span><br><span class="line">    declarations: [</span><br><span class="line">        CkEditorComponent,</span><br><span class="line">    ],</span><br><span class="line">    imports: [</span><br><span class="line">        ShareModule,</span><br><span class="line">        CKEditorModule,</span><br><span class="line">    ],</span><br><span class="line">    exports: [</span><br><span class="line">        CkEditorComponent</span><br><span class="line">    ],</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">NewsEditorModule</span> </span>&#123; &#125;</span><br></pre></td></tr></table></figure><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// CkEditorComponent关键性代码</span></span><br><span class="line"><span class="comment">// this.actionURL上传链接</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> CkEditorComponent <span class="keyword">implements</span> ControlValueAccessor, OnInit,OnChanges, AfterViewInit &#123;</span><br><span class="line">  ngOnInit() &#123;</span><br><span class="line">        <span class="keyword">this</span>.ckeConfig =  &#123;</span><br><span class="line">            allowedContent: <span class="literal">false</span>,</span><br><span class="line">            extraPlugins: <span class="string">'divarea'</span>,</span><br><span class="line">            forcePasteAsPlainText: <span class="literal">false</span>,</span><br><span class="line">            height: <span class="number">500</span>,</span><br><span class="line">            toolbar: <span class="string">'Basic'</span>,</span><br><span class="line">            toolbarGroups: [</span><br><span class="line">                <span class="comment">// &#123; name: 'clipboard', groups: [ 'clipboard', 'undo' ] &#125;,</span></span><br><span class="line">                &#123; name: <span class="string">'editing'</span>, groups: [<span class="string">'find'</span>, <span class="string">'selection'</span>] &#125;, <span class="comment">// 'spellchecker'</span></span><br><span class="line">                &#123; name: <span class="string">'links'</span> &#125;,</span><br><span class="line">                &#123; name: <span class="string">'insert'</span> &#125;,</span><br><span class="line">                &#123; name: <span class="string">'forms'</span> &#125;,</span><br><span class="line">                &#123; name: <span class="string">'tools'</span> &#125;,</span><br><span class="line">                &#123; name: <span class="string">'document'</span>, groups: [<span class="string">'mode'</span>, <span class="string">'document'</span>, <span class="string">'doctools'</span>] &#125;,</span><br><span class="line">                &#123; name: <span class="string">'others'</span> &#125;,</span><br><span class="line">                &#123; name: <span class="string">'basicstyles'</span>, groups: [<span class="string">'basicstyles'</span>, <span class="string">'cleanup'</span>] &#125;,</span><br><span class="line">                &#123; name: <span class="string">'paragraph'</span>, groups: [<span class="string">'list'</span>, <span class="string">'indent'</span>, <span class="string">'align'</span>] &#125;,</span><br><span class="line">                &#123; name: <span class="string">'styles'</span> &#125;,</span><br><span class="line">                &#123; name: <span class="string">'colors'</span> &#125;,</span><br><span class="line">                <span class="comment">// &#123; name: 'about' &#125;</span></span><br><span class="line">            ],</span><br><span class="line">            filebrowserImageUploadUrl: <span class="keyword">this</span>.actionURL,</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">ngAfterViewInit() &#123;</span><br><span class="line">        <span class="keyword">const</span> self = <span class="keyword">this</span>;</span><br><span class="line">        setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> instanceName <span class="keyword">in</span> CKEDITOR.instances) &#123;</span><br><span class="line">                self.editor = CKEDITOR.instances[instanceName];</span><br><span class="line">                self.editor.on(<span class="string">"instanceReady"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">ev: <span class="built_in">any</span></span>) </span>&#123;</span><br><span class="line">                    <span class="keyword">let</span> editor = ev.editor;</span><br><span class="line">                    <span class="comment">// 监听上传事件</span></span><br><span class="line">                    editor.on(<span class="string">'fileUploadRequest'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">evt</span>) </span>&#123;</span><br><span class="line">                        <span class="keyword">var</span> fileLoader = evt.data.fileLoader,</span><br><span class="line">                            formData = <span class="keyword">new</span> FormData(),</span><br><span class="line">                            xhr = fileLoader.xhr;</span><br><span class="line"></span><br><span class="line">                        xhr.open(<span class="string">'POST'</span>, fileLoader.uploadUrl, <span class="literal">true</span>);</span><br><span class="line">                        xhr.setRequestHeader(<span class="string">'TOKEN'</span>, self._cookie.get(CookiesService.KEY));</span><br><span class="line"></span><br><span class="line">                        formData.append(<span class="string">'upload'</span>, fileLoader.file, fileLoader.fileName);</span><br><span class="line">                        fileLoader.xhr.send(formData);</span><br><span class="line"></span><br><span class="line">                        <span class="comment">// Prevented the default behavior.</span></span><br><span class="line">                        evt.stop();</span><br><span class="line">                    &#125;, <span class="literal">null</span>, <span class="literal">null</span>, <span class="number">4</span>);</span><br><span class="line">                    <span class="comment">// 监听返回事件</span></span><br><span class="line">                    editor.on(<span class="string">'fileUploadResponse'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">evt</span>) </span>&#123;</span><br><span class="line">                        <span class="comment">// Prevent the default response handler.</span></span><br><span class="line">                        evt.stop();</span><br><span class="line"></span><br><span class="line">                        <span class="comment">// Get XHR and response.</span></span><br><span class="line">                        <span class="keyword">var</span> data = evt.data,</span><br><span class="line">                            xhr = data.fileLoader.xhr,</span><br><span class="line">                            response = xhr.responseText.split(<span class="string">'|'</span>);</span><br><span class="line"></span><br><span class="line">                        <span class="keyword">if</span> (response[<span class="number">1</span>]) &#123;</span><br><span class="line">                            <span class="comment">// An error occurred during upload.</span></span><br><span class="line">                            data.message = response[<span class="number">1</span>];</span><br><span class="line">                            evt.cancel();</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            <span class="keyword">try</span> &#123;</span><br><span class="line">                                <span class="keyword">if</span> (response[<span class="number">0</span>]) &#123;</span><br><span class="line">                                    <span class="keyword">const</span> res = <span class="built_in">JSON</span>.parse(response[<span class="number">0</span>]);</span><br><span class="line">                                    <span class="keyword">if</span> (res.code === <span class="number">0</span>) &#123;</span><br><span class="line">                                        data.url = res.data &amp;&amp; res.data.key;</span><br><span class="line">                                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                                        data.message = res.msg;</span><br><span class="line">                                    &#125;</span><br><span class="line">                                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                                    data.message = <span class="string">"上传失败了"</span>;</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">                                <span class="built_in">console</span>.log(<span class="string">"上传图片出错"</span>, error);</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;);</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      ng2-ckedior上传图片的一些摸索，主要是ngAfterViewInit中的两个事件监听
    
    </summary>
    
      <category term="默认分类" scheme="https://kitions.github.io/categories/%E9%BB%98%E8%AE%A4%E5%88%86%E7%B1%BB/"/>
    
    
      <category term="Angnular" scheme="https://kitions.github.io/tags/Angnular/"/>
    
  </entry>
  
  <entry>
    <title>Next.js - FQ</title>
    <link href="https://kitions.github.io/2020/03/03/Next.js%20-%20FQ/"/>
    <id>https://kitions.github.io/2020/03/03/Next.js - FQ/</id>
    <published>2020-03-03T10:15:37.000Z</published>
    <updated>2020-03-03T10:12:38.259Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Next-js-FQ"><a href="#Next-js-FQ" class="headerlink" title="Next.js - FQ"></a>Next.js - FQ</h1><h2 id="How-to-use-cssModules"><a href="#How-to-use-cssModules" class="headerlink" title="How to use cssModules"></a>How to use cssModules</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"># install next-css</span><br><span class="line"></span><br><span class="line">yarn add @zeit/next-css</span><br><span class="line"></span><br><span class="line"># use nextCss warpped the config</span><br><span class="line"><span class="comment">// next.config.js</span></span><br><span class="line"><span class="keyword">const</span> withLess = <span class="built_in">require</span>(<span class="string">'@zeit/next-less'</span>);</span><br><span class="line"><span class="keyword">const</span> withCSS = <span class="built_in">require</span>(<span class="string">'@zeit/next-css'</span>);</span><br><span class="line">...</span><br><span class="line"><span class="built_in">module</span>.exports = withCSS(</span><br><span class="line">  withLess(&#123;</span><br><span class="line">    cssModules: <span class="literal">true</span>,</span><br><span class="line">    ... <span class="comment">// other config</span></span><br><span class="line">  &#125;)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"># use css modules</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> css <span class="keyword">from</span> <span class="string">"../style.css"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Component = <span class="function"><span class="params">props</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div className=&#123;css.example&#125;&gt;</span><br><span class="line">      ...</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">  );</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">export default Component;</span></span><br></pre></td></tr></table></figure><h2 id="How-to-listen-for-routing-changes"><a href="#How-to-listen-for-routing-changes" class="headerlink" title="How to listen for routing changes?"></a>How to listen for routing changes?</h2><p>The router of next provide some APIs that are used to listen for routing changes for us. <code>For example: beforeHistoryChange, routeChangeComplete...</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// _app.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> Router <span class="keyword">from</span> <span class="string">'next/router'</span>;</span><br><span class="line">...</span><br><span class="line"><span class="comment">// Listen the route path change</span></span><br><span class="line">Router.events.on(<span class="string">'routeChangeStart'</span>, (path) =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'route start change, the next route is:'</span>, path);</span><br><span class="line">  <span class="comment">// do something what you want to do.</span></span><br><span class="line">  ...</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="The-solution-of-ant-design-in-the-development-environment-style-load-is-incomplete"><a href="#The-solution-of-ant-design-in-the-development-environment-style-load-is-incomplete" class="headerlink" title="The solution of ant-design in the development environment style load is incomplete."></a>The solution of <code>ant-design</code> in the development environment style load is incomplete.</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// next.config.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> isDev = process.env.NODE_ENV !== <span class="string">'production'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// fix antd bug in dev development</span></span><br><span class="line"><span class="keyword">const</span> devAntd = <span class="string">'@import "~antd/dist/antd.less";\n'</span>;</span><br><span class="line"><span class="keyword">const</span> stylesData = fs.readFileSync(</span><br><span class="line">  path.resolve(__dirname, <span class="string">'./assets/_styles.less'</span>),</span><br><span class="line">  <span class="string">'utf-8'</span></span><br><span class="line">);</span><br><span class="line">fs.writeFileSync(</span><br><span class="line">  path.resolve(__dirname, <span class="string">'./assets/self-styles.less'</span>),</span><br><span class="line">  isDev ? <span class="string">`<span class="subst">$&#123;devAntd&#125;</span><span class="subst">$&#123;stylesData&#125;</span>`</span> : stylesData,</span><br><span class="line">  <span class="string">'utf-8'</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><h2 id="The-solution-of-min-css-extract-plugin-warning-in-the-console"><a href="#The-solution-of-min-css-extract-plugin-warning-in-the-console" class="headerlink" title="The solution of min-css-extract-plugin warning in the console"></a>The solution of <code>min-css-extract-plugin</code> warning in the console</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">chunk commons [mini-css-extract-plugin]</span><br><span class="line">Conflicting order between:</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>// next.config.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// define the webpack plugn</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FilterPlugin</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(options) &#123;</span><br><span class="line">    <span class="keyword">this</span>.options = options;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  apply(compiler) &#123;</span><br><span class="line">    compiler.hooks.afterEmit.tap(</span><br><span class="line">      <span class="string">'FilterPlugin'</span>,</span><br><span class="line">      (compilation) =&gt; &#123;</span><br><span class="line">        compilation.warnings = (compilation.warnings).filter(</span><br><span class="line">          warning =&gt; !<span class="keyword">this</span>.options.filter.test(warning.message)</span><br><span class="line">        );</span><br><span class="line">      &#125;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">webpack: <span class="function">(<span class="params">config, &#123;...args&#125;</span>) =&gt;</span> &#123;</span><br><span class="line">  config.plugins.push(</span><br><span class="line">    ...[</span><br><span class="line">      <span class="comment">// Instantiate the plugin and add it as a Webpack plugin</span></span><br><span class="line">      <span class="keyword">new</span> FilterPlugin(</span><br><span class="line">        &#123; <span class="attr">filter</span>: <span class="regexp">/chunk styles \[mini-css-extract-plugin]\nConflicting order between:/</span> &#125;</span><br><span class="line">      )</span><br><span class="line">    ]</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="How-to-polyfill-IE10-IE9-in-this-scaffold"><a href="#How-to-polyfill-IE10-IE9-in-this-scaffold" class="headerlink" title="How to polyfill IE10/IE9 in this scaffold?"></a>How to polyfill IE10/IE9 in this scaffold?</h2><h4 id="Add-polyfills-js-in-your-project"><a href="#Add-polyfills-js-in-your-project" class="headerlink" title="Add polyfills.js in your project."></a>Add polyfills.js in your project.</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// /core/polyfills.js</span></span><br><span class="line"><span class="comment">/* eslint no-extend-native: 0 */</span></span><br><span class="line"><span class="comment">// core-js comes with Next.js. So, you can import it like below</span></span><br><span class="line"><span class="keyword">import</span> includes <span class="keyword">from</span> <span class="string">'core-js/library/fn/string/virtual/includes'</span>;</span><br><span class="line"><span class="keyword">import</span> repeat <span class="keyword">from</span> <span class="string">'core-js/library/fn/string/virtual/repeat'</span>;</span><br><span class="line"><span class="keyword">import</span> assign <span class="keyword">from</span> <span class="string">'core-js/library/fn/object/assign'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'core-js/es6/map'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'core-js/es6/set'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Add your polyfills</span></span><br><span class="line"><span class="comment">// This files runs at the very beginning (even before React and Next.js core)</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'Load your polyfills'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">String</span>.prototype.includes = includes;</span><br><span class="line"><span class="built_in">String</span>.prototype.repeat = repeat;</span><br><span class="line"><span class="built_in">Object</span>.assign = assign;</span><br></pre></td></tr></table></figure><h4 id="How-to-alias-folder-path"><a href="#How-to-alias-folder-path" class="headerlink" title="How to alias folder path?"></a>How to alias folder path?</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// next.config.js</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// config alias</span></span><br><span class="line">config.resolve.alias[<span class="string">'@containers'</span>] =</span><br><span class="line">  path.resolve(__dirname, <span class="string">'./src/containers'</span>);</span><br></pre></td></tr></table></figure><h4 id="Config-the-next-config-js"><a href="#Config-the-next-config-js" class="headerlink" title="Config the next.config.js"></a>Config the next.config.js</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// next.config.js</span></span><br><span class="line">...</span><br><span class="line">webpack: <span class="function"><span class="keyword">function</span> (<span class="params">cfg</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> originalEntry = cfg.entry</span><br><span class="line">    cfg.entry = <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">      <span class="keyword">const</span> entries = <span class="keyword">await</span> originalEntry()</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (</span><br><span class="line">        entries[<span class="string">'main.js'</span>] &amp;&amp;</span><br><span class="line">        !entries[<span class="string">'main.js'</span>].includes(<span class="string">'./core/polyfills.js'</span>)</span><br><span class="line">      ) &#123;</span><br><span class="line">        entries[<span class="string">'main.js'</span>].unshift(<span class="string">'./core/polyfills.js'</span>)</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> entries</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> cfg</span><br><span class="line">  &#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h4 id="Downgrade-your-Next-version-to-‘7-0-2’"><a href="#Downgrade-your-Next-version-to-‘7-0-2’" class="headerlink" title="Downgrade your Next version to ‘7.0.2’"></a>Downgrade your Next version to ‘7.0.2’</h4><h2 id="The-ant-design-style-flash-when-page-refresh"><a href="#The-ant-design-style-flash-when-page-refresh" class="headerlink" title="The ant-design style flash when page refresh!"></a>The ant-design style flash when page refresh!</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// _app.js -&gt; getInitialProps</span></span><br><span class="line">  <span class="comment">/* 刷新页面 antd闪动 */</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="built_in">window</span> !== <span class="string">"undefined"</span>) &#123;</span><br><span class="line">    <span class="built_in">window</span>.onload = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">document</span>.getElementById(<span class="string">"flashStyle"</span>).remove();</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// _app.js -&gt; &lt;Head&gt;&lt;/Head&gt;</span></span><br><span class="line">&lt;style</span><br><span class="line">  id=<span class="string">'flashStyle'</span></span><br><span class="line">  dangerouslySetInnerHTML=&#123;&#123;</span><br><span class="line">    __html: <span class="string">`</span></span><br><span class="line"><span class="string">      *, *::before, *::after &#123;</span></span><br><span class="line"><span class="string">        transition: none!important;</span></span><br><span class="line"><span class="string">      &#125;</span></span><br><span class="line"><span class="string">    `</span></span><br><span class="line">  &#125;&#125;</span><br><span class="line">/&gt;</span><br></pre></td></tr></table></figure><h2 id="How-to-speed-up-packing-in-production"><a href="#How-to-speed-up-packing-in-production" class="headerlink" title="How to speed up packing in production?"></a>How to speed up packing in production?</h2><h4 id="1-tenser-webpack-plugin-gt-cache"><a href="#1-tenser-webpack-plugin-gt-cache" class="headerlink" title="1. tenser-webpack-plugin -&gt; cache"></a>1. tenser-webpack-plugin -&gt; cache</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> TerserPlugin(&#123;</span><br><span class="line">  cache: <span class="literal">true</span>, <span class="comment">// add this line</span></span><br><span class="line">  terserOptions: &#123;</span><br><span class="line">    ...</span><br><span class="line">  &#125;</span><br><span class="line">&#125;),</span><br></pre></td></tr></table></figure><h4 id="2-Add-thread-loader"><a href="#2-Add-thread-loader" class="headerlink" title="2. Add thread-loader"></a>2. Add thread-loader</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">config.module.rules.push(&#123;</span><br><span class="line">  test: <span class="regexp">/\.js$/</span>,</span><br><span class="line">  include: [</span><br><span class="line">    path.resolve(<span class="string">'src'</span>)</span><br><span class="line">    ...</span><br><span class="line">  ],</span><br><span class="line">  options: &#123;</span><br><span class="line">    workerParallelJobs: <span class="number">50</span>,</span><br><span class="line">    <span class="comment">// additional node.js arguments</span></span><br><span class="line">    workerNodeArgs: [<span class="string">'--max-old-space-size=1024'</span>],</span><br><span class="line">  &#125;,</span><br><span class="line">  loader: <span class="string">'thread-loader'</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="How-to-optimize-bundle-size"><a href="#How-to-optimize-bundle-size" class="headerlink" title="How to optimize bundle size?"></a>How to optimize bundle size?</h2><h4 id="Optimize-moment-local"><a href="#Optimize-moment-local" class="headerlink" title="Optimize moment local."></a>Optimize moment local.</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// next.config.js</span></span><br><span class="line"><span class="keyword">const</span> myWebpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>);</span><br><span class="line">...</span><br><span class="line"><span class="keyword">new</span> myWebpack.ContextReplacementPlugin(<span class="regexp">/moment[\/\\]locale$/</span>, /zh-cn|en/),</span><br></pre></td></tr></table></figure><h4 id="Optimize-antd-icon-dist"><a href="#Optimize-antd-icon-dist" class="headerlink" title="Optimize antd icon dist."></a>Optimize antd icon dist.</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// next.config.js</span></span><br><span class="line">...</span><br><span class="line">config.resolve.alias[<span class="string">'@ant-design/icons/lib/dist$'</span>] = path.resolve(__dirname, <span class="string">'./assets/icons.js'</span>);</span><br><span class="line"><span class="comment">// /assets/icons.js</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 你自己手动引入的Icon，默认是outline</span></span><br><span class="line"><span class="keyword">export</span> &#123;</span><br><span class="line">  <span class="keyword">default</span> <span class="keyword">as</span> LoginOutline</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">'@ant-design/icons/lib/outline/LoginOutline'</span>;</span><br><span class="line"><span class="keyword">export</span> &#123;</span><br><span class="line">  <span class="keyword">default</span> <span class="keyword">as</span> LogoutOutline</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">'@ant-design/icons/lib/outline/LogoutOutline'</span>;</span><br><span class="line"><span class="keyword">export</span> &#123;</span><br><span class="line">  <span class="keyword">default</span> <span class="keyword">as</span> UserOutline</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">'@ant-design/icons/lib/outline/UserOutline'</span>;</span><br><span class="line">...</span><br><span class="line"><span class="comment">// 下面的 不是自己引入的，而是内置组件引入的，比如Input/Select/Datepicker等</span></span><br><span class="line"><span class="keyword">export</span> &#123;</span><br><span class="line">  <span class="keyword">default</span> <span class="keyword">as</span> SearchOutline</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">'@ant-design/icons/lib/outline/SearchOutline'</span>;</span><br><span class="line"><span class="keyword">export</span> &#123;</span><br><span class="line">  <span class="keyword">default</span> <span class="keyword">as</span> DownOutline</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">'@ant-design/icons/lib/outline/DownOutline'</span>;</span><br><span class="line"><span class="keyword">export</span> &#123;</span><br><span class="line">  <span class="keyword">default</span> <span class="keyword">as</span> UpOutline</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">'@ant-design/icons/lib/outline/UpOutline'</span>;</span><br><span class="line"><span class="keyword">export</span> &#123;</span><br><span class="line">  <span class="keyword">default</span> <span class="keyword">as</span> CalendarOutline</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">'@ant-design/icons/lib/outline/CalendarOutline'</span>;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">"fs"</span>);</span><br><span class="line"><span class="keyword">const</span> withSass = <span class="built_in">require</span>(<span class="string">'@zeit/next-sass'</span>)</span><br><span class="line"><span class="keyword">const</span> withCss = <span class="built_in">require</span>(<span class="string">'@zeit/next-css'</span>);</span><br><span class="line"><span class="keyword">const</span> withBundleAnalyzer = <span class="built_in">require</span>(<span class="string">"@zeit/next-bundle-analyzer"</span>);</span><br><span class="line"><span class="keyword">const</span> webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>);</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">"path"</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> PROD_FILE = <span class="string">"./config/prod.json"</span>;</span><br><span class="line"><span class="keyword">const</span> DEV_FILE = <span class="string">"./config/dev.json"</span>;</span><br><span class="line"><span class="keyword">const</span> LOCAL_FILE = <span class="string">"./config/local.json"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> readConfig = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">const</span> prod = fs.existsSync(PROD_FILE);</span><br><span class="line"><span class="keyword">if</span> (prod) &#123;</span><br><span class="line"><span class="keyword">return</span> fs.readFileSync(PROD_FILE)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (process.env.NODE_ENV === <span class="string">'production'</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> fs.readFileSync(DEV_FILE)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> fs.readFileSync(LOCAL_FILE)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// return prod ?</span></span><br><span class="line"><span class="comment">// fs.readFileSync(PROD_FILE) :</span></span><br><span class="line"><span class="comment">// !fs.existsSync(LOCAL_FILE) ?</span></span><br><span class="line"><span class="comment">// fs.readFileSync(DEV_FILE) :</span></span><br><span class="line"><span class="comment">// fs.readFileSync(LOCAL_FILE)</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// fix: prevents error when .css files are required by node</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="built_in">require</span> !== <span class="string">'undefined'</span>) &#123;</span><br><span class="line"><span class="built_in">require</span>.extensions[<span class="string">'.css'</span>] = <span class="function"><span class="params">file</span> =&gt;</span> &#123;&#125;</span><br><span class="line"><span class="built_in">require</span>.extensions[<span class="string">'.scss'</span>] = <span class="function"><span class="params">file</span> =&gt;</span> &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> config = <span class="built_in">JSON</span>.parse(readConfig().toString());</span><br><span class="line"><span class="comment">// console.log("config is  :", config);</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> webpackConfig = <span class="function">(<span class="params">config, &#123;&#125;</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">const</span> originalEntry = config.entry;</span><br><span class="line">    config.entry = <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line"><span class="keyword">const</span> entries = <span class="keyword">await</span> originalEntry();</span><br><span class="line"><span class="keyword">if</span> (entries[<span class="string">'main.js'</span>]) &#123;</span><br><span class="line">entries[<span class="string">'main.js'</span>].unshift(<span class="string">'./polyfills.js'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> entries;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">config.module.rules.push(&#123;</span><br><span class="line">test: [<span class="regexp">/\.bmp$/</span>, /\.gif$/, /\.jpe?g$/, /\.png$/],</span><br><span class="line">use: [&#123;</span><br><span class="line">loader: <span class="string">'url-loader'</span>,</span><br><span class="line">options: &#123;</span><br><span class="line">limit: <span class="number">10000</span>,</span><br><span class="line">name: <span class="string">'static/media/[name].[hash:8].[ext]'</span>,</span><br><span class="line">&#125;,</span><br><span class="line">&#125;]</span><br><span class="line">&#125;),</span><br><span class="line">config.plugins.push(</span><br><span class="line"><span class="keyword">new</span> webpack.ContextReplacementPlugin(<span class="regexp">/moment[/\\]locale$/</span>, /zh-cn|en/),</span><br><span class="line">);</span><br><span class="line"><span class="comment">// comstom antd icon</span></span><br><span class="line">config.resolve.alias[<span class="string">"@ant-design/icons/lib/dist$"</span>] = path.resolve(__dirname, <span class="string">'./common/icon.ts'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> config;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = withSass(withCss(withBundleAnalyzer(&#123;</span><br><span class="line">analyzeServer: [<span class="string">"server"</span>, <span class="string">"both"</span>].includes(</span><br><span class="line">process.env.BUNDLE_ANALYZE</span><br><span class="line">),</span><br><span class="line">analyzeBrowser: [<span class="string">"browser"</span>, <span class="string">"both"</span>].includes(</span><br><span class="line">process.env.BUNDLE_ANALYZE</span><br><span class="line">),</span><br><span class="line">bundleAnalyzerConfig: &#123;</span><br><span class="line">server: &#123;</span><br><span class="line">analyzerMode: <span class="string">"static"</span>,</span><br><span class="line">reportFilename: <span class="string">"../bundles/server.html"</span></span><br><span class="line">&#125;,</span><br><span class="line">browser: &#123;</span><br><span class="line">analyzerMode: <span class="string">"static"</span>,</span><br><span class="line">reportFilename: <span class="string">"../bundles/client.html"</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">serverRuntimeConfig: config.server,</span><br><span class="line">publicRuntimeConfig: config.client,</span><br><span class="line">distDir: <span class="string">"_next"</span>,</span><br><span class="line">webpack: webpackConfig,</span><br><span class="line">assetPrefix: process.env.NODE_CDN == <span class="string">"true"</span> &amp;&amp; config ?</span><br><span class="line">config.deploy.host + config.deploy.version : <span class="string">""</span></span><br><span class="line">&#125;)));</span><br></pre></td></tr></table></figure><p>Thanks: <a href="https://github.com/luffyZh" target="_blank" rel="noopener">luffyZh</a> <a href="https://github.com/luffyZh/next-antd-scaffold/commit/420cdf9f4d00ba8d823fcb61ebaa35556337e7cb" target="_blank" rel="noopener">update FAQ</a></p>]]></content>
    
    <summary type="html">
    
      Next.js - 一些问题，常见的问题，配置
    
    </summary>
    
      <category term="默认分类" scheme="https://kitions.github.io/categories/%E9%BB%98%E8%AE%A4%E5%88%86%E7%B1%BB/"/>
    
    
      <category term="next.js" scheme="https://kitions.github.io/tags/next-js/"/>
    
  </entry>
  
  <entry>
    <title>golang 一维数组变二维数组，根据字段排序随机</title>
    <link href="https://kitions.github.io/2019/12/30/golang%E4%B8%80%E7%BB%B4%E6%95%B0%E7%BB%84%E5%8F%98%E4%BA%8C%E7%BB%B4%E6%95%B0%E7%BB%84%EF%BC%8C%E6%A0%B9%E6%8D%AE%E5%AD%97%E6%AE%B5%E6%8E%92%E5%BA%8F%E9%9A%8F%E6%9C%BA/"/>
    <id>https://kitions.github.io/2019/12/30/golang一维数组变二维数组，根据字段排序随机/</id>
    <published>2019-12-30T03:15:37.000Z</published>
    <updated>2019-12-30T03:16:33.268Z</updated>
    
    <content type="html"><![CDATA[<h1 id="golang-一维数组变二维数组，根据字段排序随机"><a href="#golang-一维数组变二维数组，根据字段排序随机" class="headerlink" title="golang 一维数组变二维数组，根据字段排序随机"></a>golang 一维数组变二维数组，根据字段排序随机</h1><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"encoding/json"</span></span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"math/rand"</span></span><br><span class="line"><span class="string">"sort"</span></span><br><span class="line"><span class="string">"time"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> DemoItemModel <span class="keyword">struct</span> &#123;</span><br><span class="line">ID        <span class="keyword">int</span>    <span class="string">`json:"id"`</span></span><br><span class="line">Name      <span class="keyword">string</span> <span class="string">`json:"name"`</span></span><br><span class="line">SortValue <span class="keyword">int</span>    <span class="string">`json:"sort_value"`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> DemoModel []DemoItemModel</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> SortKeys []<span class="keyword">int</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Groups <span class="keyword">struct</span> &#123;</span><br><span class="line">sortNum SortKeys</span><br><span class="line">data    <span class="keyword">map</span>[<span class="keyword">int</span>]DemoModel</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s SortKeys)</span> <span class="title">Len</span><span class="params">()</span> <span class="title">int</span></span>           &#123; <span class="keyword">return</span> <span class="built_in">len</span>(s) &#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s SortKeys)</span> <span class="title">Swap</span><span class="params">(i, j <span class="keyword">int</span>)</span></span>      &#123; s[i], s[j] = s[j], s[i] &#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s SortKeys)</span> <span class="title">Less</span><span class="params">(i, j <span class="keyword">int</span>)</span> <span class="title">bool</span></span> &#123; <span class="keyword">return</span> s[i] &lt; s[j] &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewGroups</span><span class="params">()</span> *<span class="title">Groups</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> &amp;Groups&#123;</span><br><span class="line">sortNum: <span class="built_in">make</span>([]<span class="keyword">int</span>, <span class="number">0</span>),</span><br><span class="line">data:    <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">int</span>]DemoModel, <span class="number">0</span>),</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(a *Groups)</span> <span class="title">sortKey</span><span class="params">()</span> []<span class="title">int</span></span> &#123;</span><br><span class="line">sort.Sort(a.sortNum)</span><br><span class="line"><span class="keyword">return</span> a.sortNum</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(a *Groups)</span> <span class="title">append</span><span class="params">(key <span class="keyword">int</span>, item DemoItemModel)</span></span> &#123;</span><br><span class="line">a.data[key] = <span class="built_in">append</span>(a.data[key], item)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewGroup</span><span class="params">()</span> <span class="title">DemoModel</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">make</span>([]DemoItemModel, <span class="number">0</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(a *Groups)</span> <span class="title">Add</span><span class="params">(num <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">a.sortNum = <span class="built_in">append</span>(a.sortNum, num)</span><br><span class="line">a.data[num] = NewGroup()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(a *Groups)</span> <span class="title">Exits</span><span class="params">(num <span class="keyword">int</span>)</span> <span class="title">bool</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> a.data[num] == <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">GetRandomItems</span><span class="params">(a DemoModel)</span> []<span class="title">DemoItemModel</span></span> &#123;</span><br><span class="line">groups := NewGroups()</span><br><span class="line"><span class="keyword">for</span> _, item := <span class="keyword">range</span> a &#123;</span><br><span class="line">sort := item.SortValue</span><br><span class="line"><span class="keyword">if</span> !groups.Exits(sort) &#123;</span><br><span class="line">groups.Add(sort)</span><br><span class="line">&#125;</span><br><span class="line">groups.<span class="built_in">append</span>(sort, item)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> groups.Sort()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(a *DemoModel)</span> <span class="title">Random</span><span class="params">()</span> <span class="title">DemoModel</span></span> &#123;</span><br><span class="line">length := <span class="built_in">len</span>(*a)</span><br><span class="line">temp := <span class="built_in">make</span>([]DemoItemModel, <span class="number">0</span>)</span><br><span class="line">r := rand.New(rand.NewSource(time.Now().UnixNano()))</span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">random := r.Intn(length)</span><br><span class="line">temp = <span class="built_in">append</span>(temp, (*a)[random])</span><br><span class="line">*a = <span class="built_in">append</span>((*a)[:random], (*a)[random+<span class="number">1</span>:]...)</span><br><span class="line">length = <span class="built_in">len</span>(*a)</span><br><span class="line"><span class="keyword">if</span> length &lt; <span class="number">1</span> &#123;</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">*a = temp</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> temp</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(a *Groups)</span> <span class="title">Sort</span><span class="params">()</span> []<span class="title">DemoItemModel</span></span> &#123;</span><br><span class="line">temp := <span class="built_in">make</span>([]DemoItemModel, <span class="number">0</span>)</span><br><span class="line"><span class="keyword">for</span> _, item := <span class="keyword">range</span> a.sortKey() &#123;</span><br><span class="line">data := a.data[item]</span><br><span class="line">temp = <span class="built_in">append</span>(temp, data.Random()...)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> temp</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line">objString := <span class="string">`[&#123;"id":1,"name":"1-1","sort_value":1&#125;,&#123;"id":2,"name":"1-2","sort_value":1&#125;,&#123;"id":3,"name":"2-1","sort_value":2&#125;,&#123;"id":4,"name":"2-2","sort_value":2&#125;,&#123;"id":5,"name":"2-3","sort_value":2&#125;,&#123;"id":6,"name":"5-1","sort_value":5&#125;]`</span></span><br><span class="line"><span class="keyword">var</span> someOne []DemoItemModel</span><br><span class="line"><span class="keyword">if</span> err := json.Unmarshal([]<span class="keyword">byte</span>(objString), &amp;someOne); err == <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"================json str 转struct=="</span>)</span><br><span class="line">fmt.Println(someOne)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">fmt.Println(err)</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(<span class="number">22</span>, GetRandomItems(someOne))</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      golang 一维数组变二维数组，json根据sort字段随机排序
    
    </summary>
    
      <category term="默认分类" scheme="https://kitions.github.io/categories/%E9%BB%98%E8%AE%A4%E5%88%86%E7%B1%BB/"/>
    
    
      <category term="go" scheme="https://kitions.github.io/tags/go/"/>
    
  </entry>
  
  <entry>
    <title>gitignore规则不生效</title>
    <link href="https://kitions.github.io/2019/10/11/gitignore/"/>
    <id>https://kitions.github.io/2019/10/11/gitignore/</id>
    <published>2019-10-11T09:04:52.000Z</published>
    <updated>2019-10-11T09:09:55.657Z</updated>
    
    <content type="html"><![CDATA[<h1 id="gitignore"><a href="#gitignore" class="headerlink" title=".gitignore"></a>.gitignore</h1><p>规则 作用<br>/mtk 过滤整个文件夹<br>*.zip 过滤所有.zip文件<br>/mtk/do.c 过滤某个具体文件<br>!/mtk/one.txt 追踪（不过滤）某个具体文件<br>注意：如果你创建.gitignore文件之前就push了某一文件，那么即使你在.gitignore文件中写入过滤该文件的规则，该规则也不会起作用，git仍然会对该文件进行版本管理。</p><p>配置语法<br>以斜杠“/”开头表示目录；<br>以星号“*”通配多个字符；<br>以问号“?”通配单个字符<br>以方括号“[]”包含单个字符的匹配列表；<br>以叹号“!”表示不忽略(跟踪)匹配到的文件或目录。<br>注意： git 对于 .gitignore配置文件是按行从上到下进行规则匹配的</p><h2 id="gitignore规则不生效"><a href="#gitignore规则不生效" class="headerlink" title=".gitignore规则不生效"></a>.gitignore规则不生效</h2><p>.gitignore只能忽略那些原来没有被track的文件，如果某些文件已经被纳入了版本管理中，则修改.gitignore是无效的。</p><p>解决方法就是先把本地缓存删除（改变成未track状态），然后再提交:</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git rm -r --cached .</span><br><span class="line">git <span class="keyword">add</span> .</span><br><span class="line">git commit -m <span class="string">'update .gitignore'</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      .gitignore规则不生效
    
    </summary>
    
      <category term="默认分类" scheme="https://kitions.github.io/categories/%E9%BB%98%E8%AE%A4%E5%88%86%E7%B1%BB/"/>
    
    
  </entry>
  
  <entry>
    <title>初识React-hooks</title>
    <link href="https://kitions.github.io/2019/06/20/React%20hooks/"/>
    <id>https://kitions.github.io/2019/06/20/React hooks/</id>
    <published>2019-06-20T03:53:52.000Z</published>
    <updated>2019-06-20T10:24:52.645Z</updated>
    
    <content type="html"><![CDATA[<h1 id="React-hooks"><a href="#React-hooks" class="headerlink" title="React hooks"></a>React hooks</h1><p><em>Hook</em> 是 React 16.8 的新增特性。它可以让你在不编写 class 的情况下使用 state 以及其他的 React 特性（生命周期等特性）。</p><h2 id="0-背景"><a href="#0-背景" class="headerlink" title="0. 背景"></a>0. 背景</h2><p> 长期以来很多人会把 <code>Stateless Component</code> 和 <code>Functional Component</code> 混为一谈；</p><p> Hooks 的出现本质是把这种<strong>面向生命周期编程</strong>变成了<strong>面向业务逻辑编程</strong>，你不用再去关心本不该关心的生命周期，写法上带来的优化只是顺带的。</p><h2 id="1-优势"><a href="#1-优势" class="headerlink" title="1. 优势"></a>1. 优势</h2><p>​     带来的好处不仅是 “更 FP，更新粒度更细，代码更清晰”</p><p>官方：</p><ul><li><strong>完全可选的。</strong> 你无需重写任何已有代码就可以在一些组件中尝试 Hook。但是如果你不想，你不必现在就去学习或使用 Hook。</li><li><strong>100% 向后兼容的。</strong> Hook 不包含任何破坏性改动。</li><li><strong>现在可用。</strong>  v16.8.0以后版本都可以使用。</li><li><strong>渐进策略</strong>。 Hook 和现有代码可以同时工作，你可以渐进式地使用他们。</li></ul><p>非官方：</p><ul><li>更容易将组件的 UI 与状态分离, 状态与 UI 的界限会越来越清晰。</li><li>多个状态不会产生嵌套，写法还是平铺的</li><li>Hooks 可以引用其他 Hooks。</li></ul><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Example</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span></span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(props)&#123;</span><br><span class="line">    <span class="keyword">super</span>(props)</span><br><span class="line">    <span class="keyword">this</span>.state = &#123;</span><br><span class="line">      count : <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;p&gt;You clicked &#123;<span class="keyword">this</span>.state.count&#125; times&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">      &lt;button onClick=&#123;() =&gt; this.setState(&#123;count:this.state.count + 1&#125;)&#125;&gt;</span></span><br><span class="line"><span class="regexp">        Click me</span></span><br><span class="line"><span class="regexp">      &lt;/</span>button&gt;</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">  );</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; useState &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Example</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 声明一个叫 “count” 的 state 变量。</span></span><br><span class="line">  <span class="keyword">const</span> [count, setCount] = useState(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;p&gt;You clicked &#123;count&#125; times&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">      &lt;button onClick=&#123;() =&gt; setCount(count + 1)&#125;&gt;</span></span><br><span class="line"><span class="regexp">        Click me</span></span><br><span class="line"><span class="regexp">      &lt;/</span>button&gt;</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">  );</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><p>可以看到，<code>Example</code>变成了一个函数，但这个函数却有自己的状态（count），同时它还可以更新自己的状态（setCount）。这个函数之所以这么了不得，就是因为它注入了一个hook–<code>useState</code>，就是这个hook让我们的函数变成了一个有状态的函数。</p><h2 id="2-动机"><a href="#2-动机" class="headerlink" title="2. 动机"></a>2. 动机</h2><h3 id="（1）有状态的组件之间复用状态逻辑很难"><a href="#（1）有状态的组件之间复用状态逻辑很难" class="headerlink" title="（1）有状态的组件之间复用状态逻辑很难"></a>（1）有状态的组件之间复用状态逻辑很难</h3><p>问题：React 需要为共享状态逻辑提供更好的原生途径。</p><p>解决：Hook 使你在无需修改组件结构的情况下复用状态逻辑</p><p>我们都知道react的<strong>核心思想</strong>就是，将一个页面拆成一堆独立的，可复用的组件，并且用自上而下的单向数据流的形式将这些组件串联起来。但假如你在大型的工作项目中用react，你会发现你的项目中实际上很多react组件冗长且难以复用。尤其是那些写成class的组件，它们本身包含了状态（state），所以复用这类组件就变得很麻烦。</p><p>之前，官方推荐怎么解决这个问题呢？答案是：<a href="https://reactjs.org/docs/render-props.html" target="_blank" rel="noopener">渲染属性（Render Props）</a>和<a href="https://segmentfault.com/img/bVbjfuz" target="_blank" rel="noopener">高阶组件（Higher-Order Components）</a>。我们可以稍微跑下题简单看一下这两种模式。</p><h4 id="渲染属性（Render-Props）"><a href="#渲染属性（Render-Props）" class="headerlink" title="- 渲染属性（Render Props）"></a>- 渲染属性（Render Props）</h4><p>渲染属性指的是使用一个值为函数的prop来传递需要动态渲染的nodes或组件。如下面的代码可以看到我们的<code>DataProvider</code>组件包含了所有跟状态相关的代码，而<code>Cat</code>组件则可以是一个单纯的展示型组件，这样一来<code>DataProvider</code>就可以单独复用了。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Cat <span class="keyword">from</span> <span class="string">'components/cat'</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DataProvider</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">    <span class="keyword">super</span>(props);</span><br><span class="line">    <span class="keyword">this</span>.state = &#123; <span class="attr">target</span>: <span class="string">'Zac'</span> &#125;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &#123;<span class="keyword">this</span>.props.render(<span class="keyword">this</span>.state)&#125;</span><br><span class="line">      &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    )</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;DataProvider render=&#123;data =&gt; (</span></span><br><span class="line"><span class="regexp">  &lt;Cat target=&#123;data.target&#125; /</span>&gt;</span><br><span class="line">)&#125;/&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 上下等同</span></span><br><span class="line">&lt;DataProvider&gt;</span><br><span class="line">  &#123;data =&gt; (</span><br><span class="line">    &lt;Cat target=&#123;data.target&#125; /&gt;</span><br><span class="line">  )&#125;</span><br><span class="line">&lt;<span class="regexp">/DataProvider&gt;</span></span><br></pre></td></tr></table></figure><h4 id="高阶组件"><a href="#高阶组件" class="headerlink" title="- 高阶组件"></a>- 高阶组件</h4><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> withUser = <span class="function"><span class="params">WrappedComponent</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> user = sessionStorage.getItem(<span class="string">"user"</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="params">props</span> =&gt;</span> &lt;WrappedComponent user=&#123;user&#125; &#123;...props&#125; /&gt;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> UserPage = <span class="function"><span class="params">props</span> =&gt;</span> (</span><br><span class="line">  &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"user-container"</span>&gt;</span><br><span class="line">    &lt;p&gt;My name is &#123;props.user&#125;!<span class="xml"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line">  &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">);</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">export default withUser(UserPage);</span></span><br></pre></td></tr></table></figure><p>以上这两种模式看上去都挺不错的，很多库也运用了这种模式，但我们仔细看这两种模式，会发现它们会增加我们代码的层级关系，这时候再回过头看hooks例子，是不是简洁多了，没有多余的层级嵌套</p><p><img src="https://img.alicdn.com/tfs/TB1oipbryrpK1RjSZFhXXXSdXXa-2048-860.jpg" alt="img"></p><h3 id="（2）复杂组件变得难以理解"><a href="#（2）复杂组件变得难以理解" class="headerlink" title="（2）复杂组件变得难以理解"></a>（2）复杂组件变得难以理解</h3><p>问题：组件起初很简单，但是逐渐会被状态逻辑和副作用充斥。相互关联且需要对照修改的代码被进行了拆分，而完全不相关的代码却在同一个方法中组合在一起</p><p>解决：Hook 将组件中相互关联的部分拆分成更小的函数（比如设置订阅或请求数据）</p><h3 id="（3）难以理解的-class"><a href="#（3）难以理解的-class" class="headerlink" title="（3）难以理解的 class"></a>（3）难以理解的 class</h3><p>问题：js的<code>this</code> 的工作方式；绑定事件处理器；对于函数组件与 class 组件的差异也存在分歧</p><p>解决：Hook 使你在非 class 的情况下可以使用更多的 React 特性，Hook 则拥抱了函数</p><p>我们经常在写一个组件的时候，把组件写成无状态组件的形式，这样更方便复用，独立厕所，然而很多时候，用SFC 写了一个简洁完美的无状态组件，后来因为需求变动，必须得有状态，又得很麻烦的改成class组件。就很烦，有了hook，就可以避免这样的问题</p><h3 id="（4）生命周期钩子函数里的逻辑太乱！"><a href="#（4）生命周期钩子函数里的逻辑太乱！" class="headerlink" title="（4）生命周期钩子函数里的逻辑太乱！"></a>（4）生命周期钩子函数里的逻辑太乱！</h3><p>我们通常希望一个函数只做一件事情，但我们的生命周期钩子函数里通常同时做了很多事情。比如我们需要在<code>componentDidMount</code>中发起ajax请求获取数据，绑定一些事件监听等等。同时，有时候我们还需要在<code>componentDidUpdate</code>做一遍同样的事情。当项目变复杂后，这一块的代码也变得不那么直观。</p><h2 id="3-useState"><a href="#3-useState" class="headerlink" title="3. useState"></a>3. useState</h2><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useState &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Example</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> [count, setCount] = useState(<span class="number">0</span>);</span><br></pre></td></tr></table></figure><p><code>useState</code>是react自带的一个hook函数，它的作用就是用来声明状态变量。<code>useState</code>这个函数接收的参数是我们的状态初始值（initial state），它返回了一个数组，这个数组的第<code>[0]</code>项是当前当前的状态值，第<code>[1]</code>项是可以改变状态值的方法函数。</p><h3 id="读取状态值"><a href="#读取状态值" class="headerlink" title="读取状态值"></a>读取状态值</h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;p&gt;You clicked &#123;count&#125; times&lt;<span class="regexp">/p&gt;</span></span><br></pre></td></tr></table></figure><h3 id="更新状态"><a href="#更新状态" class="headerlink" title="更新状态"></a>更新状态</h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;button onClick=&#123;() =&gt; setCount(count + <span class="number">1</span>)&#125;&gt;</span><br><span class="line">  Click me</span><br><span class="line">&lt;<span class="regexp">/button&gt;</span></span><br></pre></td></tr></table></figure><h3 id="多个状态值"><a href="#多个状态值" class="headerlink" title="多个状态值"></a>多个状态值</h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ExampleWithManyStates</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> [age, setAge] = useState(<span class="number">42</span>);</span><br><span class="line">  <span class="keyword">const</span> [fruit, setFruit] = useState(<span class="string">'banana'</span>);</span><br><span class="line">  <span class="keyword">const</span> [todos, setTodos] = useState([&#123; <span class="attr">text</span>: <span class="string">'Learn Hooks'</span> &#125;]);</span><br></pre></td></tr></table></figure><p>从ExampleWithManyStates函数我们可以看到，useState无论调用多少次，相互之间是独立的</p><p>（<a href="https://zh-hans.reactjs.org/docs/hooks-intro.html#gradual-adoption-strategy" target="_blank" rel="noopener">不推荐</a>把你已有的组件全部重写，但是你可以在新组件里开始使用 Hook。）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">import React, &#123; useState, useEffect &#125; from &apos;react&apos;;</span><br><span class="line"></span><br><span class="line">function Example() &#123;</span><br><span class="line">  const [count, setCount] = useState(0);</span><br><span class="line"></span><br><span class="line">  // 相当于 componentDidMount 和 componentDidUpdate:</span><br><span class="line">  useEffect(() =&gt; &#123;</span><br><span class="line">    // 使用浏览器的 API 更新页面标题</span><br><span class="line">    document.title = `You clicked $&#123;count&#125; times`;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  return (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;p&gt;You clicked &#123;count&#125; times&lt;/p&gt;</span><br><span class="line">      &lt;button onClick=&#123;() =&gt; setCount(count + 1)&#125;&gt;</span><br><span class="line">        Click me</span><br><span class="line">      &lt;/button&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-useEffect"><a href="#4-useEffect" class="headerlink" title="4. useEffect"></a>4. useEffect</h2><p>可以把 <code>useEffect</code> Hook 看做 <code>componentDidMount</code>，<code>componentDidUpdate</code> 和 <code>componentWillUnmount</code> 这三个函数的组合。</p><p>默认情况下，它在第一次渲染之后<em>和</em> 每次更新之后都会执行。</p><h3 id="Class"><a href="#Class" class="headerlink" title="Class"></a>Class</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">class Example extends React.Component &#123;</span><br><span class="line">  constructor(props) &#123;</span><br><span class="line">    super(props);</span><br><span class="line">    this.state = &#123;</span><br><span class="line">      count: 0</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  componentDidMount() &#123;</span><br><span class="line">    document.title = `You clicked $&#123;this.state.count&#125; times`;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  componentDidUpdate() &#123;</span><br><span class="line">    document.title = `You clicked $&#123;this.state.count&#125; times`;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    return (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;p&gt;You clicked &#123;this.state.count&#125; times&lt;/p&gt;</span><br><span class="line">        &lt;button onClick=&#123;() =&gt; this.setState(&#123; count: this.state.count + 1 &#125;)&#125;&gt;</span><br><span class="line">          Click me</span><br><span class="line">        &lt;/button&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="hook"><a href="#hook" class="headerlink" title="hook"></a>hook</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">import &#123; useState, useEffect &#125; from &apos;react&apos;;</span><br><span class="line"></span><br><span class="line">function Example() &#123;</span><br><span class="line">  const [count, setCount] = useState(0);</span><br><span class="line"></span><br><span class="line">  // 类似于componentDidMount 和 componentDidUpdate:</span><br><span class="line">  useEffect(() =&gt; &#123;</span><br><span class="line">    // 更新文档的标题</span><br><span class="line">    document.title = `You clicked $&#123;count&#125; times`;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  return (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;p&gt;You clicked &#123;count&#125; times&lt;/p&gt;</span><br><span class="line">      &lt;button onClick=&#123;() =&gt; setCount(count + 1)&#125;&gt;</span><br><span class="line">        Click me</span><br><span class="line">      &lt;/button&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>effect 有可选的清除机制。每个 effect 都可以返回一个清除函数。如此可以将添加和移除订阅的逻辑放在一起。它们都属于 effect 的一部分。</p><h3 id="React-何时清除-effect？"><a href="#React-何时清除-effect？" class="headerlink" title="React 何时清除 effect？"></a>React 何时清除 effect？</h3><p> React 会在组件卸载的时候执行清除操作。effect 在每次渲染的时候都会执行。这就是为什么 React <em>会</em>在执行当前 effect 之前对上一个 effect 进行清除。稍后<a href="https://zh-hans.reactjs.org/docs/hooks-effect.html#explanation-why-effects-run-on-each-update" target="_blank" rel="noopener">为什么这将助于避免 bug</a>以及<a href="https://zh-hans.reactjs.org/docs/hooks-effect.html#tip-optimizing-performance-by-skipping-effects" target="_blank" rel="noopener">如何在遇到性能问题时跳过此行为</a>。</p><blockquote><p>Tips</p><p>与 <code>componentDidMount</code> 或 <code>componentDidUpdate</code> 不同，使用 <code>useEffect</code> 调度的 effect 不会阻塞浏览器更新屏幕，这让你的应用看起来响应更快。大多数情况下，effect 不需要同步地执行。在个别情况下（例如测量布局），有单独的 <a href="https://zh-hans.reactjs.org/docs/hooks-reference.html#uselayouteffect" target="_blank" rel="noopener"><code>useLayoutEffect</code></a> Hook 供你使用，其 API 与 <code>useEffect</code> 相同。</p></blockquote><h3 id="通过跳过-Effect-进行性能优化"><a href="#通过跳过-Effect-进行性能优化" class="headerlink" title="通过跳过 Effect 进行性能优化"></a>通过跳过 Effect 进行性能优化</h3><p>在某些情况下，每次渲染后都执行清理或者执行 effect 可能会导致性能问题。在 class 组件中，我们可以通过在 <code>componentDidUpdate</code> 中添加对 <code>prevProps</code> 或 <code>prevState</code> 的比较逻辑解决：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">componentDidUpdate(prevProps, prevState) &#123;</span><br><span class="line">  <span class="keyword">if</span> (prevState.count !== <span class="keyword">this</span>.state.count) &#123;</span><br><span class="line">    <span class="built_in">document</span>.title = <span class="string">`You clicked <span class="subst">$&#123;<span class="keyword">this</span>.state.count&#125;</span> times`</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​        这是很常见的需求，所以它被内置到了 <code>useEffect</code> 的 Hook API 中。如果某些特定值在两次重渲染之间没有发生变化，你可以通知 React <strong>跳过 </strong>对 effect 的调用，只要传递数组作为 <code>useEffect</code> 的第二个可选参数即可：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">useEffect(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">document</span>.title = <span class="string">`You clicked <span class="subst">$&#123;count&#125;</span> times`</span>;</span><br><span class="line">&#125;, [count]); <span class="comment">// 仅在 count 更改时更新</span></span><br></pre></td></tr></table></figure><p>​        这个参数是什么作用呢？如果 <code>count</code>的值是 <code>5</code>，而且我们的组件重渲染的时候 <code>count</code> 还是等于 <code>5</code>，React 将对前一次渲染的 <code>[5]</code>和后一次渲染的 <code>[5]</code> 进行比较。因为数组中的所有元素都是相等的(<code>5 === 5</code>)，React 会跳过这个 effect，这就实现了性能的优化。</p><blockquote><p>如果想执行只运行一次的 effect（仅在组件挂载和卸载时执行），可以传递一个空数组（<code>[]</code>）作为第二个参数。这就告诉 React 你的 effect 不依赖于 props 或 state 中的任何值，所以它永远都不需要重复执行</p></blockquote><h2 id="5-还有哪些自带的Effect-Hooks"><a href="#5-还有哪些自带的Effect-Hooks" class="headerlink" title="5. 还有哪些自带的Effect Hooks?"></a>5. 还有哪些自带的Effect Hooks?</h2><p>除了上面介绍的useState和useEffect，react还给我们提供来很多有用的hooks：</p><p>useContext<br>useReducer<br>useCallback<br>useMemo<br>useRef<br>useImperativeMethods<br>useMutationEffect<br>useLayoutEffect</p><p>我不再一一介绍，大家自行去查阅官方文档。</p><h2 id="6-自定义hook"><a href="#6-自定义hook" class="headerlink" title="6. 自定义hook"></a>6. 自定义hook</h2><p>当我们想在两个函数之间共享逻辑时，我们会把它提取到第三个函数中。而组件和 Hook 都是函数，所以也同样适用这种方式。</p><p><strong>自定义 Hook 是一个函数，其名称以 “use” 开头，函数内部可以调用其他的 Hook。</strong> </p><blockquote><p>Hook 函数必须以 “use” 命名开头，这种声明目前是通过很弱的 <code>use</code> 前缀标识的（但是设计上会简洁很多），为了不弄错每个盒子和状态的对应关系，书写的时候 Hooks 需要 <code>use</code> 开头且放在顶层作用域，即不可以包裹 <code>if/switch/when/try</code> 等。引入了官方的 <a href="https://link.juejin.im/?target=https%3A%2F%2Fwww.npmjs.com%2Fpackage%2Feslint-plugin-react-hooks" target="_blank" rel="noopener">eslint-plugin-react-hooks</a>  就不用担心会弄错了。</p></blockquote><p>为什么不能用 condition 包裹 useHook 语句，详情可以见 <a href="https://link.juejin.im/?target=https%3A%2F%2Freactjs.org%2Fdocs%2Fhooks-rules.html%23explanation" target="_blank" rel="noopener">官方文档</a>，这里简单介绍一下。</p><p>React Hooks 并不是通过 Proxy 或者 getters 实现的（具体可以看这篇文章 <a href="https://medium.com/@ryardley/react-hooks-not-magic-just-arrays-cd4f1857236e" target="_blank" rel="noopener">React hooks: not magic, just arrays</a>），而是通过数组实现的，每次 <code>useState</code> 都会改变下标，如果 <code>useState</code> 被包裹在 condition 中，那每次执行的下标就可能对不上，导致 <code>useState</code> 导出的 <code>setter</code> 更新错数据。</p><h2 id="7-总结"><a href="#7-总结" class="headerlink" title="7. 总结"></a>7. 总结</h2><ul><li>Hooks本质是把<strong>面向生命周期程式设计</strong>变成了<strong>面向业务逻辑程式设计</strong>；</li><li>Hooks 是React 的未来，但还是无法完全替代原始的Class。</li></ul><h2 id="Example-1"><a href="#Example-1" class="headerlink" title="Example 1:"></a>Example 1:</h2><p>我们先假想一个常见的需求，一个 Modal 里需要展示一些信息，这些信息需要通过 API 获取且跟 Modal 强业务相关, Modal 打开的时候才进行数据获取：</p><p><a href="https://codepen.io/int64ago/pen/qQoJOX?editors=0010" target="_blank" rel="noopener">代码</a></p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RandomUserModal</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">    <span class="keyword">super</span>(props);</span><br><span class="line">    <span class="keyword">this</span>.state = &#123;</span><br><span class="line">      user: &#123;&#125;,</span><br><span class="line">      loading: <span class="literal">false</span>,</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">this</span>.fetchData = <span class="keyword">this</span>.fetchData.bind(<span class="keyword">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  componentDidMount() &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.props.visible) &#123;</span><br><span class="line">      <span class="keyword">this</span>.fetchData();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  componentDidUpdate(prevProps) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!prevProps.visible &amp;&amp; <span class="keyword">this</span>.props.visible) &#123;</span><br><span class="line">      <span class="keyword">this</span>.fetchData();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  fetchData() &#123;</span><br><span class="line">    <span class="keyword">this</span>.setState(&#123; <span class="attr">loading</span>: <span class="literal">true</span> &#125;);</span><br><span class="line">    fetch(<span class="string">'https://randomuser.me/api/'</span>)</span><br><span class="line">      .then(<span class="function"><span class="params">res</span> =&gt;</span> res.json())</span><br><span class="line">      .then(<span class="function"><span class="params">json</span> =&gt;</span> <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">        user: json.results[<span class="number">0</span>],</span><br><span class="line">        loading: <span class="literal">false</span>,</span><br><span class="line">      &#125;));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">const</span> user = <span class="keyword">this</span>.state.user;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;ReactModal</span><br><span class="line">        isOpen=&#123;<span class="keyword">this</span>.props.visible&#125;</span><br><span class="line">      &gt;</span><br><span class="line">        &lt;button onClick=&#123;<span class="keyword">this</span>.props.handleCloseModal&#125;&gt;Close Modal&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">        &#123;this.state.loading ?</span></span><br><span class="line"><span class="regexp">          &lt;div&gt;loading...&lt;/</span>div&gt;</span><br><span class="line">          :</span><br><span class="line">          &lt;ul&gt;</span><br><span class="line">            &lt;li&gt;Name: &#123;<span class="string">`<span class="subst">$&#123;(user.name || &#123;&#125;</span>).first&#125; <span class="subst">$&#123;(user.name || &#123;&#125;</span>).last&#125;`</span>&#125;&lt;<span class="regexp">/li&gt;</span></span><br><span class="line"><span class="regexp">            &lt;li&gt;Gender: &#123;user.gender&#125;&lt;/</span>li&gt;</span><br><span class="line">            &lt;li&gt;Phone: &#123;user.phone&#125;&lt;<span class="regexp">/li&gt;</span></span><br><span class="line"><span class="regexp">          &lt;/u</span>l&gt;</span><br><span class="line">        &#125;</span><br><span class="line">      &lt;<span class="regexp">/ReactModal&gt;</span></span><br><span class="line"><span class="regexp">    )</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><p>为了实现在 Modal 打开的时候才进行数据获取，我们需要同时在 <code>componentDidMount</code> 和 <code>componentDidUpdate</code> 两个生命周期里实现数据获取的逻辑，而且 <code>constructor</code> 里的一些初始化操作也少不了。</p><p>其实我们的要求很简单：在合适的时候通过 API 获取新的信息，这就是我们抽象出来的一个<strong>业务逻辑</strong>，为了这个业务逻辑能在 React 里正确工作，我们需要将其<strong>按照 React 组件生命周期进行拆解</strong>。这种拆解除了<strong>代码冗余</strong>，还<strong>很难复用</strong>。</p><p><a href="https://codepen.io/int64ago/pen/eQMLNX?editors=0010" target="_blank" rel="noopener">hooks的改造后</a>：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">RandomUserModal</span>(<span class="params">props</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> [user, setUser] = React.useState(&#123;&#125;);</span><br><span class="line">  <span class="keyword">const</span> [loading, setLoading] = React.useState(<span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">  React.useEffect(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!props.visible) <span class="keyword">return</span>;</span><br><span class="line">    setLoading(<span class="literal">true</span>);</span><br><span class="line">    fetch(<span class="string">'https://randomuser.me/api/'</span>).then(<span class="function"><span class="params">res</span> =&gt;</span> res.json()).then(<span class="function"><span class="params">json</span> =&gt;</span> &#123;</span><br><span class="line">      setUser(json.results[<span class="number">0</span>]);</span><br><span class="line">      setLoading(<span class="literal">false</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;, [props.visible]);</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="comment">// View 部分几乎与上面相同</span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>很明显地可以看到我们把 Class 形式变成了 Function 形式，使用了两个 State Hook 进行数据管理（类比 <code>constructor</code>），之前 <code>componentDidMount</code> 和 <code>componentDidUpdate</code> 两个生命周期里干的事我们直接在一个 Effect Hook 里做了。做了这些，最大的优势是<strong>代码精简</strong>，业务逻辑变的紧凑，代码行数也从 50+ 行减少到 30+ 行。</p><p>Hooks 的强大之处还不仅仅是这个，最重要的是这些业务逻辑可以随意地的的抽离出去，跟普通的函数没什么区别（仅仅是看起来没区别），于是就变成了可以<strong>复用</strong>的自定义 Hook。具体可以看下面的进一步改造：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 自定义 Hook</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">useFetchUser</span>(<span class="params">visible</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> [user, setUser] = React.useState(&#123;&#125;);</span><br><span class="line">  <span class="keyword">const</span> [loading, setLoading] = React.useState(<span class="literal">false</span>);</span><br><span class="line">  </span><br><span class="line">  React.useEffect(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!visible) <span class="keyword">return</span>;</span><br><span class="line">    setLoading(<span class="literal">true</span>);</span><br><span class="line">    fetch(<span class="string">'https://randomuser.me/api/'</span>).then(<span class="function"><span class="params">res</span> =&gt;</span> res.json()).then(<span class="function"><span class="params">json</span> =&gt;</span> &#123;</span><br><span class="line">      setUser(json.results[<span class="number">0</span>]);</span><br><span class="line">      setLoading(<span class="literal">false</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;, [visible]);</span><br><span class="line">  <span class="keyword">return</span> &#123; user, loading &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">RandomUserModal</span>(<span class="params">props</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; user, loading &#125; = useFetchUser(props.visible);</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="comment">// 与上面相同</span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里的 <code>useFetchUser</code> 为自定义 Hook，它的地位跟自带的 <code>useState</code> 等比也没什么区别，你可以在其它组件里使用，甚至在这个组件里使用两次，它们会天然地隔离开。</p><h2 id="Example-2"><a href="#Example-2" class="headerlink" title="Example 2:"></a>Example 2:</h2><p><a href="https://codesandbox.io/s/jvvkoo8pq3" target="_blank" rel="noopener">实例二</a></p><p>参考：</p><p> <a href="https://segmentfault.com/a/1190000017182184" target="_blank" rel="noopener">React Hooks 深入不浅出</a></p><p> <a href="https://segmentfault.com/a/1190000016950339" target="_blank" rel="noopener">30分钟精通React今年最劲爆的新特性——React Hooks</a></p><p> <a href="https://medium.com/@ryardley/react-hooks-not-magic-just-arrays-cd4f1857236e" target="_blank" rel="noopener">React hooks: not magic, just arrays </a></p><p> <a href="https://medium.com/@dan_abramov/making-sense-of-react-hooks-fdbde8803889" target="_blank" rel="noopener">Making Sense of React Hooks </a></p><p> <a href="https://overreacted.io/a-complete-guide-to-useeffect/" target="_blank" rel="noopener">A Complete Guide to useEffect  </a>  推荐 Dan 的这篇文章</p><p> <a href="https://medium.com/the-guild/under-the-hood-of-reacts-hooks-system-eb59638c9dba" target="_blank" rel="noopener">Under the hood of React’s hooks system</a>  原理  <a href="https://juejin.im/post/5c99a75af265da60ef635898" target="_blank" rel="noopener">中文版</a></p>]]></content>
    
    <summary type="html">
    
      Hook 是 React 16.8 的新增特性。它可以让你在不编写 class 的情况下使用 state 以及其他的 React 特性（生命周期等特性）。带来的好处不仅是 “更 FP，更新粒度更细，代码更清晰”
    
    </summary>
    
      <category term="默认分类" scheme="https://kitions.github.io/categories/%E9%BB%98%E8%AE%A4%E5%88%86%E7%B1%BB/"/>
    
    
      <category term="React" scheme="https://kitions.github.io/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>WEB-websocket,Notification通知</title>
    <link href="https://kitions.github.io/2019/05/07/WEB%20Notification%E9%80%9A%E7%9F%A5/"/>
    <id>https://kitions.github.io/2019/05/07/WEB Notification通知/</id>
    <published>2019-05-07T08:27:33.000Z</published>
    <updated>2019-05-07T08:28:41.976Z</updated>
    
    <content type="html"><![CDATA[<h1 id="WEB-websocket-Notification通知"><a href="#WEB-websocket-Notification通知" class="headerlink" title="WEB-websocket,Notification通知"></a>WEB-websocket,Notification通知</h1><h6 id="HTML5-桌面通知：Notification-API"><a href="#HTML5-桌面通知：Notification-API" class="headerlink" title="HTML5 桌面通知：Notification API"></a>HTML5 桌面通知：Notification API</h6><p>Notification API 是 HTML5 新增的桌面通知 API，用于向用户显示通知信息。该通知是脱离浏览器的，即使用户没有停留在当前标签页，甚至最小化了浏览器，该通知信息也一样会置顶显示出来。</p><h4 id="websocket获取到数据，notify通知"><a href="#websocket获取到数据，notify通知" class="headerlink" title="websocket获取到数据，notify通知"></a>websocket获取到数据，notify通知</h4><p>用户允许网页的通知，利用websocket，将实时获取来的数据推送给用户。主要针对浏览器为chrome、火狐、safari等高级浏览器，不支持IE (ps: 本地是不行的，只有到https 的远程才可以进行推送)</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// websocket 简易封装</span></span><br><span class="line"><span class="comment">// SimpleWebSocket 自动重连，信息缓存，自动发送</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> SimpleWebSocket&lt;T = <span class="built_in">any</span>&gt; &#123;</span><br><span class="line">    <span class="keyword">private</span> websocket: WebSocket</span><br><span class="line">    <span class="keyword">private</span> isOpen: <span class="built_in">boolean</span></span><br><span class="line">    <span class="keyword">private</span> isManualClose: <span class="built_in">boolean</span></span><br><span class="line">    <span class="keyword">private</span> reconnectionTimer: <span class="built_in">number</span></span><br><span class="line">    <span class="keyword">private</span> message: <span class="built_in">string</span>[] = []</span><br><span class="line"></span><br><span class="line">    <span class="keyword">constructor</span>(<span class="params"></span></span><br><span class="line"><span class="params">        <span class="keyword">private</span> url: <span class="built_in">string</span>,</span></span><br><span class="line">        private success: (data: T) =&gt; void,</span><br><span class="line">        <span class="keyword">private</span> openInit?: <span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">void</span></span><br><span class="line">    ) &#123;</span><br><span class="line">        <span class="keyword">this</span>.reset()</span><br><span class="line">        <span class="keyword">this</span>.pump()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> send(msg: <span class="built_in">string</span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>.isOpen ? <span class="keyword">this</span>.websocket.send(msg) : <span class="keyword">this</span>.message.push(msg)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> close() &#123;</span><br><span class="line">        <span class="keyword">this</span>.isManualClose = <span class="literal">true</span></span><br><span class="line">        <span class="keyword">this</span>.websocket.close()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> reset() &#123;</span><br><span class="line">        <span class="keyword">this</span>.websocket = <span class="keyword">this</span>.createWebSocket(<span class="keyword">this</span>.url)</span><br><span class="line">        <span class="keyword">this</span>.isOpen = <span class="literal">false</span></span><br><span class="line">        <span class="keyword">this</span>.isManualClose = <span class="literal">false</span></span><br><span class="line">        <span class="keyword">this</span>.bindEvent()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> createWebSocket(url: <span class="built_in">string</span>): WebSocket &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> WebSocket(url)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> bindEvent() &#123;</span><br><span class="line">        <span class="keyword">this</span>.websocket.onmessage = <span class="function">(<span class="params">data: MessageEvent</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">this</span>.success(data.data <span class="keyword">as</span> T)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.websocket.onopen = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">this</span>.isOpen = <span class="literal">true</span></span><br><span class="line">            <span class="keyword">this</span>.openInit &amp;&amp; <span class="keyword">this</span>.openInit()</span><br><span class="line">            <span class="keyword">this</span>.reconnectionTimer &amp;&amp; <span class="built_in">window</span>.clearInterval(<span class="keyword">this</span>.reconnectionTimer)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.websocket.onclose = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (!<span class="keyword">this</span>.isManualClose) &#123;</span><br><span class="line">                <span class="keyword">this</span>.reconnection()</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.websocket.onerror = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">this</span>.reconnection()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> pump() &#123;</span><br><span class="line">        setInterval(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>.message.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">const</span> msg = <span class="keyword">this</span>.message.shift()</span><br><span class="line">                <span class="keyword">if</span> (msg) &#123; <span class="keyword">this</span>.send(msg <span class="keyword">as</span> <span class="built_in">string</span>) &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="number">1000</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 重新连接，3秒重连一次</span></span><br><span class="line">    <span class="keyword">private</span> reconnection() &#123;</span><br><span class="line">        <span class="keyword">this</span>.reconnectionTimer &amp;&amp; <span class="built_in">window</span>.clearInterval(<span class="keyword">this</span>.reconnectionTimer)</span><br><span class="line">        <span class="keyword">this</span>.reconnectionTimer = <span class="built_in">window</span>.setInterval(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">this</span>.reset()</span><br><span class="line">        &#125;, <span class="number">3000</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> &#123; SimpleWebSocket &#125;</span><br></pre></td></tr></table></figure><ol><li>初始化websocket</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">componentDidMount() &#123;</span><br><span class="line"><span class="keyword">const</span> config = Cookie.Get(<span class="string">""</span>); <span class="comment">// 将是否通知的布尔存到cookie中，也可以存到localstorge</span></span><br><span class="line"><span class="keyword">if</span> (config) &#123;</span><br><span class="line"><span class="keyword">const</span> configValue = <span class="built_in">JSON</span>.parse(<span class="built_in">decodeURIComponent</span>(config));</span><br><span class="line"><span class="keyword">this</span>._data.setVoice(configValue.voice);</span><br><span class="line"><span class="keyword">this</span>._data.setNotify(configValue.notify); <span class="comment">// boolean</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">this</span>._websocket = <span class="keyword">new</span> SimpleWebSocket(</span><br><span class="line">Config.websocket,</span><br><span class="line">data =&gt; &#123;</span><br><span class="line"><span class="keyword">const</span> item = <span class="built_in">JSON</span>.parse(data);</span><br><span class="line"><span class="keyword">if</span> (item.data &amp;&amp; item.method == <span class="string">""</span>) &#123;</span><br><span class="line">~~~</span><br><span class="line">           <span class="comment">// 获取来的数据做处理  </span></span><br><span class="line">         ~~~</span><br><span class="line"><span class="keyword">this</span>._data.makeVoice();</span><br><span class="line"><span class="keyword">this</span>._data.notify(news);</span><br><span class="line"><span class="keyword">this</span>.setState(&#123;&#125;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">() =&gt; &#123;</span><br><span class="line"><span class="keyword">const</span> token = Cookie.Get(Cookie.DefaultKey);</span><br><span class="line"><span class="keyword">this</span>._websocket.send(</span><br><span class="line"><span class="built_in">JSON</span>.stringify(&#123;</span><br><span class="line">method: <span class="string">"subscribe"</span>,</span><br><span class="line">data: &#123;</span><br><span class="line">topic: <span class="string">""</span>, </span><br><span class="line">client_type: <span class="string">""</span>, </span><br><span class="line">client_version: <span class="string">"1.0.0"</span>, </span><br><span class="line">token: token</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">);</span><br><span class="line">&#125;</span><br><span class="line">);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>通知的设置</li></ol><p><code>var notification = new Notification(title, options)</code></p><p>参数如下：</p><ul><li>title：通知的标题</li><li>options：通知的设置选项（可选）。<ul><li>body：通知的内容。</li><li>tag：代表通知的一个识别标签，相同tag时只会打开同一个通知窗口。</li><li>icon：要在通知中显示的图标的URL。</li><li>image：要在通知中显示的图像的URL。</li><li>data：想要和通知关联的任务类型的数据。</li><li>requireInteraction：通知保持有效不自动关闭，默认为false。</li></ul></li></ul><h5 id="用户权限"><a href="#用户权限" class="headerlink" title="用户权限"></a>用户权限</h5><p>想要向用户显示通知消息，需要获取用户权限，而相同的域名只需要获取一次权限。只有用户允许的权限下，Notification 才能起到作用，避免某些网站的广告滥用 Notification 或其它给用户造成影响。那么如何知道用户到底是允不允许的？</p><p>Notification.permission 该属性用于表明当前通知显示的授权状态，可能的值包括：</p><ul><li>default ：不知道用户的选择，默认。</li><li>granted ：用户允许。</li><li>denied ：用户拒绝。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(Notification.permission === <span class="string">'granted'</span>)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'用户允许通知'</span>);</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(Notification.permission === <span class="string">'denied'</span>)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'用户拒绝通知'</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'用户还没选择，去向用户申请权限吧'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="请求权限"><a href="#请求权限" class="headerlink" title="请求权限"></a>请求权限</h5><p>当用户还没选择的时候，我们需要向用户去请求权限。Notification 对象提供了 requestPermission() 方法请求用户当前来源的权限以显示通知。</p><p>以前基于回调的语法已经弃用（当然在现在的浏览器中还是能用的），最新的规范已将此方法更新为基于 promise 的语法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Notification.requestPermission().then(<span class="function"><span class="keyword">function</span>(<span class="params">permission</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(permission === <span class="string">'granted'</span>)&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'用户允许通知'</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(permission === <span class="string">'denied'</span>)&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'用户拒绝通知'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h5 id="关闭通知"><a href="#关闭通知" class="headerlink" title="关闭通知"></a>关闭通知</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> n = <span class="keyword">new</span> Notification(<span class="string">'提醒'</span>,&#123;</span><br><span class="line">    body: <span class="string">'你的朋友圈有3条新状态，快去查看吧'</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    n.close();</span><br><span class="line">&#125;, <span class="number">3000</span>);</span><br></pre></td></tr></table></figure><p>Example:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">public setNotify(value: boolean) &#123;</span><br><span class="line"><span class="keyword">if</span> ((<span class="built_in">window</span> <span class="keyword">as</span> any).Notification) &#123;</span><br><span class="line">Notification.requestPermission(<span class="function"><span class="params">()</span> =&gt;</span> &#123; <span class="comment">// 用户允许浏览器通知</span></span><br><span class="line"><span class="keyword">this</span>._notify = value;</span><br><span class="line">Cookie.Set(       <span class="comment">// 将是否通知的布尔存到cookie中，也可以存到localstorge</span></span><br><span class="line"><span class="string">""</span>,</span><br><span class="line"><span class="built_in">JSON</span>.stringify(&#123;</span><br><span class="line">voice: <span class="keyword">this</span>._voice,</span><br><span class="line">notify: <span class="keyword">this</span>._notify</span><br><span class="line">&#125;)</span><br><span class="line">);</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 桌面推送功能</span></span><br><span class="line">public notify(item: NewsProfile.AsObject) &#123;</span><br><span class="line"><span class="keyword">if</span> ((<span class="built_in">window</span> <span class="keyword">as</span> any).Notification &amp;&amp; <span class="keyword">this</span>._notify) &#123;</span><br><span class="line"><span class="keyword">var</span> notify = <span class="keyword">new</span> Notification(<span class="string">"通知的标题"</span>, &#123;</span><br><span class="line">icon:</span><br><span class="line"><span class="string">"这儿为logo图"</span>,</span><br><span class="line">body: <span class="string">"这儿是具体的内容"</span>,</span><br><span class="line">tag: <span class="string">'id'</span>, <span class="comment">// 相当于是当前通知的id，配合renotify使用，可以使多个通知不重叠</span></span><br><span class="line">renotify : <span class="literal">true</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">notify.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="built_in">window</span>.focus();</span><br><span class="line"><span class="keyword">this</span>.close();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">public setVoice(v: boolean) &#123;</span><br><span class="line">Cookie.Set(</span><br><span class="line"><span class="string">""</span>,</span><br><span class="line"><span class="built_in">JSON</span>.stringify(&#123;</span><br><span class="line">voice: <span class="keyword">this</span>._voice,</span><br><span class="line">notify: <span class="keyword">this</span>._notify</span><br><span class="line">&#125;)</span><br><span class="line">);</span><br><span class="line"><span class="keyword">this</span>._voice = v;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 声音提示</span></span><br><span class="line">public makeVoice() &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>._voice) &#123;</span><br><span class="line"><span class="keyword">const</span> audio = <span class="built_in">document</span>.getElementById(<span class="string">"audioPlay"</span>); <span class="comment">// 一段音频文件</span></span><br><span class="line">(audio <span class="keyword">as</span> any).play();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>是否通知的开关,包括声音的和notify的</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;Switch</span><br><span class="line">checked=&#123;<span class="keyword">this</span>._voice&#125;</span><br><span class="line">onChange=&#123;() =&gt; &#123;</span><br><span class="line"><span class="keyword">this</span>._voice = !<span class="keyword">this</span>._voice;</span><br><span class="line"><span class="keyword">this</span>.props.option &amp;&amp; <span class="keyword">this</span>.props.option(</span><br><span class="line"><span class="keyword">this</span>._voice,</span><br><span class="line"><span class="keyword">this</span>._desk</span><br><span class="line">);</span><br><span class="line"><span class="keyword">this</span>.setState(&#123;&#125;);</span><br><span class="line">   &#125;&#125;</span><br><span class="line">/&gt;</span><br></pre></td></tr></table></figure><h4 id="使用Service-Worker发送Push推送-—-web-push"><a href="#使用Service-Worker发送Push推送-—-web-push" class="headerlink" title="使用Service Worker发送Push推送  — web push"></a>使用Service Worker发送Push推送  — web push</h4><p>Web push在国外的网站很流行，但在国内几乎没见到，主要还是因为谷歌在境内无法访问，因为web push走的是谷歌FCM通道，需要能接收到谷歌服务器的消息。但正常网络环境下是无法访问谷歌的，使得在国内搞它的意义不是很大，但是毕竟它是一个标准和趋势，做为一个技术人员来研究一下还是挺有用的。</p><p><img src="https://ws4.sinaimg.cn/large/006tNc79gy1g2ssyxtg3pj30z50q4n1r.jpg" alt=""></p><p> 参考链接：<a href="https://juejin.im/post/59d9b38ef265da064a0f72cc" target="_blank" rel="noopener">https://juejin.im/post/59d9b38ef265da064a0f72cc</a></p><p>谷歌官方 <a href="https://developers.google.com/web/fundamentals/codelabs/push-notifications/?hl=zh-cn" target="_blank" rel="noopener">https://developers.google.com/web/fundamentals/codelabs/push-notifications/?hl=zh-cn</a></p><p>一个github项目 <a href="https://github.com/realtime-framework/WebPushNotifications" target="_blank" rel="noopener">https://github.com/realtime-framework/WebPushNotifications</a></p>]]></content>
    
    <summary type="html">
    
      HTML5桌面通知,Notification API,第一种方式为websocket获取到数据，notify通知，较为常用，第二种web-push，不常用，有墙
    
    </summary>
    
      <category term="默认分类" scheme="https://kitions.github.io/categories/%E9%BB%98%E8%AE%A4%E5%88%86%E7%B1%BB/"/>
    
    
      <category term="Notification" scheme="https://kitions.github.io/tags/Notification/"/>
    
  </entry>
  
  <entry>
    <title>Next.js-Window或Document 对象未定义</title>
    <link href="https://kitions.github.io/2019/04/28/Next.js%E4%B8%ADWindow%E6%9C%AA%E5%AE%9A%E4%B9%89/"/>
    <id>https://kitions.github.io/2019/04/28/Next.js中Window未定义/</id>
    <published>2019-04-28T01:53:22.000Z</published>
    <updated>2019-05-07T08:26:39.239Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Next-js-Window-或-Document-对象未定义？"><a href="#Next-js-Window-或-Document-对象未定义？" class="headerlink" title="Next.js-Window 或 Document 对象未定义？"></a>Next.js-Window 或 Document 对象未定义？</h3><blockquote><p>背景: 在引入第三方插件，或者直接在代码中写 <code>window</code> 时，控制台会给出警告，<code>window</code> 未定义。</p></blockquote><p>发生在这个问题的原因是，node服务端并没有<code>window</code> 或 <code>document</code> 对象。解决方法，通过 <code>process.browser</code> 来区分环境。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (process.browser) &#123;</span><br><span class="line">  <span class="comment">// 引入第三方插件</span></span><br><span class="line">  <span class="built_in">require</span>(<span class="string">'***'</span>)</span><br><span class="line">  <span class="comment">// 或者修改window对象下某一属性</span></span><br><span class="line">  <span class="built_in">window</span>.mbk = &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">componentDidMount（）&#123;</span><br><span class="line">  <span class="keyword">this</span>.MyModule = <span class="built_in">require</span>（<span class="string">'./ MyModule'</span>）</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> DynamicComponentWithNoSSR = dynamic（<span class="keyword">import</span>（<span class="string">'../ components / hello3'</span>），&#123;</span><br><span class="line">  ssr：<span class="literal">false</span></span><br><span class="line">&#125;）</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span>（）=&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;标题/&gt;</span><br><span class="line">    &lt;DynamicComponentWithNoSSR /&gt;</span><br><span class="line">    &lt;p&gt;主页在这里！&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">  &lt;/</span>div&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      next.js在引入第三方插件，或者直接在代码中写 window 时，控制台会给出警告，window 未定义。发生在这个问题的原因是，node服务端并没有window 或 document 对象。解决方法，通过 process.browser 来区分环境。
    
    </summary>
    
      <category term="默认分类" scheme="https://kitions.github.io/categories/%E9%BB%98%E8%AE%A4%E5%88%86%E7%B1%BB/"/>
    
    
      <category term="next.js" scheme="https://kitions.github.io/tags/next-js/"/>
    
  </entry>
  
  <entry>
    <title>node.js — koa — Typescript 微信连接api</title>
    <link href="https://kitions.github.io/2019/04/15/node.js%20%E2%80%94%20koa%20%E2%80%94%20Typescript%20%E5%BE%AE%E4%BF%A1%E8%BF%9E%E6%8E%A5api/"/>
    <id>https://kitions.github.io/2019/04/15/node.js — koa — Typescript 微信连接api/</id>
    <published>2019-04-15T03:51:12.000Z</published>
    <updated>2019-04-30T06:39:05.224Z</updated>
    
    <content type="html"><![CDATA[<h3 id="node-js-—-koa-—-Typescript-微信连接api"><a href="#node-js-—-koa-—-Typescript-微信连接api" class="headerlink" title="node.js — koa — Typescript 微信连接api"></a>node.js — koa — Typescript 微信连接api</h3><p>服务器中间层框架为koa，使用node原生的加密方式，应该整个公司项目的微信api都从一个接口上出去，不应该分散到各个项目去单独调api，便于管理维护，减少调用次数</p><p><code>memory-cache</code>为请求到的access_token做缓存，微信调用access_token每日有次数限制。目前是根据时间判断的，理应后期加上定时任务</p><ol><li>获取access_token存入缓存，有效期两小时，有的话从缓存中取</li><li>获取ticket存入缓存，有效期两小时，有的话从缓存中取</li><li>将获取到的ticket和其他三个参数进行sha1-HEX加密，拿到签名signature</li><li>提供一个接口供前端调(ps: 敏感字段请勿传给前台)</li></ol><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> koa <span class="keyword">from</span> <span class="string">"koa"</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; HTTPProtocol &#125; <span class="keyword">from</span> <span class="string">"@Constance/interface"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; getData, httpType &#125; <span class="keyword">from</span> <span class="string">'@Utils/http'</span></span><br><span class="line"><span class="keyword">import</span> Config <span class="keyword">from</span> <span class="string">'@Config/config'</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> cache <span class="keyword">from</span> <span class="string">'memory-cache'</span></span><br><span class="line"><span class="keyword">const</span> crypto = <span class="built_in">require</span>(<span class="string">'crypto'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> IAccessTokenResponse &#123;</span><br><span class="line">errcode: <span class="built_in">number</span>;</span><br><span class="line">errmsg: <span class="built_in">string</span>;</span><br><span class="line">access_token: <span class="built_in">string</span>;</span><br><span class="line">expires_in: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">interface</span> jsAPITicketResponse &#123;</span><br><span class="line">errcode: <span class="built_in">number</span>;</span><br><span class="line">errmsg: <span class="built_in">string</span>;</span><br><span class="line">ticket: <span class="built_in">string</span>;</span><br><span class="line">expires_in: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> getWxConfig = <span class="keyword">async</span> (ctx: koa.Context) =&gt; &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> &#123; url &#125; = ctx.query</span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回给前台的数据</span></span><br><span class="line"><span class="keyword">let</span> res: HTTPProtocol&lt;<span class="built_in">any</span>&gt; = &#123;</span><br><span class="line">code: <span class="number">0</span>,</span><br><span class="line">msg: <span class="string">"成功"</span>,</span><br><span class="line">data: <span class="string">""</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!url) &#123;</span><br><span class="line">res.msg = <span class="string">"无URL"</span></span><br><span class="line">ctx.body = res</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> timestamp: <span class="built_in">number</span> = <span class="built_in">Math</span>.floor(<span class="built_in">Date</span>.now() / <span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取access_token </span></span><br><span class="line"><span class="keyword">if</span> (!cache.get(<span class="string">"tokenObj"</span>) || cache.get(<span class="string">"tokenObj"</span>).expires_in &lt; timestamp || cache.get(<span class="string">"tokenObj"</span>).app_id !== Config.wx_gzh.app_id) &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> getAccessURL = Config.wx_gzh.access_token + <span class="string">`&amp;appid=`</span> + Config.wx_gzh.app_id + <span class="string">`&amp;secret=`</span> + Config.wx_gzh.app_secret</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> WxAccessToken = <span class="keyword">await</span> getData&lt;IAccessTokenResponse&gt;(getAccessURL, httpType.get)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (WxAccessToken &amp;&amp; WxAccessToken.access_token) &#123;</span><br><span class="line">cache.put(<span class="string">"tokenObj"</span>, &#123;</span><br><span class="line">access_token: WxAccessToken.access_token,</span><br><span class="line">expires_in: timestamp + (WxAccessToken.expires_in - <span class="number">1800</span>),</span><br><span class="line">app_id: Config.wx_gzh.app_id</span><br><span class="line">&#125;, <span class="number">1.5</span> * <span class="number">60</span> * <span class="number">60</span> * <span class="number">1000</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">cache.put(<span class="string">"tokenObj"</span>, <span class="literal">null</span>);</span><br><span class="line">ctx.logger.error(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">`wxconfig: <span class="subst">$&#123;JSON.stringify(Config.wx_gzh)&#125;</span>`</span>));</span><br><span class="line">ctx.logger.error(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">`tokenResult: <span class="subst">$&#123;JSON.stringify(WxAccessToken)&#125;</span>`</span>));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">res.code = <span class="number">500</span></span><br><span class="line">res.msg = <span class="string">"获取access失败"</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取ticket</span></span><br><span class="line"><span class="keyword">if</span> (cache.get(<span class="string">"tokenObj"</span>) &amp;&amp; cache.get(<span class="string">"tokenObj"</span>).app_id === Config.wx_gzh.app_id) &#123;</span><br><span class="line">timestamp = <span class="built_in">Math</span>.floor(<span class="built_in">Date</span>.now() / <span class="number">1000</span>);</span><br><span class="line"><span class="keyword">if</span> (!cache.get(<span class="string">"jsapiObj"</span>) || cache.get(<span class="string">"jsapiObj"</span>).expires_in &lt; timestamp || cache.get(<span class="string">"jsapiObj"</span>).app_id !== Config.wx_gzh.app_id) &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> getTicketURL = Config.wx_gzh.js_api + <span class="string">`&amp;access_token=`</span> + cache.get(<span class="string">"tokenObj"</span>).access_token</span><br><span class="line"><span class="keyword">const</span> WxTicket = <span class="keyword">await</span> getData&lt;jsAPITicketResponse&gt;(getTicketURL, httpType.get)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (WxTicket &amp;&amp; WxTicket.ticket) &#123;</span><br><span class="line">cache.put(<span class="string">"jsapiObj"</span>, &#123;</span><br><span class="line">ticket: WxTicket.ticket,</span><br><span class="line">expires_in: timestamp + (WxTicket.expires_in - <span class="number">1800</span>),</span><br><span class="line">app_id: Config.wx_gzh.app_id</span><br><span class="line">&#125;, <span class="number">1.5</span> * <span class="number">60</span> * <span class="number">60</span> * <span class="number">1000</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">cache.put(<span class="string">"jsapiObj"</span>, <span class="literal">null</span>);</span><br><span class="line">ctx.logger.error(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">`wxconfig: <span class="subst">$&#123;JSON.stringify(Config.wx_gzh)&#125;</span>`</span>));</span><br><span class="line">ctx.logger.error(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">`jsapiResult: <span class="subst">$&#123;JSON.stringify(WxTicket)&#125;</span>`</span>));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (cache.get(<span class="string">"jsapiObj"</span>) &amp;&amp; cache.get(<span class="string">"jsapiObj"</span>).app_id === Config.wx_gzh.app_id) &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> jsapi_ticket = cache.get(<span class="string">"jsapiObj"</span>).ticket;</span><br><span class="line"><span class="keyword">const</span> nonceStr = Config.wx_gzh.nonce_str</span><br><span class="line">timestamp = <span class="built_in">Math</span>.floor(<span class="built_in">Date</span>.now() / <span class="number">1000</span>);</span><br><span class="line"><span class="keyword">const</span> string1 = <span class="string">`jsapi_ticket=<span class="subst">$&#123;jsapi_ticket&#125;</span>&amp;noncestr=<span class="subst">$&#123;nonceStr&#125;</span>&amp;timestamp=<span class="subst">$&#123;timestamp&#125;</span>&amp;url=<span class="subst">$&#123;url&#125;</span>`</span>;</span><br><span class="line"><span class="keyword">const</span> signature = sha1Trans(string1)</span><br><span class="line">res.code = <span class="number">0</span></span><br><span class="line">res.msg = <span class="string">"成功"</span></span><br><span class="line">res.data = &#123;</span><br><span class="line">nonceStr: nonceStr,</span><br><span class="line">timestamp: timestamp,</span><br><span class="line">signature: signature,</span><br><span class="line">appId: Config.wx_gzh.app_id</span><br><span class="line">&#125;;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sha1Trans</span>(<span class="params">str: <span class="built_in">string</span></span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> sha1 = crypto.createHash(<span class="string">'sha1'</span>);<span class="comment">//创建哈希加密算法，后边可以是md5，sha1,sha256等</span></span><br><span class="line"><span class="keyword">var</span> newStr = sha1.update(str).digest(<span class="string">'HEX'</span>);</span><br><span class="line"><span class="keyword">return</span> newStr</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ctx.body = res</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> &#123;</span><br><span class="line">getWxConfig</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>配置文件为：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">"wx_gzh": &#123;</span><br><span class="line">   "nonce_str": "随机字符串",</span><br><span class="line">   "app_id": "你自己的",</span><br><span class="line">   "app_secret": "你自己的",</span><br><span class="line">   "js_api": "https://api.weixin.qq.com/cgi-bin/ticket/getticket?type=jsapi",</span><br><span class="line">   "access_token": "https://api.weixin.qq.com/cgi-bin/token?grant_type=client_credential"</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      共4步骤，比较简单，用了memory-cache，后期需要定时任务
    
    </summary>
    
      <category term="默认分类" scheme="https://kitions.github.io/categories/%E9%BB%98%E8%AE%A4%E5%88%86%E7%B1%BB/"/>
    
    
      <category term="微信" scheme="https://kitions.github.io/tags/%E5%BE%AE%E4%BF%A1/"/>
    
  </entry>
  
  <entry>
    <title>golang之http封装</title>
    <link href="https://kitions.github.io/2019/03/28/golang-http%E5%B0%81%E8%A3%85/"/>
    <id>https://kitions.github.io/2019/03/28/golang-http封装/</id>
    <published>2019-03-28T01:53:22.000Z</published>
    <updated>2019-04-30T06:46:00.324Z</updated>
    
    <content type="html"><![CDATA[<h3 id="go让日志显示行数"><a href="#go让日志显示行数" class="headerlink" title="go让日志显示行数"></a>go让日志显示行数</h3><pre><code>log.SetFlags(log.Lshortfile | log.LstdFlags)</code></pre><h3 id="一个简单的golang-http封装"><a href="#一个简单的golang-http封装" class="headerlink" title="一个简单的golang http封装"></a>一个简单的golang http封装</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">HttpGetCall</span><span class="params">(url <span class="keyword">string</span>, params <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">string</span>, cooikes []*http.Cookie, res <span class="keyword">interface</span>&#123;&#125;)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">op := NewRequestOptions()</span><br><span class="line">op.Params = params</span><br><span class="line">op.Cookies = cooikes</span><br><span class="line">resp, err := grequests.Get(url, op)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> !resp.Ok &#123;</span><br><span class="line"><span class="keyword">return</span> fmt.Errorf(<span class="string">"Response failed with status code: %d."</span>, resp.StatusCode)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> res != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> resp.JSON(res)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewRequestOptions</span><span class="params">()</span> *<span class="title">grequests</span>.<span class="title">RequestOptions</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> &amp;grequests.RequestOptions&#123;</span><br><span class="line">DialTimeout:         <span class="number">5</span> * time.Second,</span><br><span class="line">TLSHandshakeTimeout: <span class="number">5</span> * time.Second,</span><br><span class="line">RequestTimeout:      <span class="number">5</span> * time.Second,</span><br><span class="line">InsecureSkipVerify:  <span class="literal">true</span>,</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>返回类型的结构体</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Message <span class="keyword">struct</span> &#123;</span><br><span class="line">Code <span class="keyword">int</span>              <span class="string">`json:"code"`</span></span><br><span class="line">Msg  <span class="keyword">string</span>           <span class="string">`json:"msg"`</span></span><br><span class="line">Data *json.RawMessage <span class="string">`json:"data"`</span> <span class="comment">// must be *json.RawMessage</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调用例子：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">GetUserInfoByAccount</span><span class="params">(account <span class="keyword">string</span>)</span> <span class="params">(*protocol.UserCenterFilterUserInfo, <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">params := <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">string</span>&#123;</span><br><span class="line"><span class="string">"field"</span>: <span class="string">"member_name"</span>,</span><br><span class="line"><span class="string">"value"</span>: account,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> m protocol.Message</span><br><span class="line">url := getUserCenterInnerDomain() + <span class="string">"/get_filter_user_and_company_list"</span></span><br><span class="line">err := util.HttpGetCall(url, params, <span class="literal">nil</span>, &amp;m)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">logger.Warnning(<span class="string">"GetUserInfoByAccount error:"</span>, err.Error())</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, protocol.CODE_SYSTEM_ERROR</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Resp <span class="keyword">struct</span> &#123;</span><br><span class="line">Infos []protocol.UserCenterFilterUserInfo <span class="string">`json:"infos"`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> resp Resp</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> err = json.Unmarshal(*m.Data, &amp;resp); err != <span class="literal">nil</span> &#123;</span><br><span class="line">logger.Warnning(<span class="string">"GetUserInfoByAccount error:"</span>, err.Error())</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, protocol.CODE_SYSTEM_ERROR</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> util.IsDebug() &#123;</span><br><span class="line">logger.Debug(resp)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> m.Code != protocol.CODE_OK &#123;</span><br><span class="line">log.Printf(<span class="string">"request filed:code=%d msg=%s\n"</span>, m.Code, m.Msg)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, protocol.CODE_SYSTEM_ERROR</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(resp.Infos) == <span class="number">0</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, protocol.CODE_USER_NOT_EXIST</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> &amp;resp.Infos[<span class="number">0</span>], protocol.CODE_OK</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      一个简单的golang http封装及一个调用的例子，还有个golang让日志显示行数的一句话
    
    </summary>
    
      <category term="默认分类" scheme="https://kitions.github.io/categories/%E9%BB%98%E8%AE%A4%E5%88%86%E7%B1%BB/"/>
    
    
      <category term="go" scheme="https://kitions.github.io/tags/go/"/>
    
  </entry>
  
  <entry>
    <title>go 坑之并发访问map</title>
    <link href="https://kitions.github.io/2019/03/13/go%20%E5%9D%91%E4%B9%8B%E5%B9%B6%E5%8F%91%E8%AE%BF%E9%97%AEmap/"/>
    <id>https://kitions.github.io/2019/03/13/go 坑之并发访问map/</id>
    <published>2019-03-13T06:53:22.000Z</published>
    <updated>2019-03-26T08:50:41.860Z</updated>
    
    <content type="html"><![CDATA[<h1 id="go-坑之并发访问map"><a href="#go-坑之并发访问map" class="headerlink" title="go 坑之并发访问map"></a>go 坑之并发访问map</h1><p> 并发的对一个map进行读写是有问题的，主要是写(ps: 并发的写map肯定是任何语言都不行的,真的傻)</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">简易解决方法 </span><br><span class="line"><span class="number">1.</span> 给 <span class="keyword">map</span> 加锁</span><br><span class="line"><span class="number">2.</span> 复制出来一个单独的<span class="keyword">map</span></span><br><span class="line">代码<span class="number">2</span>  <span class="comment">// cloneReq帮助函数  防止并发的协程 访问同一个map 造成panic</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">cloneReq</span><span class="params">(req <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">string</span>)</span> <span class="title">map</span>[<span class="title">string</span>]<span class="title">string</span></span> &#123;</span><br><span class="line">clone := <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">string</span>&#123;&#125;</span><br><span class="line">lock := sync.RWMutex&#123;&#125;</span><br><span class="line">lock.RLock()</span><br><span class="line"><span class="keyword">for</span> key, value := <span class="keyword">range</span> req &#123;</span><br><span class="line">clone[key] = value</span><br><span class="line">&#125;</span><br><span class="line">lock.RUnlock()</span><br><span class="line"><span class="keyword">return</span> clone</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>go提供了一种叫map的数据结构，可以翻译成映射，对应于其他语言的字典、哈希表。借助map，可以定义一个键和值，然后可以从map中获取、设置和删除这个值，尤其适合数据查找的场景。但是map的使用有一定的限制，如果是在单个协程中读写map，那么不会存在什么问题，如果是多个协程并发访问一个map，有可能会导致程序退出，并打印下面错误信息：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fatal error: concurrent <span class="keyword">map</span> read and <span class="keyword">map</span> write</span><br></pre></td></tr></table></figure><p>上面的这个错误不是每次都会遇到的，如果并发访问的协程数不大，遇到的可能性就更小了。例如下面的程序：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    Map := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">int</span>]<span class="keyword">int</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123;</span><br><span class="line">        <span class="keyword">go</span> writeMap(Map, i, i)</span><br><span class="line">        <span class="keyword">go</span> readMap(Map, i)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">readMap</span><span class="params">(Map <span class="keyword">map</span>[<span class="keyword">int</span>]<span class="keyword">int</span>, key <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> Map[key]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">writeMap</span><span class="params">(Map <span class="keyword">map</span>[<span class="keyword">int</span>]<span class="keyword">int</span>, key <span class="keyword">int</span>, value <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">    Map[key] = value</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>只循环了10次，产生了20个协程并发访问map，程序基本不会出错，但是如果将循环次数变大，比如10万，运行下面程序基本每次都会出错：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    Map := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">int</span>]<span class="keyword">int</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">100000</span>; i++ &#123;</span><br><span class="line">        <span class="keyword">go</span> writeMap(Map, i, i)</span><br><span class="line">        <span class="keyword">go</span> readMap(Map, i)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">readMap</span><span class="params">(Map <span class="keyword">map</span>[<span class="keyword">int</span>]<span class="keyword">int</span>, key <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> Map[key]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">writeMap</span><span class="params">(Map <span class="keyword">map</span>[<span class="keyword">int</span>]<span class="keyword">int</span>, key <span class="keyword">int</span>, value <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">    Map[key] = value</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://link.jianshu.com?t=https://blog.golang.org/go-maps-in-action" target="_blank" rel="noopener">go官方博客</a>有如下说明：</p><blockquote><p>Maps are not safe for concurrent use: it’s not defined what happens when you read and write to them simultaneously. If you need to read from and write to a map from concurrently executing goroutines, the accesses must be mediated by some kind of synchronization mechanism. One common way to protect maps is with sync.RWMutex.</p></blockquote><p>大致意思就是说，并发访问map是不安全的，会出现未定义行为，导致程序退出。所以如果希望在多协程中并发访问map，必须提供某种同步机制，一般情况下通过读写锁sync.RWMutex实现对map的并发访问控制，将map和sync.RWMutex封装一下，可以实现对map的安全并发访问，示例代码如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"sync"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> SafeMap <span class="keyword">struct</span> &#123;</span><br><span class="line">    sync.RWMutex</span><br><span class="line">    Map <span class="keyword">map</span>[<span class="keyword">int</span>]<span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    safeMap := newSafeMap(<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">100000</span>; i++ &#123;</span><br><span class="line">        <span class="keyword">go</span> safeMap.writeMap(i, i)</span><br><span class="line">        <span class="keyword">go</span> safeMap.readMap(i)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">newSafeMap</span><span class="params">(size <span class="keyword">int</span>)</span> *<span class="title">SafeMap</span></span> &#123;</span><br><span class="line">    sm := <span class="built_in">new</span>(SafeMap)</span><br><span class="line">    sm.Map = <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">int</span>]<span class="keyword">int</span>)</span><br><span class="line">    <span class="keyword">return</span> sm</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(sm *SafeMap)</span> <span class="title">readMap</span><span class="params">(key <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">    sm.RLock()</span><br><span class="line">    value := sm.Map[key]</span><br><span class="line">    sm.RUnlock()</span><br><span class="line">    <span class="keyword">return</span> value</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(sm *SafeMap)</span> <span class="title">writeMap</span><span class="params">(key <span class="keyword">int</span>, value <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">    sm.Lock()</span><br><span class="line">    sm.Map[key] = value</span><br><span class="line">    sm.Unlock()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 原链接：<a href="https://www.jianshu.com/p/10a998089486" target="_blank" rel="noopener">https://www.jianshu.com/p/10a998089486</a>   </p>]]></content>
    
    <summary type="html">
    
      go 坑之并发访问map,并发的对一个map进行读写是有问题的，主要是写
    
    </summary>
    
      <category term="默认分类" scheme="https://kitions.github.io/categories/%E9%BB%98%E8%AE%A4%E5%88%86%E7%B1%BB/"/>
    
    
      <category term="go" scheme="https://kitions.github.io/tags/go/"/>
    
  </entry>
  
  <entry>
    <title>go 之grpc 获取来的数据 转为json</title>
    <link href="https://kitions.github.io/2019/02/16/grpc%20%E8%8E%B7%E5%8F%96%E6%9D%A5%E7%9A%84%E6%95%B0%E6%8D%AE%20%E8%BD%AC%E4%B8%BAjson/"/>
    <id>https://kitions.github.io/2019/02/16/grpc 获取来的数据 转为json/</id>
    <published>2019-02-16T06:53:22.000Z</published>
    <updated>2019-03-05T08:26:55.301Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// grpc 获取来的数据 转为json</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">SmartPrint</span><span class="params">(xm <span class="keyword">interface</span>&#123;&#125;)</span></span> &#123;</span><br><span class="line">js, err := json.Marshal(xm)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(<span class="keyword">string</span>(js))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      SmartPrint()方法
    
    </summary>
    
      <category term="默认分类" scheme="https://kitions.github.io/categories/%E9%BB%98%E8%AE%A4%E5%88%86%E7%B1%BB/"/>
    
    
      <category term="go" scheme="https://kitions.github.io/tags/go/"/>
    
  </entry>
  
  <entry>
    <title>go之defer延迟函数</title>
    <link href="https://kitions.github.io/2018/12/03/golang-defer/"/>
    <id>https://kitions.github.io/2018/12/03/golang-defer/</id>
    <published>2018-12-03T02:13:23.000Z</published>
    <updated>2019-03-05T08:27:43.705Z</updated>
    
    <content type="html"><![CDATA[<h1 id="go之defer延迟函数"><a href="#go之defer延迟函数" class="headerlink" title="go之defer延迟函数"></a>go之defer延迟函数</h1><h5 id="Example1"><a href="#Example1" class="headerlink" title="Example1"></a>Example1</h5><h6 id="bad"><a href="#bad" class="headerlink" title="bad"></a>bad</h6><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">do</span><span class="params">()</span> <span class="title">error</span></span> &#123;</span><br><span class="line">    f, err := os.Open(<span class="string">"book.txt"</span>)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> err</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">defer</span> f.Close()</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ..code...</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="good"><a href="#good" class="headerlink" title="good"></a>good</h6><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">do</span><span class="params">()</span> <span class="title">error</span></span> &#123;</span><br><span class="line">    f, err := os.Open(<span class="string">"book.txt"</span>)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> err</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">if</span> err := f.Close(); err != <span class="literal">nil</span> &#123;</span><br><span class="line">            <span class="comment">// log etc</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;()</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ..code...</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 检查可能的错误而不是直接交给 defer 就完事，你可以把 defer 内的代码写成一个帮助函数来简化我们的代码，这里为了讲解方便就没有进行简化。</span></span><br><span class="line"><span class="comment">// 还可以通过命名的返回变量来返回 defer 内的错误。</span></span><br></pre></td></tr></table></figure><ol><li>函数不会立即调用</li></ol><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">SaveSitemap</span><span class="params">(cat <span class="keyword">string</span>)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">fd, err := os.Create(<span class="string">"sitemap/sitemap"</span> + cat + <span class="string">".xml"</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Printf(<span class="string">"expected error happended when create BaikeSitemap file %v\n"</span>, err.Error())</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> fd.Close()       <span class="comment">// 这儿close不影响后面</span></span><br><span class="line">vinfo, err := GenerateSitemap(cat)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line">_, err = fd.Write([]<span class="keyword">byte</span>(vinfo))</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line">log.Printf(<span class="string">" %v Sitemap 写入成功"</span>, NameReverse[cat])</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// defer 会在最后执行</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      go之defer延迟函数
    
    </summary>
    
      <category term="默认分类" scheme="https://kitions.github.io/categories/%E9%BB%98%E8%AE%A4%E5%88%86%E7%B1%BB/"/>
    
    
      <category term="go" scheme="https://kitions.github.io/tags/go/"/>
    
  </entry>
  
  <entry>
    <title>前端性能-chorme performance</title>
    <link href="https://kitions.github.io/2018/11/15/performance/"/>
    <id>https://kitions.github.io/2018/11/15/performance/</id>
    <published>2018-11-15T09:14:31.000Z</published>
    <updated>2018-12-05T03:36:38.351Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前端性能"><a href="#前端性能" class="headerlink" title="前端性能"></a>前端性能</h1><p><strong>性能API上的流程时间点</strong>（timing的整体结构）<br><img src="https://ws4.sinaimg.cn/large/006tNbRwgy1fx6f9oc290j314v0ofdjm.jpg" alt="性能API上的流程时间点"></p><ul><li>navigationStart: 表示从上一个文档卸载结束时的 unix 时间戳，如果没有上一个文档，这个值将和 fetchStart 相等。</li><li>unloadEventStart: 表示前一个网页（与当前页面同域）unload 的时间戳，如果无前一个网页 unload 或者前一个网页与当前页面不同域，则值为 0。</li><li>unloadEventEnd: 返回前一个页面 unload 时间绑定的回调函数执行完毕的时间戳。</li><li>redirectStart: 第一个 HTTP 重定向发生时的时间。有跳转且是同域名内的重定向才算，否则值为 0。</li><li>redirectEnd: 最后一个 HTTP 重定向完成时的时间。有跳转且是同域名内部的重定向才算，否则值为 0。</li><li>fetchStart: 浏览器准备好使用 HTTP 请求抓取文档的时间，这发生在检查本地缓存之前。</li><li>domainLookupStart/domainLookupEnd: DNS 域名查询开始/结束的时间，如果使用了本地缓存（即无 DNS 查询）或持久连接，则与 fetchStart 值相等</li><li>connectStart: HTTP（TCP）开始/重新 建立连接的时间，如果是持久连接，则与 fetchStart 值相等。</li><li>connectEnd: HTTP（TCP） 完成建立连接的时间（完成握手），如果是持久连接，则与 fetchStart 值相等。</li><li>secureConnectionStart: HTTPS 连接开始的时间，如果不是安全连接，则值为 0。</li><li>requestStart: HTTP 请求读取真实文档开始的时间（完成建立连接），包括从本地读取缓存。</li><li>responseStart: HTTP 开始接收响应的时间（获取到第一个字节），包括从本地读取缓存。</li><li>responseEnd: HTTP 响应全部接收完成的时间（获取到最后一个字节），包括从本地读取缓存。</li><li>domLoading: 开始解析渲染 DOM 树的时间，此时 Document.readyState 变为 loading，并将抛出 readystatechange 相关事件。</li><li>domInteractive: 完成解析 DOM 树的时间，Document.readyState 变为 interactive，并将抛出 readystatechange 相关事件，注意只是 DOM 树解析完成，这时候并没有开始加载网页内的资源。</li><li>domContentLoadedEventStart: DOM 解析完成后，网页内资源加载开始的时间，在 DOMContentLoaded 事件抛出前发生。</li><li>domContentLoadedEventEnd: DOM 解析完成后，网页内资源加载完成的时间（如 JS 脚本加载执行完毕）。</li><li>domComplete: DOM 树解析完成，且资源也准备就绪的时间，Document.readyState 变为 complete，并将抛出 readystatechange 相关事件。</li><li>loadEventStart: load 事件发送给文档，也即 load 回调函数开始执行的时间。</li><li>loadEventEnd: load 事件的回调函数执行完毕的时间。</li></ul><p>or</p><ul><li><p><code>startTime</code>：有些浏览器实现为<a href="https://msdn.microsoft.com/en-us/library/ff974724(v=vs.85" target="_blank" rel="noopener"><code>navigationStart</code></a>.aspx)，代表浏览器开始unload前一个页面文档的开始时间节点。比如我们当前正在浏览baidu.com，在地址栏输入google.com并回车，浏览器的执行动作依次为：unload当前文档（即baidu.com）-&gt;请求下一文档（即google.com）。navigationStart的值便是触发unload当前文档的时间节点。</p><blockquote><p>如果当前文档为空，则navigationStart的值等于fetchStart。</p></blockquote></li><li><p><code>redirectStart</code>和<code>redirectEnd</code>：如果页面是由redirect而来，则redirectStart和redirectEnd分别代表redirect开始和结束的时间节点；</p></li><li><p><code>unloadEventStart</code>和<code>unloadEventEnd</code>：如果前一个文档和请求的文档是同一个域的，则<code>unloadEventStart</code>和<code>unloadEventEnd</code>分别代表浏览器unload前一个文档的开始和结束时间节点。否则两者都等于0；</p></li><li><p><code>fetchStart</code>是指在浏览器发起任何请求之前的时间值。在fetchStart和<code>domainLookupStart</code>之间，浏览器会检查当前文档的缓存；</p></li><li><p><code>domainLookupStart</code>和<code>domainLookupEnd</code>分别代表DNS查询的开始和结束时间节点。如果浏览器没有进行DNS查询（比如使用了cache），则两者的值都等于<code>fetchStart</code>；</p></li><li><p><code>connectStart</code>和<code>connectEnd</code>分别代表TCP建立连接和连接成功的时间节点。如果浏览器没有进行TCP连接（比如使用持久化连接webscoket），则两者都等于<code>domainLookupEnd</code>；</p></li><li><p><code>secureConnectionStart</code>：可选。如果页面使用HTTPS，它的值是安全连接握手之前的时刻。如果该属性不可用，则返回undefined。如果该属性可用，但没有使用HTTPS，则返回0；</p></li><li><p><code>requestStart</code>代表浏览器发起请求的时间节点，请求的方式可以是请求服务器、缓存、本地资源等；</p></li><li><p><code>responseStart</code>和<code>responseEnd</code>分别代表浏览器收到从服务器端（或缓存、本地资源）响应回的第一个字节和最后一个字节数据的时刻；</p></li><li><p><code>domLoading</code>代表浏览器开始解析html文档的时间节点。我们知道IE浏览器下的document有<code>readyState</code>属性，<code>domLoading</code>的值就等于<code>readyState</code>改变为<code>loading</code>的时间节点；</p></li><li><p><code>domInteractive</code>代表浏览器解析html文档的状态为<code>interactive</code>时的时间节点。<code>domInteractive</code>并非DOMReady，它早于DOMReady触发，代表html文档解析完毕（即dom tree创建完成）但是内嵌资源（比如外链css、js等）还未加载的时间点；</p></li><li><p><code>domContentLoadedEventStart</code>：代表<code>DOMContentLoaded</code>事件触发的时间节点：</p><blockquote><p>页面文档完全加载并解析完毕之后,会触发DOMContentLoaded事件，HTML文档不会等待样式文件,图片文件,子框架页面的加载(load事件可以用来检测HTML页面是否完全加载完毕(fully-loaded))。</p></blockquote></li><li><p><code>domContentLoadedEventEnd</code>：代表<code>DOMContentLoaded</code>事件完成的时间节点，此刻用户可以对页面进行操作，也就是JS 脚本加载执行完毕或者jQuery中的domready时间；</p></li><li><p><code>domComplete</code>：html文档完全解析完毕的时间节点；</p></li><li><p><code>loadEventStart</code>和<code>loadEventEnd</code>分别代表onload事件触发和结束的时间节点</p></li></ul><p><strong>DOM的时间点</strong></p><p><img src="https://ws3.sinaimg.cn/large/006tNbRwgy1fx6fc3x5quj309n08umxm.jpg" alt=""></p><p>上图几个DOM时间点的解释：</p><ul><li><p>domLoading：这是整个过程的起始时间戳，浏览器即将开始解析第一批收到的 HTML 文档字节。</p></li><li><p>domInteractive：表示浏览器完成对所有 HTML 的解析并且 DOM 构建完成的时间点。</p></li><li><p>domContentLoaded：表示 DOM 准备就绪并且没有样式表阻止 JavaScript 执行的时间点，这意味着现</p><p>在我们可以构建渲染树了。</p><ul><li>许多 JavaScript 框架都会等待此事件发生后，才开始执行它们自己的逻辑。因此，浏览器会捕获<br>EventStart 和 EventEnd 时间戳，让我们能够追踪执行所花费的时间。</li></ul></li><li><p>domComplete：顾名思义，所有处理完成，并且网页上的所有资源（图像等）都已下载完毕，也就是说，加载转环已停止旋转。</p></li><li><p>loadEvent：作为每个网页加载的最后一步，浏览器会触发 onload 事件，以便触发额外的应用逻辑。</p></li></ul><h4 id="2-2-2-计算性能指标"><a href="#2-2-2-计算性能指标" class="headerlink" title="2.2.2 计算性能指标"></a>2.2.2 计算性能指标</h4><p>可以使用<code>Navigation.timing</code> 统计到的时间数据来计算一些页面性能指标，比如DNS查询耗时、白屏时间、domready等等。如下：</p><ul><li>DNS查询耗时 = domainLookupEnd - domainLookupStart</li><li>TCP链接耗时 = connectEnd - connectStart</li><li>request请求耗时 = responseEnd - responseStart</li><li>解析dom树耗时 = domComplete - domInteractive</li><li>白屏时间 = domloadng - fetchStart</li><li>domready时间 = domContentLoadedEventEnd - fetchStart</li><li>onload时间 = loadEventEnd - fetchStart</li></ul><h3 id="W3C-API"><a href="#W3C-API" class="headerlink" title="W3C API"></a>W3C API</h3><p>window.performance 是W3C性能小组引入的新的API，目前IE9以上的浏览器都支持。在Console Tab下，我们可以通过输入window.performance.timing来查询到浏览器显示一个页面，各个阶段所耗费的时间。</p><p><img src="https://ws3.sinaimg.cn/large/006tNbRwgy1fx6fhyllqej30bf0d70ue.jpg" alt=""></p><p>除了timing字段，performance还有几个字段，可以让我们对页面进行更好的分析</p><ol><li><p>memory字段代表的是JS对内存的占用</p></li><li><p>navigation字段统计的是一些网页导航。</p><p>2.1.  redirectCount 同源重定向的数量等</p><p>2.2.  type 返回值是0，1，2，</p><ul><li>0 : TYPE_NAVIGATE (用户通过常规导航方式访问页面，比如点一个链接，或者一般的get方式)</li><li>1 : TYPE_RELOAD (用户通过刷新，包括JS调用刷新接口等方式访问页面)</li><li>2 : TYPE_BACK_FORWARD (用户通过后退按钮访问本页面)</li></ul></li></ol><h3 id="chrome-API"><a href="#chrome-API" class="headerlink" title="chrome API"></a>chrome API</h3><p><img src="https://ws3.sinaimg.cn/large/006tNbRwgy1fx6fjvukvaj30c10frmzg.jpg" alt=""></p><h2 id="performance"><a href="#performance" class="headerlink" title="performance"></a>performance</h2><p>之前chorme老版本名为timeline，指的是当你的页面在浏览器运行时的性能表现，用这个performance功能去分析Response, Animation, 以及 Idle 这三个性能指标。</p><h3 id="Begin"><a href="#Begin" class="headerlink" title="Begin"></a>Begin</h3><ol><li>打开Chrome的匿名模式。匿名模式可以保证Chrome在一个相对干净的环境下运行。比如，你安装了许多chrome插件，这些插件可能会影响我们分析性能表现。</li><li>在匿名模式下打开右边这个链接，<a href="https://googlechrome.github.io/devtools-samples/jank/" target="_blank" rel="noopener">DEMO</a>，这个网页就是我们要用来分析的DEMO。这个页面里都是很多上下移动的蓝色小方块。</li><li>右键检查Command+Opiton+I（Mac）或者Control+shift+I (Windows, Linux) 来打开Devtools。</li><li>开发使用的电脑配置普遍较高，在Performance选项卡中，对于CPU，选择4x减速。DevTools限制你的CPU，使其比平时慢4倍。</li></ol><blockquote><p>如果要确保它们在低端移动设备上运行良好，请将CPU限制设置为<strong>20x减速</strong>。</p></blockquote><p><img src="https://ws3.sinaimg.cn/large/006tNbRwgy1fwwyn0656fj30v40j441i.jpg" alt="performance"></p><ol><li>control 条，最上面一条，有录制，刷新页面，清除结果等操作</li><li>overview总览图，横轴是时间线，包含fps帧率，cpu占用，net网络请求，页面性能的汇总</li><li>火焰图，Network，Frames, Interactions, Main等 </li><li>总结：精确到毫秒级的分析，按调用层级，事件分类的整理</li></ol><p>在火焰图的network中 ： </p><ol><li>HTML 文件为蓝色。 </li><li>脚本为黄色。 </li><li>样式表为紫色。 </li><li>媒体文件为绿色。 </li><li>其他资源为灰色。</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">with</span>(performance)&#123;</span><br><span class="line">            readyStart = timing.fetchStart - timing.navigationStart;</span><br><span class="line">            redirectTime = timing.redirectEnd  - timing.redirectStart;</span><br><span class="line">            appcacheTime = timing.domainLookupStart  - timing.fetchStart;</span><br><span class="line">            unloadEventTime = timing.unloadEventEnd - timing.unloadEventStart;</span><br><span class="line">            lookupDomainTime = timing.domainLookupEnd - timing.domainLookupStart;</span><br><span class="line">            connectTime = timing.connectEnd - timing.connectStart;</span><br><span class="line">            requestTime = timing.responseEnd - timing.requestStart;</span><br><span class="line">            initDomTreeTime = timing.domInteractive - timing.responseEnd;</span><br><span class="line">            domReadyTime = timing.domContentLoadedEventEnd - timing.navigationStart;</span><br><span class="line">            loadTime = timing.loadEventEnd - timing.navigationStart;</span><br><span class="line">             <span class="comment">//过早获取时 domComplete有时会是0loadEventTime = timing.loadEventEnd - timing.loadEventStart;loadTime = timing.loadEventEnd - timing.navigationStart;</span></span><br><span class="line">             <span class="comment">//过早获取时 loadEventEnd有时会是0</span></span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'准备新页面时间耗时: '</span> + readyStart);</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'redirect 重定向耗时: '</span> + redirectTime);</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'Appcache 耗时: '</span> + appcacheTime);</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'unload 前文档耗时: '</span> + unloadEventTime);</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'DNS 查询耗时: '</span> + lookupDomainTime);</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'TCP连接耗时: '</span> + connectTime);</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'request请求耗时: '</span> + requestTime);</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'请求完毕至DOM加载: '</span> + initDomTreeTime);</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'DOM加载完成: '</span> + domReadyTime);</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'从开始至load总耗时: '</span> + loadTime);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,<span class="number">2000</span>) </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过分析，发现用此方法 DOM加载完成和全部加载完成耗用的时间和chrome浏览器NETWORDK面板上显示的DomContentLoaded 、Load时间基本一致，误差几ms，<br> 所以我们基本上可以用这个方法来统计我们所做的H5网站在不同地域、不同客户端下加载H5所耗用的时间，进而逐个优化。比如DNS耗时, DOM加载耗时了 </p><h3 id="reflow（回流）"><a href="#reflow（回流）" class="headerlink" title="reflow（回流）"></a>reflow（回流）</h3><p>说到页面为什么会慢？那是因为浏览器要花时间、花精力去渲染，尤其是当它发现某个部分发生了点变化影响了布局，需要倒回去重新渲染， 该过程称为<strong>reflow（回流）。</strong></p><p>在浏览器的渲染过程中（页面初始化，用户行为改变页面样式，动画改变页面样式） reflow（回流）repaint(重绘)都会大大影响web性能，尤其是h5页面。</p><p>reflow 几乎是无法避免的。现在界面上流行的一些效果，比如树状目录的折叠、展开（实质上是元素的显示与隐藏）等，都将引起浏览器的 reflow。鼠标滑过、点击……只要这些行为引起了页面上某些元素的占位面积、定位方式、边距等属性的变化，都会引起它内部、周围甚至整个页面的重新渲 染。通常我们都无法预估浏览器到底会 reflow 哪一部分的代码，它们都彼此相互影响着。</p>]]></content>
    
    <summary type="html">
    
      chorme performance，之前chorme老版本名为timeline，指的是当你的页面在浏览器运行时的性能表现，用这个performance功能去分析Response, Animation, 以及 Idle 这三个性能指标。
    
    </summary>
    
      <category term="默认分类" scheme="https://kitions.github.io/categories/%E9%BB%98%E8%AE%A4%E5%88%86%E7%B1%BB/"/>
    
    
      <category term="性能" scheme="https://kitions.github.io/tags/%E6%80%A7%E8%83%BD/"/>
    
  </entry>
  
  <entry>
    <title>Rxjs浅浅滴学习</title>
    <link href="https://kitions.github.io/2018/11/04/Rxjs/"/>
    <id>https://kitions.github.io/2018/11/04/Rxjs/</id>
    <published>2018-11-04T07:44:35.000Z</published>
    <updated>2018-12-05T03:35:13.356Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Rxjs浅浅滴学习"><a href="#Rxjs浅浅滴学习" class="headerlink" title="Rxjs浅浅滴学习"></a>Rxjs浅浅滴学习</h1><p>我们都知道 JS 是什么，那么什么是 Rx 呢？Rx 是 Reactive Extension（也叫 ReactiveX）的简称，指的是实践响应式编程的一套工具，<a href="http://reactivex.io/" target="_blank" rel="noopener">Rx 官网</a>首页的介绍是一套通过可监听流来做异步编程的 API（An API for asynchronous programming with observable streams）。</p><p>RxJS 是基于观察者模式和迭代器模式以函数式编程思维来实现的。</p><h3 id="RxJS-的特点"><a href="#RxJS-的特点" class="headerlink" title="RxJS 的特点"></a>RxJS 的特点</h3><ul><li>数据流抽象了很多现实问题</li><li>擅长处理异步问题</li><li>把复杂问题分解为简单问题的组合</li></ul><p>前端中的 DOM 事件、WebSocket 推送消息、AJAX 请求资源、动画都可以看作是数据流。</p><p>RxJS 对数据采用“推”的方式，当一个数据产生时，会将其推送给对应的处理函数，这个处理函数不用关心数据时同步产生还是异步产生的，因此处理异步将会变得非常简单。</p><p>RxJS 中很多操作符，每个操作符都提供了一个小功能，学习 RxJS 最重要的就是学习如何组合操作符来解决复杂问题。</p><p>在 RxJS 中用来解决异步事件管理的的基本概念是：</p><ul><li><strong>Observable (可观察对象):</strong> 表示一个概念，这个概念是一个可调用的未来值或事件的集合。</li><li><strong>Observer (观察者):</strong> 一个回调函数的集合，它知道如何去监听由 Observable 提供的值。</li><li><strong>Subscription (订阅):</strong> 表示 Observable 的执行，主要用于取消 Observable 的执行。</li><li><strong>Operators (操作符):</strong> 采用函数式编程风格的纯函数 (pure function)，使用像 <code>map</code>、<code>filter</code>、<code>concat</code>、<code>flatMap</code> 等这样的操作符来处理集合。</li><li><strong>Subject (主体):</strong> 相当于 EventEmitter，并且是将值或事件多路推送给多个 Observer 的唯一方式。</li><li><strong>Schedulers (调度器):</strong> 用来控制并发并且是中央集权的调度员，允许我们在发生计算时进行协调，例如 <code>setTimeout</code> 或 <code>requestAnimationFrame</code> 或其他。</li></ul><h2 id="Observable-可观察对象"><a href="#Observable-可观察对象" class="headerlink" title="Observable (可观察对象)"></a>Observable (可观察对象)</h2><p>Observables 是多个值的惰性推送集合。它填补了下面表格中的空白：</p><table><thead><tr><th></th><th>单个值</th><th>多个值</th></tr></thead><tbody><tr><td><strong>拉取</strong></td><td><a href="https://developer.mozilla.org/en-US/docs/Glossary/Function" target="_blank" rel="noopener"><code>Function</code></a></td><td><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols" target="_blank" rel="noopener"><code>Iterator</code></a></td></tr><tr><td><strong>推送</strong></td><td><a href="https://developer.mozilla.org/en-US/docs/Mozilla/JavaScript_code_modules/Promise.jsm/Promise" target="_blank" rel="noopener"><code>Promise</code></a></td><td><a href="https://cn.rx.js.org/class/es6/Observable.js~Observable.html" target="_blank" rel="noopener"><code>Observable</code></a></td></tr></tbody></table><p><strong>示例</strong> - 当订阅下面代码中的 Observable 的时候会立即(同步地)推送值<code>1</code>、<code>2</code>、<code>3</code>，然后1秒后会推送值<code>4</code>，再然后是完成流：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> observable = Rx.Observable.create(<span class="function"><span class="keyword">function</span> (<span class="params">observer</span>) </span>&#123;</span><br><span class="line">  observer.next(<span class="number">1</span>);</span><br><span class="line">  observer.next(<span class="number">2</span>);</span><br><span class="line">  observer.next(<span class="number">3</span>);</span><br><span class="line">  setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    observer.next(<span class="number">4</span>);</span><br><span class="line">    observer.complete();</span><br><span class="line">  &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><blockquote><p>Observables 像是没有参数, 但可以泛化为多个值的函数。</p></blockquote><p>Demo01：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'Hello'</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">42</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> x = foo.call(); <span class="comment">// 等同于 foo()</span></span><br><span class="line"><span class="built_in">console</span>.log(x);</span><br><span class="line"><span class="keyword">var</span> y = foo.call(); <span class="comment">// 等同于 foo()</span></span><br><span class="line"><span class="built_in">console</span>.log(y);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">"Hello"</span></span><br><span class="line"><span class="number">42</span></span><br><span class="line"><span class="string">"Hello"</span></span><br><span class="line"><span class="number">42</span></span><br></pre></td></tr></table></figure><p>Observables 重写上面的代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> foo = Rx.Observable.create(<span class="function"><span class="keyword">function</span> (<span class="params">observer</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'Hello'</span>);</span><br><span class="line">  observer.next(<span class="number">42</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">foo.subscribe(<span class="function"><span class="keyword">function</span> (<span class="params">x</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(x);</span><br><span class="line">&#125;);</span><br><span class="line">foo.subscribe(<span class="function"><span class="keyword">function</span> (<span class="params">y</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(y);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">"Hello"</span></span><br><span class="line"><span class="number">42</span></span><br><span class="line"><span class="string">"Hello"</span></span><br><span class="line"><span class="number">42</span></span><br></pre></td></tr></table></figure><p>这是因为函数和 Observables 都是惰性运算。如果你不调用函数，<code>console.log(&#39;Hello&#39;)</code> 就不会执行。Observables 也是如此，如果你不“调用”它(使用 <code>subscribe</code>)，<code>console.log(&#39;Hello&#39;)</code> 也不会执行。此外，“调用”或“订阅”是独立的操作：两个函数调用会触发两个单独的副作用，两个 Observable 订阅同样也是触发两个单独的副作用。EventEmitters 共享副作用并且无论是否存在订阅者都会尽早执行，Observables 与之相反，不会共享副作用并且是延迟执行。</p><blockquote><p>订阅 Observable 类似于调用函数。</p></blockquote><blockquote><p>Observables 传递值可以是同步的，也可以是异步的。</p></blockquote><h4 id="Observable剖析"><a href="#Observable剖析" class="headerlink" title="Observable剖析"></a>Observable剖析</h4><p>Observables 是使用 <code>Rx.Observable.create</code> 或创建操作符<strong>创建的</strong>，并使用观察者来<strong>订阅</strong>它，然后<strong>执行</strong>它并发送 <code>next</code> / <code>error</code> / <code>complete</code> 通知给观察者，而且执行可能会被<strong>清理</strong>。这四个方面全部编码在 Observables 实例中，但某些方面是与其他类型相关的，像 Observer (观察者) 和 Subscription (订阅)。</p><p>Observable 的核心关注点：</p><ul><li><strong>创建</strong> Observables</li><li><strong>订阅</strong> Observables</li><li><strong>执行</strong> Observables</li><li><strong>清理</strong> Observables</li></ul><h4 id="创建-Observables"><a href="#创建-Observables" class="headerlink" title="创建 Observables"></a>创建 Observables</h4><p><code>Rx.Observable.create</code> 是 <code>Observable</code> 构造函数的别名，它接收一个参数：<code>subscribe</code> 函数。</p><p>下面的示例创建了一个 Observable，它每隔一秒会向观察者发送字符串 <code>&#39;hi&#39;</code> 。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> observable = Rx.Observable.create(<span class="function"><span class="keyword">function</span> <span class="title">subscribe</span>(<span class="params">observer</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> id = setInterval(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    observer.next(<span class="string">'hi'</span>)</span><br><span class="line">  &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>Observables 可以使用 <code>create</code> 来创建, 但通常我们使用所谓的<a href="https://cn.rx.js.org/manual/overview.html#creation-operators" target="_blank" rel="noopener">创建操作符</a>, 像 <code>of</code>、<code>from</code>、<code>interval</code>、等等。</p><p> 在上面的示例中，<code>subscribe</code> 函数是用来描述 Observable 最重要的一块。我们来看下订阅是什么意思。</p><h4 id="订阅-Observables"><a href="#订阅-Observables" class="headerlink" title="订阅 Observables"></a>订阅 Observables</h4><p>示例中的 Observable 对象 <code>observable</code> 可以<strong>订阅</strong>，像这样：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">observable.subscribe(<span class="function"><span class="params">x</span> =&gt;</span> <span class="built_in">console</span>.log(x));</span><br></pre></td></tr></table></figure><p><code>observable.subscribe</code> 和 <code>Observable.create(function subscribe(observer) {...})</code> 中的 <code>subscribe</code> 有着同样的名字，这并不是一个巧合。在库中，它们是不同的，但从实际出发，可以认为在概念上它们是等同的。</p><blockquote><p>订阅 Observable 像是调用函数, 并提供接收数据的回调函数。</p></blockquote><p><code>subscribe</code> 调用是启动 “Observable 执行”的一种简单方式， 并将值或事件传递给本次执行的观察者。</p><h4 id="执行-Observables"><a href="#执行-Observables" class="headerlink" title="执行 Observables"></a>执行 Observables</h4><p><code>Observable.create(function subscribe(observer) {...})</code> 中<code>...</code>的代码表示 “Observable 执行”，它是惰性运算，只有在每个观察者订阅后才会执行。随着时间的推移，执行会以同步或异步的方式产生多个值。</p><p>Observable 执行可以传递三种类型的值：</p><ul><li>“Next” 通知： 发送一个值，比如数字、字符串、对象，等等。</li><li>“Error” 通知： 发送一个 JavaScript 错误 或 异常。</li><li>“Complete” 通知： 不再发送任何值。</li></ul><p>“Next” 通知是最重要，也是最常见的类型：它们表示传递给观察者的实际数据。”Error” 和 “Complete” 通知可能只会在 Observable 执行期间发生一次，并且只会执行其中的一个。</p><blockquote><p>在 Observable 执行中, 可能会发送零个到无穷多个 “Next” 通知。如果发送的是 “Error” 或 “Complete” 通知的话，那么之后不会再发送任何通知了。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> observable = Rx.Observable.create(<span class="function"><span class="keyword">function</span> <span class="title">subscribe</span>(<span class="params">observer</span>) </span>&#123;</span><br><span class="line">  observer.next(<span class="number">1</span>);</span><br><span class="line">  observer.next(<span class="number">2</span>);</span><br><span class="line">  observer.next(<span class="number">3</span>);</span><br><span class="line">  observer.complete();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> observable = Rx.Observable.create(<span class="function"><span class="keyword">function</span> <span class="title">subscribe</span>(<span class="params">observer</span>) </span>&#123;</span><br><span class="line">  observer.next(<span class="number">1</span>);</span><br><span class="line">  observer.next(<span class="number">2</span>);</span><br><span class="line">  observer.next(<span class="number">3</span>);</span><br><span class="line">  observer.complete();</span><br><span class="line">  observer.next(<span class="number">4</span>); <span class="comment">// 因为违反规约，所以不会发送</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> observable = Rx.Observable.create(<span class="function"><span class="keyword">function</span> <span class="title">subscribe</span>(<span class="params">observer</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    observer.next(<span class="number">1</span>);</span><br><span class="line">    observer.next(<span class="number">2</span>);</span><br><span class="line">    observer.next(<span class="number">3</span>);</span><br><span class="line">    observer.complete();</span><br><span class="line">  &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">    observer.error(err); <span class="comment">// 如果捕获到异常会发送一个错误</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="清理-Observable-执行"><a href="#清理-Observable-执行" class="headerlink" title="清理 Observable 执行"></a>清理 Observable 执行</h4><p>因为 Observable 执行可能会是无限的，并且观察者通常希望能在有限的时间内中止执行，所以我们需要一个 API 来取消执行。因为每个执行都是其对应观察者专属的，一旦观察者完成接收值，它必须要一种方法来停止执行，以避免浪费计算能力或内存资源。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> observable = Rx.Observable.from([<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>]);</span><br><span class="line"><span class="keyword">var</span> subscription = observable.subscribe(<span class="function"><span class="params">x</span> =&gt;</span> <span class="built_in">console</span>.log(x));</span><br><span class="line"><span class="comment">// 稍后：</span></span><br><span class="line">subscription.unsubscribe();</span><br></pre></td></tr></table></figure><blockquote><p>当你订阅了 Observable，你会得到一个 Subscription ，它表示进行中的执行。只要调用 <code>unsubscribe()</code> 方法就可以取消执行。</p></blockquote><h2 id="Observer-观察者"><a href="#Observer-观察者" class="headerlink" title="Observer (观察者)"></a>Observer (观察者)</h2><p><strong>什么是观察者？</strong> - 观察者是由 Observable 发送的值的消费者。观察者只是一组回调函数的集合，每个回调函数对应一种 Observable 发送的通知类型：<code>next</code>、<code>error</code> 和 <code>complete</code> 。下面的示例是一个典型的观察者对象：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> observer = &#123;</span><br><span class="line">  next: <span class="function"><span class="params">x</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">'Observer got a next value: '</span> + x),</span><br><span class="line">  error: <span class="function"><span class="params">err</span> =&gt;</span> <span class="built_in">console</span>.error(<span class="string">'Observer got an error: '</span> + err),</span><br><span class="line">  complete: <span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">'Observer got a complete notification'</span>),</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>要使用观察者，需要把它提供给 Observable 的 <code>subscribe</code> 方法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">observable.subscribe(observer);</span><br></pre></td></tr></table></figure><blockquote><p>观察者只是有三个回调函数的对象，每个回调函数对应一种 Observable 发送的通知类型。</p></blockquote><h2 id="Subscription（订阅）"><a href="#Subscription（订阅）" class="headerlink" title="Subscription（订阅）"></a>Subscription（订阅）</h2><p><strong>什么是 Subscription ？</strong> - Subscription 是表示可清理资源的对象，通常是 Observable 的执行。Subscription 有一个重要的方法，即 <code>unsubscribe</code>，它不需要任何参数，只是用来清理由 Subscription 占用的资源。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> observable = Rx.Observable.interval(<span class="number">1000</span>);</span><br><span class="line"><span class="keyword">var</span> subscription = observable.subscribe(<span class="function"><span class="params">x</span> =&gt;</span> <span class="built_in">console</span>.log(x));</span><br><span class="line"><span class="comment">// 稍后：</span></span><br><span class="line"><span class="comment">// 这会取消正在进行中的 Observable 执行</span></span><br><span class="line"><span class="comment">// Observable 执行是通过使用观察者调用 subscribe 方法启动的</span></span><br><span class="line">subscription.unsubscribe();</span><br></pre></td></tr></table></figure><blockquote><p>Subscription 基本上只有一个 <code>unsubscribe()</code> 函数，这个函数用来释放资源或去取消 Observable 执行。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> observable1 = Rx.Observable.interval(<span class="number">400</span>);</span><br><span class="line"><span class="keyword">var</span> observable2 = Rx.Observable.interval(<span class="number">300</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> subscription = observable1.subscribe(<span class="function"><span class="params">x</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">'first: '</span> + x));</span><br><span class="line"><span class="keyword">var</span> childSubscription = observable2.subscribe(<span class="function"><span class="params">x</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">'second: '</span> + x));</span><br><span class="line"></span><br><span class="line">subscription.add(childSubscription);</span><br><span class="line"></span><br><span class="line">setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// subscription 和 childSubscription 都会取消订阅</span></span><br><span class="line">  subscription.unsubscribe();</span><br><span class="line">&#125;, <span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line">output:</span><br><span class="line">    second: <span class="number">0</span></span><br><span class="line">    first: <span class="number">0</span></span><br><span class="line">    second: <span class="number">1</span></span><br><span class="line">    first: <span class="number">1</span></span><br><span class="line">    second: <span class="number">2</span></span><br></pre></td></tr></table></figure><h4 id="simple-Demo1"><a href="#simple-Demo1" class="headerlink" title="simple Demo1"></a>simple Demo1</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> button = <span class="built_in">document</span>.querySelector(<span class="string">'button'</span>);</span><br><span class="line">button.addEventListener(<span class="string">'click'</span>, () =&gt;</span><br><span class="line">                        <span class="built_in">console</span>.log(<span class="string">'Clicked!'</span>)</span><br><span class="line">                       );</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> button = <span class="built_in">document</span>.querySelector(<span class="string">'button'</span>);</span><br><span class="line">Rx.Observable.fromEvent(button, <span class="string">'click'</span>)</span><br><span class="line">  .subscribe(<span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">'Clicked!'</span>));</span><br></pre></td></tr></table></figure><p><code>Rx.Observable.fromEvent()</code>相当于创建了一个可观察对象<code>Observable</code>,也就是监听的代理对象,subscribe是这个对象的一个方法,该方法返回这个监听的事件,<code>subscribe</code>方法的参数是对观察对象返回值做出下一步操作(回调函数).</p><h4 id="Demo2（控制流动）"><a href="#Demo2（控制流动）" class="headerlink" title="Demo2（控制流动）"></a>Demo2（控制流动）</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 输入 "hello world"</span></span><br><span class="line"><span class="keyword">var</span> input = Rx.Observable.fromEvent(<span class="built_in">document</span>.querySelector(<span class="string">'input'</span>), <span class="string">'input'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 过滤掉小于3个字符长度的目标值</span></span><br><span class="line">input.filter(<span class="function"><span class="params">event</span> =&gt;</span> event.target.value.length &gt; <span class="number">2</span>)</span><br><span class="line">  .map(<span class="function"><span class="params">event</span> =&gt;</span> event.target.value)</span><br><span class="line">  .subscribe(<span class="function"><span class="params">value</span> =&gt;</span> <span class="built_in">console</span>.log(value)); <span class="comment">// "hel"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 延迟事件</span></span><br><span class="line">input.delay(<span class="number">200</span>)</span><br><span class="line">  .map(<span class="function"><span class="params">event</span> =&gt;</span> event.target.value)</span><br><span class="line">  .subscribe(<span class="function"><span class="params">value</span> =&gt;</span> <span class="built_in">console</span>.log(value)); <span class="comment">// "h" -200ms-&gt; "e" -200ms-&gt; "l" ...</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 每200ms只能通过一个事件</span></span><br><span class="line">input.throttleTime(<span class="number">200</span>)</span><br><span class="line">  .map(<span class="function"><span class="params">event</span> =&gt;</span> event.target.value)</span><br><span class="line">  .subscribe(<span class="function"><span class="params">value</span> =&gt;</span> <span class="built_in">console</span>.log(value)); <span class="comment">// "h" -200ms-&gt; "w"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 停止输入后200ms方能通过最新的那个事件</span></span><br><span class="line">input.debounceTime(<span class="number">200</span>)</span><br><span class="line">  .map(<span class="function"><span class="params">event</span> =&gt;</span> event.target.value)</span><br><span class="line">  .subscribe(<span class="function"><span class="params">value</span> =&gt;</span> <span class="built_in">console</span>.log(value)); <span class="comment">// "o" -200ms-&gt; "d"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 在3次事件后停止事件流</span></span><br><span class="line">input.take(<span class="number">3</span>)</span><br><span class="line">  .map(<span class="function"><span class="params">event</span> =&gt;</span> event.target.value)</span><br><span class="line">  .subscribe(<span class="function"><span class="params">value</span> =&gt;</span> <span class="built_in">console</span>.log(value)); <span class="comment">// "hel"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 直到其他 observable 触发事件才停止事件流</span></span><br><span class="line"><span class="keyword">var</span> stopStream = Rx.Observable.fromEvent(<span class="built_in">document</span>.querySelector(<span class="string">'button'</span>), <span class="string">'click'</span>);</span><br><span class="line">input.takeUntil(stopStream)</span><br><span class="line">  .map(<span class="function"><span class="params">event</span> =&gt;</span> event.target.value)</span><br><span class="line">  .subscribe(<span class="function"><span class="params">value</span> =&gt;</span> <span class="built_in">console</span>.log(value)); <span class="comment">// "hello" (点击才能看到)</span></span><br></pre></td></tr></table></figure><h4 id="Demo3（产生值）"><a href="#Demo3（产生值）" class="headerlink" title="Demo3（产生值）"></a>Demo3（产生值）</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 输入 "hello world"</span></span><br><span class="line"><span class="keyword">var</span> input = Rx.Observable.fromEvent(<span class="built_in">document</span>.querySelector(<span class="string">'input'</span>), <span class="string">'input'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 传递一个新的值</span></span><br><span class="line">input.map(<span class="function"><span class="params">event</span> =&gt;</span> event.target.value)</span><br><span class="line">  .subscribe(<span class="function"><span class="params">value</span> =&gt;</span> <span class="built_in">console</span>.log(value)); <span class="comment">// "h"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 通过提取属性传递一个新的值</span></span><br><span class="line">input.pluck(<span class="string">'target'</span>, <span class="string">'value'</span>)</span><br><span class="line">  .subscribe(<span class="function"><span class="params">value</span> =&gt;</span> <span class="built_in">console</span>.log(value)); <span class="comment">// "h"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 传递之前的两个值</span></span><br><span class="line">input.pluck(<span class="string">'target'</span>, <span class="string">'value'</span>).pairwise()</span><br><span class="line">  .subscribe(<span class="function"><span class="params">value</span> =&gt;</span> <span class="built_in">console</span>.log(value)); <span class="comment">// ["h", "he"]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 只会通过唯一的值</span></span><br><span class="line">input.pluck(<span class="string">'data'</span>).distinct()</span><br><span class="line">  .subscribe(<span class="function"><span class="params">value</span> =&gt;</span> <span class="built_in">console</span>.log(value)); <span class="comment">// "helo wrd"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 不会传递重复的值</span></span><br><span class="line">input.pluck(<span class="string">'data'</span>).distinctUntilChanged()</span><br><span class="line">  .subscribe(<span class="function"><span class="params">value</span> =&gt;</span> <span class="built_in">console</span>.log(value)); <span class="comment">// "helo world"</span></span><br></pre></td></tr></table></figure><p>### </p>]]></content>
    
    <summary type="html">
    
      Rx 是 Reactive Extension（也叫 ReactiveX）的简称，指的是实践响应式编程的一套工具，Rx 官网首页的介绍是一套通过可监听流来做异步编程的 API（An API for asynchronous programming with observable streams）。RxJS 是基于观察者模式和迭代器模式以函数式编程思维来实现的。
    
    </summary>
    
      <category term="默认分类" scheme="https://kitions.github.io/categories/%E9%BB%98%E8%AE%A4%E5%88%86%E7%B1%BB/"/>
    
    
      <category term="rxjs" scheme="https://kitions.github.io/tags/rxjs/"/>
    
  </entry>
  
  <entry>
    <title>css-动画-PPT</title>
    <link href="https://kitions.github.io/2018/08/08/css-%E5%8A%A8%E7%94%BB-PPT/"/>
    <id>https://kitions.github.io/2018/08/08/css-动画-PPT/</id>
    <published>2018-08-08T09:19:33.000Z</published>
    <updated>2018-09-03T09:48:17.430Z</updated>
    
    <content type="html"><![CDATA[<p>实为简陋</p><p><a href="https://slides.com/nsplknsplk/deck/live#/" target="_blank" rel="noopener">css动画简析-在线PPT</a></p>]]></content>
    
    <summary type="html">
    
      网页版PPT，slides.com，
    
    </summary>
    
      <category term="默认分类" scheme="https://kitions.github.io/categories/%E9%BB%98%E8%AE%A4%E5%88%86%E7%B1%BB/"/>
    
    
      <category term="animation" scheme="https://kitions.github.io/tags/animation/"/>
    
  </entry>
  
  <entry>
    <title>css-GPU加速</title>
    <link href="https://kitions.github.io/2018/08/07/css-GPU%E5%8A%A0%E9%80%9F/"/>
    <id>https://kitions.github.io/2018/08/07/css-GPU加速/</id>
    <published>2018-08-07T08:31:13.000Z</published>
    <updated>2018-07-28T12:58:04.000Z</updated>
    
    <content type="html"><![CDATA[<p>我们可以在浏览器中用css开启硬件加速，使GPU (Graphics Processing Unit) 发挥功能，从而提升性能吗？</p><p>现在大多数电脑的显卡都支持硬件加速。鉴于此，我们可以发挥GPU的力量，从而使我们的网站或应用表现的更为流畅。</p><h3 id="在桌面端和移动端用CSS开启硬件加速"><a href="#在桌面端和移动端用CSS开启硬件加速" class="headerlink" title="在桌面端和移动端用CSS开启硬件加速"></a>在桌面端和移动端用CSS开启硬件加速</h3><p>CSS animations, transforms 以及 transitions 不会自动开启GPU加速，而是由浏览器的缓慢的软件渲染引擎来执行。那我们怎样才可以切换到GPU模式呢，很多浏览器提供了某些触发的CSS规则。</p><p>现在，像Chrome, FireFox, Safari, IE9+和最新版本的Opera都支持硬件加速，当它们检测到页面中某个DOM元素应用了某些CSS规则时就会开启，最显著的特征的元素的3D变换。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.cube</span> &#123;</span><br><span class="line">   <span class="attribute">-webkit-transform</span>: <span class="built_in">translate3d</span>(250px,250px,250px)</span><br><span class="line">   <span class="built_in">rotate3d</span>(250px,250px,250px,-120deg)</span><br><span class="line">   <span class="built_in">scale3d</span>(0.5, 0.5, 0.5);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可是在一些情况下，我们并不需要对元素应用3D变换的效果，那怎么办呢？这时候我们可以使用个小技巧“欺骗”浏览器来开启硬件加速。</p><p>虽然我们可能不想对元素应用3D变换，可我们一样可以开启3D引擎。例如我们可以用transform: translateZ(0); 来开启硬件加速 。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.cube</span> &#123;</span><br><span class="line">   <span class="attribute">-webkit-transform</span>: <span class="built_in">translateZ</span>(0);</span><br><span class="line">   <span class="attribute">-moz-transform</span>: <span class="built_in">translateZ</span>(0);</span><br><span class="line">   <span class="attribute">-ms-transform</span>: <span class="built_in">translateZ</span>(0);</span><br><span class="line">   <span class="attribute">-o-transform</span>: <span class="built_in">translateZ</span>(0);</span><br><span class="line">   <span class="attribute">transform</span>: <span class="built_in">translateZ</span>(0);</span><br><span class="line">   <span class="comment">/* Other transform properties here */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 Chrome and Safari中，当我们使用CSS transforms 或者 animations时可能会有页面闪烁的效果，下面的代码可以修复此情况：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.cube</span> &#123;</span><br><span class="line">   <span class="attribute">-webkit-backface-visibility</span>: hidden;</span><br><span class="line">   <span class="attribute">-moz-backface-visibility</span>: hidden;</span><br><span class="line">   <span class="attribute">-ms-backface-visibility</span>: hidden;</span><br><span class="line">   <span class="attribute">backface-visibility</span>: hidden;</span><br><span class="line"> </span><br><span class="line">   <span class="attribute">-webkit-perspective</span>: <span class="number">1000</span>;</span><br><span class="line">   <span class="attribute">-moz-perspective</span>: <span class="number">1000</span>;</span><br><span class="line">   <span class="attribute">-ms-perspective</span>: <span class="number">1000</span>;</span><br><span class="line">   <span class="attribute">perspective</span>: <span class="number">1000</span>;</span><br><span class="line">   <span class="comment">/* Other transform properties here */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在webkit内核的浏览器中，另一个行之有效的方法是</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.cube</span> &#123;</span><br><span class="line">   <span class="attribute">-webkit-transform</span>: <span class="built_in">translate3d</span>(0, 0, 0);</span><br><span class="line">   <span class="attribute">-moz-transform</span>: <span class="built_in">translate3d</span>(0, 0, 0);</span><br><span class="line">   <span class="attribute">-ms-transform</span>: <span class="built_in">translate3d</span>(0, 0, 0);</span><br><span class="line">   <span class="attribute">transform</span>: <span class="built_in">translate3d</span>(0, 0, 0);</span><br><span class="line">  <span class="comment">/* Other transform properties here */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>原生的移动端应用(Native mobile applications)总是可以很好的运用GPU，这是为什么它比网页应用(Web apps)表现更好的原因。硬件加速在移动端尤其有用，因为它可以有效的减少资源的利用(麦时注：移动端本身资源有限)。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>只对我们需要实现动画效果的元素应用以上方法，如果仅仅为了开启硬件加速而随便乱用，那是不明智的。</p><p>小心使用这些方法，如果通过你的测试，结果确是提高了性能，你才可以使用这些方法。使用GPU可能会导致严重的性能问题，因为它增加了内存的使用，而且它会减少移动端设备的电池寿命。</p><p>原文地址：<a href="http://blog.teamtreehouse.com/increase-your-sites-performance-with-hardware-accelerated-css" target="_blank" rel="noopener">http://blog.teamtreehouse.com/increase-your-sites-performance-with-hardware-accelerated-css</a>。</p>]]></content>
    
    <summary type="html">
    
      主要使用transform3D开启，浏览器开启硬件加速在移动端性能提升明显，如果仅仅为了开启硬件加速而随便乱用，那是不明智的。小心使用这些方法，如果通过你的测试，结果确是提高了性能，你才可以使用这些方法。使用GPU可能会导致严重的性能问题，因为它增加了内存的使用，而且它会减少移动端设备的电池寿命。
    
    </summary>
    
      <category term="默认分类" scheme="https://kitions.github.io/categories/%E9%BB%98%E8%AE%A4%E5%88%86%E7%B1%BB/"/>
    
    
      <category term="css" scheme="https://kitions.github.io/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>go接口、指针</title>
    <link href="https://kitions.github.io/2018/07/13/go%20%E6%8E%A5%E5%8F%A3%E6%8C%87%E9%92%88/"/>
    <id>https://kitions.github.io/2018/07/13/go 接口指针/</id>
    <published>2018-07-13T13:56:35.000Z</published>
    <updated>2018-09-03T09:47:29.076Z</updated>
    
    <content type="html"><![CDATA[<p>go 接口</p><ul><li>通过考虑数据类型之间的相同功能来创建抽象，而不是相同字段</li><li><code>interface{}</code> 的值不是任意类型，而是 <code>interface{}</code> 类型</li><li>接口包含两个字的大小，类似于 <code>(type, value)</code> </li><li><p>函数可以接受 <code>interface{}</code> 作为参数，但最好不要返回 <code>interface{}</code> </p></li><li><p>指针类型可以调用其所指向的值的方法，反过来不可以</p></li><li><p>函数中的参数甚至接受者都是通过值传递</p></li><li><p>一个接口的值就是就是接口而已，跟指针没什么关系</p></li><li><p>如果你想在方法中修改指针所指向的值，使用 <code>*</code> 操作符</p></li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"><span class="keyword">type</span> LessAdder <span class="keyword">interface</span> &#123;</span><br><span class="line">    Less(INTEGER) <span class="keyword">bool</span></span><br><span class="line">    Add(INTEGER)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">type</span> INTEGER <span class="keyword">int</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(a INTEGER)</span> <span class="title">Less</span><span class="params">(b INTEGER)</span> <span class="title">bool</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> a &lt; b</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(a *INTEGER)</span> <span class="title">Add</span><span class="params">(b INTEGER)</span></span> &#123; </span><br><span class="line">    fmt.Println(*a)   <span class="comment">//10</span></span><br><span class="line">    fmt.Println(b)  <span class="comment">// 40</span></span><br><span class="line">    *a += b</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> a INTEGER = <span class="number">10</span></span><br><span class="line">    <span class="keyword">var</span> b LessAdder = &amp;a</span><br><span class="line">    </span><br><span class="line">    fmt.Println(b.Less(<span class="number">20</span>)) <span class="comment">//true 等价于a.Less(20)</span></span><br><span class="line">    b.Add(<span class="number">40</span>)</span><br><span class="line">    fmt.Println(a) <span class="comment">//50</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"math"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Vertex <span class="keyword">struct</span> &#123;</span><br><span class="line">X, Y <span class="keyword">float64</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(v Vertex)</span> <span class="title">Abs</span><span class="params">()</span> <span class="title">float64</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> math.Sqrt(v.X*v.X + v.Y*v.Y)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(v *Vertex)</span> <span class="title">Scale</span><span class="params">(f <span class="keyword">float64</span>)</span></span> &#123;</span><br><span class="line">v.X = v.X * f</span><br><span class="line">v.Y = v.Y * f</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">v := Vertex&#123;<span class="number">3</span>, <span class="number">4</span>&#125;</span><br><span class="line">v.Scale(<span class="number">10</span>)   <span class="comment">//去掉这一行 5</span></span><br><span class="line">fmt.Println(v.Abs())   <span class="comment">//50</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://tour.golang.org/methods/6" target="_blank" rel="noopener">https://tour.golang.org/methods/6</a></p>]]></content>
    
    <summary type="html">
    
      如果你想在方法中修改指针所指向的值，使用 * 操作符
    
    </summary>
    
      <category term="默认分类" scheme="https://kitions.github.io/categories/%E9%BB%98%E8%AE%A4%E5%88%86%E7%B1%BB/"/>
    
    
      <category term="go" scheme="https://kitions.github.io/tags/go/"/>
    
  </entry>
  
  <entry>
    <title>go-fmt包之格式占位符</title>
    <link href="https://kitions.github.io/2018/07/12/go%20fmt%E5%8D%A0%E4%BD%8D%E7%AC%A6/"/>
    <id>https://kitions.github.io/2018/07/12/go fmt占位符/</id>
    <published>2018-07-12T03:13:11.000Z</published>
    <updated>2018-09-03T09:44:48.241Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 定义示例类型和变量</span><br><span class="line">type Human struct &#123;</span><br><span class="line">    Name string</span><br><span class="line">&#125;</span><br><span class="line">var people = Human&#123;Name:&quot;zhangsan&quot;&#125;</span><br></pre></td></tr></table></figure><h4 id="普通占位符"><a href="#普通占位符" class="headerlink" title="普通占位符"></a>普通占位符</h4><table><thead><tr><th style="text-align:center">占位符</th><th style="text-align:left">说明</th><th>举例</th><th>输出</th></tr></thead><tbody><tr><td style="text-align:center">%v</td><td style="text-align:left">响应值的默认格式</td><td>Printf(“%v”, people)</td><td>{zhangsan}</td></tr><tr><td style="text-align:center">%+v</td><td style="text-align:left">打印结构体时，会添加字段名</td><td>Printf(“%+v”, people)</td><td>{Name:zhangsan}</td></tr><tr><td style="text-align:center">%#v</td><td style="text-align:left">相应值的GO语法表示</td><td>Printf(“#v”, people)</td><td>main.Human{Name:zhangsan}</td></tr><tr><td style="text-align:center">%T</td><td style="text-align:left">相应值的类型的GO语法表示</td><td>Printf(“%T”,people)</td><td>main.Human</td></tr><tr><td style="text-align:center">%%</td><td style="text-align:left">字面上的百分号，并非值的占位符</td><td>Printf(“%%”)</td><td>%</td></tr></tbody></table><h4 id="布尔占位符"><a href="#布尔占位符" class="headerlink" title="布尔占位符"></a>布尔占位符</h4><table><thead><tr><th style="text-align:center">占位符</th><th style="text-align:left">说明</th><th>举例</th><th>输出</th></tr></thead><tbody><tr><td style="text-align:center">%t</td><td style="text-align:left">true或false</td><td>Printf(“%t”, true)</td><td>true</td></tr></tbody></table><h4 id="整数占位符"><a href="#整数占位符" class="headerlink" title="整数占位符"></a>整数占位符</h4><table><thead><tr><th style="text-align:center">占位符</th><th style="text-align:left">说明</th><th>举例</th><th>输出</th></tr></thead><tbody><tr><td style="text-align:center">%b</td><td style="text-align:left">二进制表示</td><td>Printf(“%b”, 5)</td><td>101</td></tr><tr><td style="text-align:center">%c</td><td style="text-align:left">相应Unicode码点所表示的字符</td><td>Printf(“%c”, 0x4E2D)</td><td>中</td></tr><tr><td style="text-align:center">%d</td><td style="text-align:left">十进制表示</td><td>Printf(“%d”, 0x12)</td><td>18</td></tr><tr><td style="text-align:center">%o</td><td style="text-align:left">八进制</td><td>Printf(“%d”, 10)</td><td>12</td></tr><tr><td style="text-align:center">%q</td><td style="text-align:left">单引号围绕的字符字面值，由Go语法安全地转义</td><td>Printf(“%q”, 0x4E2D)</td><td>‘中’</td></tr><tr><td style="text-align:center">%x</td><td style="text-align:left">十六进制表示，字母形式为小写 a-f</td><td>Printf(“%x”, 13)</td><td>d</td></tr><tr><td style="text-align:center">%X</td><td style="text-align:left">十六进制表示，字母形式为大写 A-F</td><td>Printf(“%x”, 13)</td><td>D</td></tr><tr><td style="text-align:center">%U</td><td style="text-align:left">Unicode格式：U+1234，等同于 “U+%04X”</td><td>Printf(“%U”, 0x4E2D)</td><td>U+4E2D</td></tr></tbody></table><h4 id="浮点数和复数的组成部分（实部和虚部）"><a href="#浮点数和复数的组成部分（实部和虚部）" class="headerlink" title="浮点数和复数的组成部分（实部和虚部）"></a>浮点数和复数的组成部分（实部和虚部）</h4><p>%e 和 %f 的默认精度为6</p><table><thead><tr><th style="text-align:center">占位符</th><th style="text-align:left">说明</th><th>举例</th><th>输出</th></tr></thead><tbody><tr><td style="text-align:center">%b</td><td style="text-align:left"></td><td></td><td></td></tr><tr><td style="text-align:center">%e</td><td style="text-align:left">科学计数法，例如 -1234.456e+78</td><td>Printf(“%e”, 10.2)</td><td>1.020000e+01</td></tr><tr><td style="text-align:center">%E</td><td style="text-align:left">科学计数法，例如 -1234.456E+78</td><td>Printf(“%e”, 10.2)</td><td>1.020000E+01</td></tr><tr><td style="text-align:center">%f</td><td style="text-align:left">有小数点而无指数，例如 123.456</td><td>Printf(“%f”, 10.2)</td><td>10.200000</td></tr><tr><td style="text-align:center">%g</td><td style="text-align:left">根据情况选择 %e 或 %f 以产生更紧凑的（无末尾的0）</td><td>Printf(“%g”, 10.20)</td><td>10.2</td></tr><tr><td style="text-align:center">%G</td><td style="text-align:left">根据情况选择 %E 或 %f 以产生更紧凑的（无末尾的0）</td><td>Printf(“%G”, 10.20+2i)</td><td>(10.2+2i)</td></tr></tbody></table><h4 id="字符串与字节切片"><a href="#字符串与字节切片" class="headerlink" title="字符串与字节切片"></a>字符串与字节切片</h4><table><thead><tr><th style="text-align:center">占位符</th><th style="text-align:left">说明</th><th>举例</th><th>输出</th></tr></thead><tbody><tr><td style="text-align:center">%s</td><td style="text-align:left">输出字符串表示（string类型或[]byte）</td><td>Printf(“%s”, []byte(“Go语言”))</td><td>Go语言</td></tr><tr><td style="text-align:center">%q</td><td style="text-align:left">双引号围绕的字符串，由Go语法安全地转义</td><td>Printf(“%q”, “Go语言”)</td><td>“Go语言”</td></tr><tr><td style="text-align:center">%x</td><td style="text-align:left">十六进制，小写字母，每字节两个字符</td><td>Printf(“%x”, “golang”)</td><td>676f6c616e67</td></tr><tr><td style="text-align:center">%X</td><td style="text-align:left">十六进制，大写字母，每字节两个字符</td><td>Printf(“%X”, “golang”)</td><td>676F6C616E67</td></tr></tbody></table><h4 id="指针"><a href="#指针" class="headerlink" title="指针"></a>指针</h4><table><thead><tr><th style="text-align:center">占位符</th><th style="text-align:left">说明</th><th>举例</th><th>输出</th></tr></thead><tbody><tr><td style="text-align:center">%p</td><td style="text-align:left">十六进制表示，前缀 0x</td><td>Printf(“%p”, &amp;people)</td><td>0x4f57f0</td></tr></tbody></table><h4 id="其他标记"><a href="#其他标记" class="headerlink" title="其他标记"></a>其他标记</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">占位符      说明                             举例          输出</span><br><span class="line">+      总打印数值的正负号；对于%q（%+q）保证只输出ASCII编码的字符。 </span><br><span class="line">                                           Printf(<span class="string">"%+q"</span>, <span class="string">"中文"</span>)  <span class="string">"\u4e2d\u6587"</span></span><br><span class="line">-      在右侧而非左侧填充空格（左对齐该区域）</span><br><span class="line">#      备用格式：为八进制添加前导 <span class="number">0</span>（%#o）      Printf(<span class="string">"%#U"</span>, <span class="string">'中'</span>)      U+<span class="number">4E2</span>D</span><br><span class="line">       为十六进制添加前导 <span class="number">0</span>x（%#x）或 <span class="number">0</span>X（%#X），为 %p（%#p）去掉前导 <span class="number">0</span>x；</span><br><span class="line">       如果可能的话，%q（%#q）会打印原始 （即反引号围绕的）字符串；</span><br><span class="line">       如果是可打印字符，%U（%#U）会写出该字符的</span><br><span class="line">       Unicode 编码形式（如字符 x 会被打印成 U+<span class="number">0078</span> <span class="string">'x'</span>）。</span><br><span class="line"><span class="string">' '</span>    (空格)为数值中省略的正负号留出空白（% d）；</span><br><span class="line">       以十六进制（% x, % X）打印字符串或切片时，在字节之间用空格隔开</span><br><span class="line"><span class="number">0</span>      填充前导的<span class="number">0</span>而非空格；对于数字，这会将填充移到正负号之后</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      fmt类似于c中的printf和scanf
    
    </summary>
    
      <category term="默认分类" scheme="https://kitions.github.io/categories/%E9%BB%98%E8%AE%A4%E5%88%86%E7%B1%BB/"/>
    
    
      <category term="go" scheme="https://kitions.github.io/tags/go/"/>
    
  </entry>
  
  <entry>
    <title>typescript之类、接口、定义</title>
    <link href="https://kitions.github.io/2018/07/10/typescript%E4%B9%8B%E7%B1%BB%E3%80%81%E6%8E%A5%E5%8F%A3%E3%80%81%E5%AE%9A%E4%B9%89/"/>
    <id>https://kitions.github.io/2018/07/10/typescript之类、接口、定义/</id>
    <published>2018-07-10T04:44:23.000Z</published>
    <updated>2018-09-03T09:46:43.918Z</updated>
    
    <content type="html"><![CDATA[<h3 id="类"><a href="#类" class="headerlink" title="类"></a>类</h3><pre><code>TS引入了类的概念，可以看做是一个语法糖。通过class关键字，可以定义类</code></pre><p>定义一个类</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> Student &#123;</span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params">x, y</span>) &#123;</span><br><span class="line">    <span class="keyword">this</span>.x = x;</span><br><span class="line">    <span class="keyword">this</span>.y = y;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  toString() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'('</span> + <span class="keyword">this</span>.x + <span class="string">', '</span> + <span class="keyword">this</span>.y + <span class="string">')'</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> s = <span class="keyword">new</span> Student(<span class="string">'wang'</span>,<span class="string">'li'</span>)</span><br></pre></td></tr></table></figure><ol><li>类和模块内部默认采用严格模式</li><li><code>constructor</code>方法是类的默认方法，通过new生成对象实例时，自动调用该方法。一个类必须有constuctor 方法，如果没有显式定义，一个空的constuctor方法会被默认添加。</li><li>必须使用new命令来调用class</li><li>类不存在变量提升，只有先声明类，才能使用类。</li><li>类的方法内部如果含有this，它默认指向类的实例。但是如果我们单独将其方法提取出来，this值可能会指向当前运行的环境。这个时候可以用箭头函数（this值指向初始化的函数）</li></ol><h3 id="public、private、protected和readonly"><a href="#public、private、protected和readonly" class="headerlink" title="public、private、protected和readonly"></a><strong>public、private、protected和readonly</strong></h3><p>   <code>public</code>、<code>private</code>、<code>protected</code>和<code>readonly</code>都是类的成员（属性）修饰符  </p><ol><li><p><strong>public</strong></p><pre><code>在TS里，成员都默认为`public`。被`public`修饰的属性，我们在类的内外都可以自由访问到这些被定义的属性。</code></pre></li></ol><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> Animal &#123;</span><br><span class="line">    <span class="keyword">public</span> name: <span class="built_in">string</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">constructor</span>(<span class="params">theName: <span class="built_in">string</span></span>) &#123; <span class="keyword">this</span>.name = theName; &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> <span class="keyword">new</span> Animal(<span class="string">"Cat"</span>).name;<span class="comment">//Cat</span></span><br></pre></td></tr></table></figure><ol start="2"><li><p><strong>private</strong></p><p>当成员被标记成private时，它就不能在声明它的类的外部访问。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> Animal &#123;</span><br><span class="line">     <span class="keyword">private</span> name: <span class="built_in">string</span>;</span><br><span class="line">     <span class="keyword">constructor</span>(<span class="params">theName: <span class="built_in">string</span></span>) &#123; <span class="keyword">this</span>.name = theName; &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> <span class="keyword">new</span> Animal(<span class="string">"Cat"</span>).name;<span class="comment">//Error!: Property 'name' is private and only access</span></span><br></pre></td></tr></table></figure></li><li><p><strong>protected</strong> </p><p><code>protected</code> 修饰符与 <code>private</code> 修饰符的行为很相似，但有一点不同，<code>protected</code> 成员在派生类中仍然可以访问。  使用 <code>private</code> 修饰的父类成员，派生类无法访问。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> Person &#123;</span><br><span class="line">    <span class="keyword">private</span> name: <span class="built_in">string</span>; <span class="comment">//如果这儿是protected就可以</span></span><br><span class="line">    <span class="keyword">constructor</span>(<span class="params">name: <span class="built_in">string</span></span>) &#123; <span class="keyword">this</span>.name = name; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Employee <span class="keyword">extends</span> Person &#123;</span><br><span class="line">    <span class="keyword">constructor</span>(<span class="params">name: <span class="built_in">string</span></span>) &#123; <span class="keyword">super</span>(name)&#125;</span><br><span class="line">    <span class="keyword">public</span> sayName() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.name;<span class="comment">//ERROR!: Property 'name' is private and only accessible within class 'Person'.</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> xiaoming = <span class="keyword">new</span> Employee(<span class="string">"xiaoming"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(xiaoming.sayName());</span><br></pre></td></tr></table></figure></li></ol><ol start="4"><li><p><strong>readonly修饰符</strong>  </p><p> <code>readonly</code> 关键字与 <code>public</code> 、 <code>private</code> 和 <code>protected</code> 不一样，它修饰的不是成员的访问权限，而是成员的再赋值权限。 </p><p>​        使用<code>readonly</code> 关键字将属性设置为只读的。 <strong>只读属性必须在声明时或构造函数里被初始化。</strong></p></li></ol><h3 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h3><blockquote><p>在面向对象的语言中，术语 <code>interface</code> 经常被用来定义一个不包含数据和逻辑代码但是用函数签名定义了行为的抽象类型。</p></blockquote><pre><code>但是对于TS来说，接口更重要的意义是对值所具有的 *结构* 进行类型检查。  接口根据属性划分，可以划分成三类，一种是**必选属性**，另一种是**可选属性**，还有一种就是**只读属性**。</code></pre><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> AnimalVaule&#123;</span><br><span class="line">    name?:<span class="built_in">string</span>;</span><br><span class="line">    eat:<span class="built_in">string</span>;</span><br><span class="line">    lifestyle?:<span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Animal</span>(<span class="params">animal:AnimalVaule</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name=animal.name;</span><br><span class="line">    <span class="keyword">this</span>.eat=animal.eat;</span><br><span class="line">    <span class="keyword">this</span>.lifestyle=animal.lifestyle;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> cat=<span class="keyword">new</span> Animal(&#123;eat:<span class="string">"食肉动物"</span>,lifestyle:<span class="string">"昼伏夜出"</span>&#125;);</span><br></pre></td></tr></table></figure><p><strong>可选属性</strong> 名字定义的后面加一个?符号</p><p>可选属性的好处： 可以对可能存在的属性进行预定义；可以捕获引用了不存在的属性时的错误。</p><p>只读属性 你可以在属性名前用<code>readonly</code>来指定只读属性:</p><p>做为变量使用的话用<code>const</code>，  做为属性则使用<code>readonly</code>。</p><pre><code>接口不仅仅能描述对象的属性，还能描述**函数类型**，**可索引类型**和**类类型**。（blur）</code></pre><h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><p>TS允许我们通过<code>extends</code>关键字来 <em>创建子类</em>（实现继承）。  下面这个例子，<code>Dog</code> 类继承自 <code>Animal</code> 类，在<code>Dog</code> 类中我们可以访问父类 <code>Animal</code> 的属性和方法</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> Animal &#123;</span><br><span class="line">    name: <span class="built_in">string</span>;</span><br><span class="line">    <span class="keyword">constructor</span>(<span class="params">theName: <span class="built_in">string</span></span>) &#123; <span class="keyword">this</span>.name = theName; &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> Dog <span class="keyword">extends</span> Animal &#123;</span><br><span class="line">    breed: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Dog(<span class="string">"mydog"</span>).name;<span class="comment">//mydog</span></span><br></pre></td></tr></table></figure><p><strong>注意：</strong>包含构造函数的派生类必须调用<code>super()</code>，它会执行基类的构造方法。</p>]]></content>
    
    <summary type="html">
    
      typescirpt的类 接口  继承
    
    </summary>
    
      <category term="默认分类" scheme="https://kitions.github.io/categories/%E9%BB%98%E8%AE%A4%E5%88%86%E7%B1%BB/"/>
    
    
      <category term="ts" scheme="https://kitions.github.io/tags/ts/"/>
    
  </entry>
  
</feed>
