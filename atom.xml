<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Filip</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://kitions.github.io/"/>
  <updated>2021-04-01T07:48:41.459Z</updated>
  <id>https://kitions.github.io/</id>
  
  <author>
    <name>link</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>ESLint相关 +  prettier</title>
    <link href="https://kitions.github.io/2021/04/01/ESLint%E7%9B%B8%E5%85%B3/"/>
    <id>https://kitions.github.io/2021/04/01/ESLint相关/</id>
    <published>2021-04-01T07:45:55.000Z</published>
    <updated>2021-04-01T07:48:41.459Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ESLint相关"><a href="#ESLint相关" class="headerlink" title="ESLint相关"></a>ESLint相关</h1><p>继承的主要是爱彼迎、eslint推荐、typescript-eslint推荐、react推荐规则，自己改了点小规则。.eslintrc具体细则还不是特别完善。各位大佬使用中发现问题的话，求轻喷。希望大家一起完善。</p><p>目前eslint提醒主要是error，warning，error红色，编译不通过，waring黄色警告，不影响项目编译。有强迫症的人估计一定会改掉。</p><h3 id="1-package-json引入"><a href="#1-package-json引入" class="headerlink" title="1 package.json引入"></a>1 package.json引入</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">"@typescript-eslint/eslint-plugin": "^4.16.1",</span><br><span class="line">"@typescript-eslint/parser": "^4.16.1",</span><br><span class="line">"eslint": "^7.21.0",</span><br><span class="line">"eslint-config-airbnb": "^18.2.1",</span><br><span class="line">"eslint-config-prettier": "^8.1.0",</span><br><span class="line">"eslint-plugin-import": "^2.22.1",</span><br><span class="line">"eslint-plugin-jsx-a11y": "^6.4.1",</span><br><span class="line">"eslint-plugin-react": "^7.22.0",</span><br><span class="line">"husky": "^5.1.3",</span><br><span class="line">"prettier": "^2.2.1"</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">// 规则见附</span><br><span class="line">&quot;scripts&quot;: &#123;</span><br><span class="line">&quot;lint&quot;: &quot;eslint --ignore-path .eslintignore . --fix&quot;,</span><br><span class="line">&quot;lint_quiet&quot;: &quot;eslint --quiet  --ignore-path .eslintignore . --fix&quot;,</span><br><span class="line">&quot;fix&quot;: &quot;npx prettier --write .&quot;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-eslintrc-js"><a href="#2-eslintrc-js" class="headerlink" title="2 .eslintrc.js"></a>2 .eslintrc.js</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">env: &#123;</span><br><span class="line">browser: <span class="literal">true</span>,</span><br><span class="line">es2021: <span class="literal">true</span>,</span><br><span class="line">node: <span class="literal">true</span>,</span><br><span class="line">&#125;,</span><br><span class="line">extends: [</span><br><span class="line"><span class="string">"prettier"</span>,</span><br><span class="line"><span class="string">"airbnb"</span>,</span><br><span class="line"><span class="string">"eslint:recommended"</span>,</span><br><span class="line"><span class="string">"plugin:react/recommended"</span>,</span><br><span class="line"><span class="string">"plugin:@typescript-eslint/recommended"</span>,</span><br><span class="line">],</span><br><span class="line">settings: &#123;</span><br><span class="line"><span class="string">"import/extensions"</span>: [</span><br><span class="line"><span class="string">"2"</span>,</span><br><span class="line"><span class="string">"ignorePackages"</span>,</span><br><span class="line">&#123;</span><br><span class="line">ts: <span class="string">"never"</span>,</span><br><span class="line">tsx: <span class="string">"never"</span>,</span><br><span class="line">json: <span class="string">"never"</span>,</span><br><span class="line">js: <span class="string">"never"</span>,</span><br><span class="line">&#125;,</span><br><span class="line">],</span><br><span class="line">&#125;,</span><br><span class="line">parser: <span class="string">"@typescript-eslint/parser"</span>,</span><br><span class="line">parserOptions: &#123;</span><br><span class="line">ecmaFeatures: &#123;</span><br><span class="line">jsx: <span class="literal">true</span>,</span><br><span class="line">&#125;,</span><br><span class="line">ecmaVersion: <span class="number">2018</span>,</span><br><span class="line">&#125;,</span><br><span class="line">plugins: [</span><br><span class="line"><span class="string">"react"</span>,</span><br><span class="line"><span class="string">"@typescript-eslint"</span>,</span><br><span class="line">],</span><br><span class="line">rules: &#123;</span><br><span class="line">indent: [<span class="string">"error"</span>, <span class="string">"tab"</span>], <span class="comment">// todo</span></span><br><span class="line"><span class="string">"no-tabs"</span>: <span class="number">0</span>,</span><br><span class="line"><span class="string">"quote-props"</span>: <span class="number">0</span>,</span><br><span class="line">semi: <span class="number">0</span>,</span><br><span class="line">quotes: <span class="number">0</span>,</span><br><span class="line"><span class="string">"comma-dangle"</span>: [<span class="string">"error"</span>, <span class="string">"never"</span>],</span><br><span class="line"><span class="string">"arrow-parens"</span>: <span class="number">0</span>,</span><br><span class="line"><span class="string">"react/react-in-jsx-scope"</span>: <span class="number">0</span>,</span><br><span class="line"><span class="string">"react/jsx-indent"</span>: <span class="number">0</span>,</span><br><span class="line"><span class="string">"react/jsx-indent-props"</span>: [<span class="number">2</span>, <span class="string">"tab"</span>],</span><br><span class="line"><span class="string">"react/jsx-filename-extension"</span>: <span class="number">0</span>,</span><br><span class="line"><span class="string">"react/jsx-props-no-spreading"</span>: <span class="number">0</span>,</span><br><span class="line"><span class="string">"react/jsx-no-target-blank"</span>: <span class="number">0</span>,</span><br><span class="line"><span class="string">"import/no-unresolved"</span>: <span class="number">0</span>,</span><br><span class="line"><span class="string">"import/extensions"</span>: <span class="number">0</span>,</span><br><span class="line"><span class="string">"@typescript-eslint/no-var-requires"</span>: <span class="number">0</span>,</span><br><span class="line"><span class="string">"global-require"</span>: <span class="number">0</span>,</span><br><span class="line"><span class="string">"no-nested-ternary"</span>: <span class="number">0</span>,</span><br><span class="line"><span class="string">"max-classes-per-file"</span>: <span class="number">0</span>, <span class="comment">// 一个页面最多一个class</span></span><br><span class="line"><span class="string">"no-plusplus"</span>: <span class="number">0</span>, <span class="comment">// 允许使用++ --</span></span><br><span class="line"><span class="string">"no-new"</span>: <span class="number">0</span>,</span><br><span class="line"><span class="string">"no-useless-constructor"</span>: <span class="number">0</span>, <span class="comment">// constructor允许&#123;&#125;</span></span><br><span class="line"><span class="string">"no-use-before-define"</span>: <span class="number">1</span>,</span><br><span class="line"><span class="string">"no-underscore-dangle"</span>: <span class="number">0</span>, <span class="comment">// _</span></span><br><span class="line"><span class="string">"no-param-reassign"</span>: <span class="number">1</span>, <span class="comment">// 形参赋值</span></span><br><span class="line"><span class="string">"import/prefer-default-export"</span>: <span class="number">0</span>, <span class="comment">// 单个方法、类是否默认导出</span></span><br><span class="line">camelcase: <span class="number">1</span>, <span class="comment">// todo 是否驼峰</span></span><br><span class="line"><span class="string">"no-restricted-syntax"</span>: <span class="number">0</span>, <span class="comment">// 不受限制的语法</span></span><br><span class="line"><span class="string">"guard-for-in"</span>: <span class="number">1</span>, <span class="comment">// 判断Object.prototype.hasOwnProperty.call(foo, key)</span></span><br><span class="line"><span class="string">"max-len"</span>: [<span class="number">1</span>, &#123; <span class="attr">code</span>: <span class="number">200</span> &#125;],</span><br><span class="line"><span class="string">"no-return-await"</span>: <span class="number">0</span>,</span><br><span class="line"><span class="string">"new-cap"</span>: <span class="number">1</span>,</span><br><span class="line"><span class="string">"jsx-a11y/label-has-associated-control"</span>: <span class="number">0</span>,</span><br><span class="line"><span class="string">"jsx-a11y/anchor-is-valid"</span>: <span class="number">0</span>,</span><br><span class="line"><span class="string">"jsx-a11y/click-events-have-key-events"</span>: <span class="number">0</span>, <span class="comment">// 关爱残障人士标签 强制执行onClick是伴随着以下的至少一个：onKeyUp，onKeyDown，onKeyPress</span></span><br><span class="line"><span class="string">"jsx-a11y/no-static-element-interactions"</span>: <span class="number">0</span>, <span class="comment">// 关爱残障人士标签 span div等 加role</span></span><br><span class="line"><span class="string">"jsx-a11y/no-noninteractive-element-interactions"</span>: <span class="number">0</span>, <span class="comment">// 关爱残障人士标签 非交互元件</span></span><br><span class="line"><span class="string">"no-script-url"</span>: <span class="number">1</span>, <span class="comment">// javascript:;</span></span><br><span class="line"><span class="string">"class-methods-use-this"</span>: <span class="number">0</span>,</span><br><span class="line">eqeqeq: <span class="number">1</span>, <span class="comment">// todo ===</span></span><br><span class="line"><span class="string">"@typescript-eslint/ban-types"</span>: <span class="number">1</span>, <span class="comment">// Object &#123;&#125;等</span></span><br><span class="line"><span class="string">"react/display-name"</span>: <span class="number">0</span>, <span class="comment">// display-name</span></span><br><span class="line"><span class="string">"react/prop-types"</span>: <span class="number">0</span>, <span class="comment">// .propTypes</span></span><br><span class="line"><span class="string">"react/destructuring-assignment"</span>: <span class="number">1</span>, <span class="comment">// todo props state解构</span></span><br><span class="line"><span class="string">"react/no-array-index-key"</span>: <span class="number">1</span>,</span><br><span class="line"><span class="string">"no-unused-expressions"</span>: [<span class="string">"error"</span>, &#123; <span class="attr">allowShortCircuit</span>: <span class="literal">true</span> &#125;],</span><br><span class="line"><span class="string">"consistent-return"</span>: <span class="number">1</span>,</span><br><span class="line"><span class="string">"no-prototype-builtins"</span>: <span class="number">1</span>, <span class="comment">//  bad: foo.hasOwnProperty("bar") good:Object.prototype.hasOwnProperty.call(foo, "bar");</span></span><br><span class="line"><span class="string">"no-shadow"</span>: <span class="number">1</span>,</span><br><span class="line"><span class="string">"@typescript-eslint/no-empty-function"</span>: <span class="number">1</span>,</span><br><span class="line"><span class="string">"no-async-promise-executor"</span>: <span class="number">0</span>, <span class="comment">// 禁止将异步功能用作Promise执行器</span></span><br><span class="line"><span class="string">"@typescript-eslint/no-empty-interface"</span>: <span class="number">0</span>,</span><br><span class="line"><span class="string">"@typescript-eslint/no-this-alias"</span>: <span class="number">1</span></span><br><span class="line">&#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="3-eslintignore-和-prettierignore"><a href="#3-eslintignore-和-prettierignore" class="headerlink" title="3 .eslintignore 和 .prettierignore"></a>3 .eslintignore 和 .prettierignore</h3><p>看诸位项目</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">/node_modules/</span><br><span class="line">/src/_next/</span><br><span class="line">/src/dist/</span><br><span class="line">/src/<span class="keyword">static</span>/</span><br><span class="line">  </span><br><span class="line">  or</span><br><span class="line"></span><br><span class="line">/node_modules/</span><br><span class="line">/src/_next/</span><br><span class="line">/src/dist/</span><br><span class="line">/src/<span class="keyword">static</span>/</span><br><span class="line">/src/server/proto</span><br></pre></td></tr></table></figure><h3 id="4-prettier-config-js"><a href="#4-prettier-config-js" class="headerlink" title="4 prettier.config.js"></a>4 prettier.config.js</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line"><span class="string">"printWidth"</span>: <span class="number">80</span>,</span><br><span class="line"><span class="string">"tabWidth"</span>: <span class="number">4</span>,</span><br><span class="line"><span class="string">"singleQuote"</span>: <span class="literal">false</span>,</span><br><span class="line"><span class="string">"semi"</span>: <span class="literal">true</span>,</span><br><span class="line"><span class="string">"trailingComma"</span>: <span class="string">"none"</span>,</span><br><span class="line"><span class="string">"bracketSpacing"</span>: <span class="literal">true</span>,</span><br><span class="line"><span class="string">"arrowParens"</span>: <span class="string">"avoid"</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-editorconfig"><a href="#5-editorconfig" class="headerlink" title="5 .editorconfig"></a>5 .editorconfig</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"># http://editorconfig.org</span><br><span class="line"></span><br><span class="line">root = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">[*]</span><br><span class="line">charset = utf<span class="number">-8</span></span><br><span class="line">indent_style = tab</span><br><span class="line">insert_final_newline = <span class="literal">true</span></span><br><span class="line">trim_trailing_whitespace = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">[*.md]</span><br><span class="line">max_line_length = off</span><br></pre></td></tr></table></figure><h3 id="6-Vscode插件"><a href="#6-Vscode插件" class="headerlink" title="6. Vscode插件"></a>6. Vscode插件</h3><p><code>Prettier Eslint</code> 规则会使用eslint中的规则，此插件仅在eslint项目下格式化有效。</p><p><code>Prettier - Code formatter</code> 会使用prettier.config.js的规则</p><p>依据个人需求，选择是否保存并格式化</p><p><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gomwg68xzpj30ay03l0tc.jpg" alt="image-20210317144545343"></p><p><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gomwgmfjo7j30ai01vaa5.jpg" alt="image-20210317144611017"></p><p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gosszl3ze5j30cv03ddg5.jpg" alt="image-20210322171921452"></p><p><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gomwh86scbj30n0096tb3.jpg" alt="image-20210317144645630"></p><h3 id="7-npm-run-fix-amp-amp-npm-run-lint"><a href="#7-npm-run-fix-amp-amp-npm-run-lint" class="headerlink" title="7. npm run fix &amp;&amp; npm run lint"></a>7. npm run fix &amp;&amp; npm run lint</h3><p>第一次引入项目先执行npm run fix，目的是统一项目中所有单双引号，缩进，格式。后执行npm run lint 。npm run lint(eslint –fix)对一些缩进格式不是特别敏感，所以先执行一遍fix，再执行lint。 以后项目可不再执行npm run fix，编辑提交时只执行npm run lint。</p><p>npm run fix 在你引入到现有项目后执行，帮你把代码格式化到prettier的配置</p><p>npm run lint  带了<code>--fix</code>，它会格式化代码，会修复一些规则。</p><p>引入老项目后。发现有点奔溃😿</p><p><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gomwjnrwyoj304002zdfu.jpg" alt="image-20210317144905929"></p><p><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gomwxinde9j307w0pedhf.jpg" alt="image-20210317150225545"></p><p><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gomwx1h4tnj30ov0hn45i.jpg" alt="image-20210317150157795"></p><p><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gomwhtbic7j30m70idjv6.jpg" alt="image-20210317144719347"></p><p>经过修复后</p><p><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gp409inu2kj30kb088myp.jpg" alt="image-20210401095218422"></p><h3 id="8-husky"><a href="#8-husky" class="headerlink" title="8 husky"></a>8 husky</h3><p><a href="https://github.com/typicode/husky" target="_blank" rel="noopener">husky</a>一个Git Hook 工具，<a href="https://typicode.github.io/husky/#/" target="_blank" rel="noopener">文档</a> 将其安装到所在仓库的过程中它会自动在 .git/ 目录下增加相应的钩子实现在 pre-commit 阶段就执行一系列流程保证每一个 commit 的正确性。</p><p><code>npm install husky --save-dev &amp;&amp; npx husky init</code></p><p>or</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">npm install husky --save-dev  ||  yarn add husky --save-dev</span><br><span class="line"></span><br><span class="line">npx husky install || yarn husky install</span><br><span class="line">  或者也可以在项目内容install</span><br><span class="line">  // package.json</span><br><span class="line">  &#123;</span><br><span class="line">    &quot;scripts&quot;: &#123;</span><br><span class="line">      &quot;prepare&quot;: &quot;husky install&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p><img src="/Users/linkai/Library/Application Support/typora-user-images/image-20210317150442297.png" alt="image-20210317150442297"></p><p>添加钩子</p><p><code>npx husky add .husky/pre-commit &quot;npm run lint&quot;</code></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line">. <span class="string">"<span class="variable">$(dirname "$0")</span>/_/husky.sh"</span></span><br><span class="line"></span><br><span class="line">    npm run lint</span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gomwtcpi8hj306t02fwef.jpg" alt="image-20210317145824823"></p><h3 id="9-改代码"><a href="#9-改代码" class="headerlink" title="9 改代码"></a>9 改代码</h3><p>come on！</p><h2 id="附"><a href="#附" class="headerlink" title="附"></a>附</h2><h3 id="1-Eslint常用配置项"><a href="#1-Eslint常用配置项" class="headerlink" title="1. Eslint常用配置项"></a>1. Eslint常用配置项</h3><p>加入script 。具体内部配置诸位酌情使用，不常用的见<a href="https://eslint.bootcss.com/docs/user-guide/command-line-interface" target="_blank" rel="noopener">文档</a></p><ul><li><code>.</code>代表的是所有文件。也可以写具体的目录，比如<code>pages</code>，<code>utils</code>等</li><li><code>--fix</code>修复文件，剩下的未修复的问题才会输出到命令行</li><li><code>--fix-dry-run</code>：该选项与 <code>--fix</code> 有相同的效果，唯一一点不同是，修复不会保存到文件系统中。</li><li><code>--ext</code>：可以指定在指定目录中搜索JavaScript文件时，ESLint将使用哪些文件扩展名。默认扩展名为<code>.js</code>。</li><li><code>--global</code>：用于定义全局变量。任何指定的全局变量默认是只读的，在变量名字后加上 <code>:true</code> 后会使它变为可写。要指定多个变量，使用逗号分隔它们，或多次使用这个选项。</li><li><code>--quiet</code>只会报告错误error</li><li><code>--max-warnings</code>指定一个警告的阈值,当你的项目中有太多违反规则的警告时，这个阈值被用来强制 ESLint 以错误状态退出  示例:<code>eslint --max-warnings 10 file.js</code></li><li><code>-o</code>将报告写到一个文件。示例 :<code>eslint -o ./test/test.html</code></li><li><code>--cache</code>缓存默认被存储在 <code>.eslintcache</code>启用这个选项可以显著改善 ESLint 的运行时间，确保只对有改变的文件进行检测。<br><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gomw6os2fmj30x80g87a8.jpg"></li></ul><h3 id="2-Exit-codes"><a href="#2-Exit-codes" class="headerlink" title="2. Exit codes"></a>2. Exit codes</h3><p> 当检测完毕后，eslint会有状态码提醒</p><ul><li><code>0</code>: 检测成功，没有错误。如果 <code>--max-warnings</code> 标志被设置为 <code>n</code>，那么警告数量最多为<code>n</code>。</li><li><code>1</code>: 检测成功，并且至少有一个错误，或者警告多于 <code>--max-warnings</code> 选项所允许的警告。</li><li><code>2</code>: 由于配置问题或内部错误，检测未能成功。</li></ul><h3 id="3-忽略相关"><a href="#3-忽略相关" class="headerlink" title="3. 忽略相关"></a>3. 忽略相关</h3><ol><li>在文件头部添加规则，整个文件忽略</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* eslint-disable */</span></span><br><span class="line"><span class="comment">// 代码开始位置</span></span><br></pre></td></tr></table></figure><ol start="2"><li>临时禁止</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* eslint-disable */</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'hello'</span>);</span><br><span class="line"><span class="comment">/* eslint-enable */</span></span><br></pre></td></tr></table></figure><ol start="3"><li>对指定规则忽略</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* eslint-disable no-alert, no-console */</span></span><br><span class="line">alert(<span class="string">'foo'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'bar'</span>);</span><br><span class="line"><span class="comment">/* eslint-enable no-alert, no-console */</span></span><br></pre></td></tr></table></figure><ol start="4"><li>指定行忽略</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">alert(<span class="string">'foo'</span>); <span class="comment">// eslint-disable-line</span></span><br><span class="line"><span class="comment">// eslint-disable-next-line</span></span><br><span class="line">alert(<span class="string">'foo'</span>);</span><br></pre></td></tr></table></figure><ol start="5"><li>指定行禁用某个规则</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">alert(<span class="string">'foo'</span>); <span class="comment">// eslint-disable-line no-alert</span></span><br><span class="line"><span class="comment">// eslint-disable-next-line no-alert</span></span><br><span class="line">alert(<span class="string">'foo'</span>);</span><br></pre></td></tr></table></figure><ol start="6"><li>指定行禁用多个规则</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">alert(<span class="string">'foo'</span>); <span class="comment">// eslint-disable-line no-alert, quotes, semi</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">// eslint-disable-next-line no-alert, quotes, semi</span></span><br><span class="line">alert(<span class="string">'foo'</span>);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      ESLint相关，继承的主要是爱彼迎、eslint推荐、typescript-eslint推荐、React推荐规R，傻瓜式操作步骤，个人实践，可能还存在问题，望多多指教
    
    </summary>
    
      <category term="默认分类" scheme="https://kitions.github.io/categories/%E9%BB%98%E8%AE%A4%E5%88%86%E7%B1%BB/"/>
    
    
      <category term="ESLint" scheme="https://kitions.github.io/tags/ESLint/"/>
    
  </entry>
  
  <entry>
    <title>React  0 -&gt; Hooks</title>
    <link href="https://kitions.github.io/2021/01/04/0%20-%20hooks/"/>
    <id>https://kitions.github.io/2021/01/04/0 - hooks/</id>
    <published>2021-01-04T10:29:32.000Z</published>
    <updated>2021-01-06T08:43:11.104Z</updated>
    
    <content type="html"><![CDATA[<h1 id="0-gt-Hooks"><a href="#0-gt-Hooks" class="headerlink" title="0 -&gt; Hooks"></a>0 -&gt; Hooks</h1><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">funcition App ()&#123;</span><br><span class="line">  <span class="keyword">const</span> [num, setNum] = useState(<span class="number">0</span>)</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    onClick ()&#123;</span><br><span class="line">      setNum(<span class="function"><span class="params">num</span> =&gt;</span> num + <span class="number">1</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>React 运行环境</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> isMount = <span class="literal">true</span>  <span class="comment">// didMount or didUpdate</span></span><br><span class="line"><span class="keyword">let</span> workInProgressHook = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> fiber = &#123;</span><br><span class="line">  stateNode: App,</span><br><span class="line">  memoizedState: <span class="literal">null</span>,  <span class="comment">// 链表</span></span><br><span class="line">  queue:&#123;    <span class="comment">// 队列</span></span><br><span class="line">    pending: <span class="literal">null</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">schedule</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  workInProgressHook = fiber.memoizedState;</span><br><span class="line">  <span class="keyword">const</span> app = fiber.stateNode();</span><br><span class="line">  isMount = <span class="literal">false</span>;</span><br><span class="line">  <span class="keyword">return</span> app</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.app = schedule()</span><br></pre></td></tr></table></figure><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">useState</span>(<span class="params">initState</span>)</span>&#123;</span><br><span class="line">  <span class="comment">// 当前hook</span></span><br><span class="line">  <span class="keyword">let</span> hook;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">if</span>(isMount)&#123;</span><br><span class="line">    hook = &#123;  <span class="comment">// 单向链表</span></span><br><span class="line">      memoizedState: initState,</span><br><span class="line">      next: <span class="literal">null</span> <span class="comment">// 指针 下一个</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(!fiber.memoizedSate)&#123;</span><br><span class="line">      fiber.memoizedState = hook;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">      workInProgressHook.next  = hook</span><br><span class="line">    &#125;</span><br><span class="line">     workInProgressHook  = hook</span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    hook = workInProgressHook;</span><br><span class="line">    workInProgressHook = workInProgressHook.next</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 取到了当前useState的数据</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">// todo</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">dispathAction</span>(<span class="params">queue, action</span>)</span>&#123;</span><br><span class="line"><span class="keyword">const</span> update =&#123; <span class="comment">// 环状链表</span></span><br><span class="line">    action,</span><br><span class="line">    next</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">if</span>(queue.pending === <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="comment">// u0 -&gt; u0 -&gt; u0</span></span><br><span class="line">    update.next = update</span><br><span class="line">    </span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="comment">// u0 -&gt; u0</span></span><br><span class="line">   <span class="comment">// u1 -&gt; u0 -&gt; u1</span></span><br><span class="line">    <span class="comment">// queue.pending // 最后第一个</span></span><br><span class="line">    <span class="comment">// queue.pending.next //第一个</span></span><br><span class="line">    update.next = queue.pending.next; <span class="comment">// u1 -&gt; u0</span></span><br><span class="line">    queue.pending.next = update; <span class="comment">// u0 -&gt; u1</span></span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  queue.pending = update;</span><br><span class="line">  </span><br><span class="line">  schedule();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">useState</span>(<span class="params">initState</span>)</span>&#123;</span><br><span class="line">  <span class="comment">// 当前hook</span></span><br><span class="line">  <span class="keyword">let</span> hook;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">if</span>(isMount)&#123;</span><br><span class="line">    hook = &#123;  <span class="comment">// 单向链表</span></span><br><span class="line">      memoizedState: initState,</span><br><span class="line">      next: <span class="literal">null</span> <span class="comment">// 指针 下一个</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(!fiber.memoizedSate)&#123;</span><br><span class="line">      fiber.memoizedState = hook;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">      workInProgressHook.next  = hook</span><br><span class="line">    &#125;</span><br><span class="line">     workInProgressHook  = hook</span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    hook = workInProgressHook;</span><br><span class="line">    workInProgressHook = workInProgressHook.next</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 取到了当前useState的数据</span></span><br><span class="line">  </span><br><span class="line">  <span class="keyword">let</span> baseState = hook.memoizedState;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">if</span>(hook.queue.pending)&#123;</span><br><span class="line">    <span class="keyword">let</span> firstupdate = hook.queue.pending.next;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">do</span>&#123;</span><br><span class="line">      <span class="keyword">const</span> action = firstUpdate.action</span><br><span class="line">      baseState = action(baseState)</span><br><span class="line">      firstUpdate = firstUpdate.next;</span><br><span class="line">    &#125;<span class="keyword">while</span>(firstUpdate !== hook.queue.pending.next)</span><br><span class="line">      </span><br><span class="line">    hook.queue.pending = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">  hook.memoizedState = baseState;</span><br><span class="line">  <span class="keyword">return</span> [baseState, disPatchAction.bind(<span class="literal">null</span>, hook.queue)]</span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>完整代码</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> isMount = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">let</span> workInProgressHook = <span class="literal">null</span>   <span class="comment">// 变量  当前处理哪一个hook</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> fiber = &#123;</span><br><span class="line">    stateNode: App,</span><br><span class="line">    memoizedState: <span class="literal">null</span>, <span class="comment">// 保存hooks数据 一条链表 每一个hook数据</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">schedule</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    workInProgressHook = fiber.memoizedState</span><br><span class="line">    <span class="keyword">const</span> app = fiber.stateNode()</span><br><span class="line">    isMount = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> app</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">useState</span>(<span class="params">initState</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> hook;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (isMount) &#123;</span><br><span class="line">        hook = &#123;  <span class="comment">// 单向链表</span></span><br><span class="line">            memoizedState: initState,</span><br><span class="line">            next: <span class="literal">null</span>,</span><br><span class="line">            queue: &#123;</span><br><span class="line">                pending: <span class="literal">null</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!fiber.memoizedState) &#123;</span><br><span class="line">            fiber.memoizedState = hook</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            workInProgressHook.next = hook</span><br><span class="line">        &#125;</span><br><span class="line">        workInProgressHook = hook</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//  已经有一条链表了</span></span><br><span class="line">        hook = workInProgressHook; <span class="comment">// 取到了</span></span><br><span class="line">        workInProgressHook = workInProgressHook.next; <span class="comment">// 指向下一个</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 取到了当前useState对应的数据 ，then 计算新状态</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> baseState = hook.memoizedState</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (hook.queue.pending) &#123;</span><br><span class="line">        <span class="keyword">let</span> firstUpdate = hook.queue.pending.next <span class="comment">// 第一个update</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            <span class="keyword">const</span> action = firstUpdate.action</span><br><span class="line">            baseState = action(baseState);</span><br><span class="line">            firstUpdate = firstUpdate.next <span class="comment">// 指向下一个</span></span><br><span class="line">        &#125; <span class="keyword">while</span> (firstUpdate != hook.queue.pending.next)</span><br><span class="line"></span><br><span class="line">        hook.queue.pending = <span class="literal">null</span> <span class="comment">// 计算完 清空</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    hook.memoizedState = baseState</span><br><span class="line">    <span class="keyword">return</span> [baseState, dispatchAction.bind(<span class="literal">null</span>, hook.queue)]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// setNum - action</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">dispatchAction</span>(<span class="params">queue, action</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 创建数据结构update，每次更新有优先级的，click &gt; fecth</span></span><br><span class="line">    <span class="keyword">const</span> update = &#123;</span><br><span class="line">        action, <span class="comment">// 环装链表</span></span><br><span class="line">        next: <span class="literal">null</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 链表操作</span></span><br><span class="line">    <span class="keyword">if</span> (queue.pending === <span class="literal">null</span>) &#123;</span><br><span class="line">        update.next = update</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// u0 -&gt; u0</span></span><br><span class="line">        <span class="comment">// u1 -&gt; u0 -&gt; u1</span></span><br><span class="line">        <span class="comment">// queue.pending 最后一个update</span></span><br><span class="line">        <span class="comment">// queue.pending.next 第一个update</span></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"第一个update"</span>,queue.pending.next)</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"最后一个update"</span>,queue.pending)</span><br><span class="line">        update.next = queue.pending.next; <span class="comment">// u1 =&gt; u0</span></span><br><span class="line">        queue.pending.next = update; <span class="comment">// u0 =&gt; u1</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 每次执行就是最后一个update</span></span><br><span class="line">    queue.pending = update</span><br><span class="line"></span><br><span class="line">    schedule()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// FC 保存hooks数据</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">App</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> [num, setNum] = useState(<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">const</span> [num1, setNum1] = useState(<span class="number">10</span>)</span><br><span class="line">    <span class="keyword">const</span> [num2, setNum2] = useState(<span class="number">22</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="built_in">console</span>.log(isMount)</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"num"</span>,num)</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"num1"</span>,num1)</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"num2"</span>,num2)</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"----"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        onClick() &#123;</span><br><span class="line">            setNum(<span class="function"><span class="params">num</span> =&gt;</span> num + <span class="number">1</span>)</span><br><span class="line">        &#125;,</span><br><span class="line">        set() &#123;</span><br><span class="line">            setNum1(<span class="function"><span class="params">num</span> =&gt;</span> num + <span class="number">10</span>)</span><br><span class="line">        &#125;,</span><br><span class="line">        set2() &#123;</span><br><span class="line">            setNum2(<span class="function"><span class="params">num</span> =&gt;</span> num + <span class="number">10</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">window</span>.app = schedule()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      从0 -&gt; Hooks
    
    </summary>
    
      <category term="React" scheme="https://kitions.github.io/categories/React/"/>
    
    
      <category term="React" scheme="https://kitions.github.io/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>wx-open-launch-app指南</title>
    <link href="https://kitions.github.io/2020/10/21/wx-open-launch-app%E9%87%87%E5%9D%91%E6%8C%87%E5%8D%97/"/>
    <id>https://kitions.github.io/2020/10/21/wx-open-launch-app采坑指南/</id>
    <published>2020-10-21T08:10:03.000Z</published>
    <updated>2020-10-21T08:13:41.071Z</updated>
    
    <content type="html"><![CDATA[<h1 id="wx-open-launch-app指南"><a href="#wx-open-launch-app指南" class="headerlink" title="wx-open-launch-app指南"></a>wx-open-launch-app指南</h1><p>今年5月微信刚开放的API，以往只对它投资的公司，或者干儿子开放，现在对绑定服务号且认证的企业都开放了，接入也比较简单，就是感觉文档太简单，覆盖面不足，不过都可以自己采坑来解决，可以去<a href="https://developers.weixin.qq.com/community/" target="_blank" rel="noopener">微信开放社区</a>提问或者找相应别人踩过的坑找答案。</p><h2 id="一、接入"><a href="#一、接入" class="headerlink" title="一、接入"></a>一、接入</h2><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlgy1gjx07td2opj30tw07ut9u.jpg" alt="image-20201021155005245"></p><p>获得此设置入口的权限，需同时满足如下条件：</p><ol><li>服务号已认证</li><li>开放平台账号已认证</li><li>服务号与开放平台账号同主体</li></ol><h3 id="绑定域名和移动应用"><a href="#绑定域名和移动应用" class="headerlink" title="绑定域名和移动应用"></a>绑定域名和移动应用</h3><ol><li>绑定域名的要求：</li></ol><ul><li>域名须为当前服务号的 JS 安全域名或其子域名</li><li>域名只能同时绑定一个移动应用，因此须确保域名未被其他移动应用绑定</li></ul><ol start="2"><li>绑定移动应用的要求</li></ol><ul><li>只能绑定同一微信开放平台账号下审核通过的移动应用</li></ul><ol start="3"><li>绑定次数</li></ol><ul><li>每月可修改绑定3次</li></ul><hr><p>以上是 产品经理负责修改，你只需要拿到app的id，小程序的id，确保第一张图的安全域名跟你开发的站的完全一致，不支持二级域名哦！</p><p>以下代码是在你页面中已经注入过wx.config的条件下,并且新增</p><p>wx.config { openTagList: [‘wx-open-launch-app’, ‘wx-open-launch-weapp’]}</p><h3 id="在你的H5中接入微信开放标签"><a href="#在你的H5中接入微信开放标签" class="headerlink" title="在你的H5中接入微信开放标签"></a>在你的H5中接入微信开放标签</h3><h4 id="1-微信小程序"><a href="#1-微信小程序" class="headerlink" title="1. 微信小程序"></a>1. 微信小程序</h4><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;wx-open-launch-weapp</span><br><span class="line">                          id=<span class="string">"launch-btn-weapp"</span></span><br><span class="line">                          username=<span class="string">"gh_*****"</span></span><br><span class="line">                          path=<span class="string">"pages/home/home.html"</span></span><br><span class="line">                      &gt;</span><br><span class="line">                          &lt;script type=<span class="string">"text/wxtag-template"</span>&gt;</span><br><span class="line">                              &lt;div className=<span class="string">"btn1"</span> style=&#123;&#123; <span class="attr">width</span>: <span class="string">'170px'</span>, <span class="attr">height</span>: <span class="string">'70px'</span>, <span class="attr">lineHeight</span>: <span class="string">"70px"</span>, <span class="attr">color</span>: <span class="string">"rgba(0,0,0,1)"</span>, <span class="attr">display</span>: <span class="string">"block"</span>, <span class="attr">fontSize</span>: <span class="string">"38px"</span>, <span class="attr">textAlign</span>: <span class="string">"center"</span> &#125;&#125;&gt;打开小程序&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">                          &lt;/</span>script&gt;</span><br><span class="line">                          &#123;<span class="comment">/* @ts-ignore */</span>&#125;</span><br><span class="line">                      &lt;<span class="regexp">/wx-open-launch-weapp&gt;</span></span><br></pre></td></tr></table></figure><h4 id="2-APP"><a href="#2-APP" class="headerlink" title="2.  APP"></a>2.  APP</h4><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt; wx-open-launch-app</span><br><span class="line">id = <span class="string">"launch-btn-app"</span></span><br><span class="line">appid = <span class="string">""</span></span><br><span class="line">extinfo = &#123;<span class="string">`带给app的信息 可以使用协议，让app端接受`</span>&#125;</span><br><span class="line">&gt;</span><br><span class="line">&lt;script type=<span class="string">"text/wxtag-template"</span> &gt;</span><br><span class="line">&lt;div style=&#123;&#123; <span class="attr">width</span>: <span class="string">'170px'</span>, <span class="attr">height</span>: <span class="string">'70px'</span>, <span class="attr">lineHeight</span>: <span class="string">"70px"</span>, <span class="attr">color</span>: <span class="string">"rgba(0,0,0,1)"</span>, <span class="attr">display</span>: <span class="string">"block"</span>, <span class="attr">fontSize</span>: <span class="string">"38px"</span>, <span class="attr">textAlign</span>: <span class="string">"center"</span> &#125;&#125;&gt; 打开App &lt; <span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt; /</span>script&gt;</span><br><span class="line">&#123;<span class="comment">/* @ts-ignore */</span> &#125;</span><br><span class="line">&lt;<span class="regexp">/wx-open-launch-app&gt;</span></span><br></pre></td></tr></table></figure><h4 id="3-JS生成Dom"><a href="#3-JS生成Dom" class="headerlink" title="3. JS生成Dom"></a>3. JS生成Dom</h4><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">dom.innerHTML = <span class="string">'&lt;wx-open-launch-app style="width:100%; display:block;" id="launch-btn"  extinfo="" appid=""&gt;&lt;template&gt;&lt;div class="wx-btn" style="color:#fff;text-align:center" &gt;JS生成的按钮&lt;/div&gt;&lt;/template&gt;&lt;/wx-open-launch-app&gt;'</span></span><br><span class="line">           <span class="keyword">var</span> launchBtn = <span class="built_in">document</span>.getElementById(<span class="string">'launch-btn'</span>)</span><br><span class="line">           <span class="built_in">console</span>.log(<span class="string">"launchBtn"</span>, launchBtn)</span><br><span class="line">           <span class="keyword">if</span> (!launchBtn) &#123;</span><br><span class="line">               <span class="keyword">return</span></span><br><span class="line">           &#125;</span><br><span class="line">           launchBtn.addEventListener(<span class="string">'launch'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">               <span class="built_in">console</span>.log(<span class="string">'btlaunchBtnn success'</span>)</span><br><span class="line">           &#125;)</span><br><span class="line">           launchBtn.addEventListener(<span class="string">'error'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">e: any</span>) </span>&#123;</span><br><span class="line">               <span class="built_in">console</span>.log(<span class="string">'launchBtnfail'</span>, e.detail)</span><br><span class="line">           &#125;)</span><br></pre></td></tr></table></figure><p>如果一切正常的话，就可以唤起你的小程序和APP了</p><p>注意的是</p><blockquote><p>微信版本要求为：7.0.12及以上。 系统版本要求为：iOS 10.3及以上、Android 5.0及以上，weixin.js 版本1.6.0以上</p><p><a href="https://res.wx.qq.com/open/js/jweixin-1.6.0.js" target="_blank" rel="noopener">https://res.wx.qq.com/open/js/jweixin-1.6.0.js</a></p></blockquote><h4 id="4-错误返回"><a href="#4-错误返回" class="headerlink" title="4.  错误返回"></a>4.  错误返回</h4><p><code>error</code>事件返回值<code>errMsg</code>说明如下。</p><table><thead><tr><th style="text-align:left">errMsg</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td style="text-align:left">“launch:fail”</td><td style="text-align:left">调⽤失败，或安卓上该应用未安装，或iOS上用户在弹窗上点击确认但该应⽤未安装</td></tr><tr><td style="text-align:left">“launch:fail_check fail”</td><td style="text-align:left">校验App跳转权限失败，请确认是否正确绑定AppID</td></tr></tbody></table><h2 id="二、坑-不能是二级域名"><a href="#二、坑-不能是二级域名" class="headerlink" title="二、坑 - 不能是二级域名"></a>二、坑 - 不能是二级域名</h2><p>经查证，只能是具体域名，不能是二级域名</p><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlgy1gjwzr9w156j30ok0b1zlo.jpg" alt="image-20201021153405769"></p><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlgy1gjwzs1cl1cj30oe05t0t6.jpg" alt="image-20201021153455648"></p><h2 id="三、参考链接"><a href="#三、参考链接" class="headerlink" title="三、参考链接"></a>三、参考链接</h2><ol><li><p><a href="https://developers.weixin.qq.com/doc/oplatform/Mobile_App/WeChat_H5_Launch_APP.html" target="_blank" rel="noopener">微信内H5跳转APP或者小程序文档</a></p></li><li><p><a href="https://developers.weixin.qq.com/doc/offiaccount/OA_Web_Apps/Wechat_Open_Tag.html" target="_blank" rel="noopener">微信开放标签说明文档</a></p></li><li><a href="https://developers.weixin.qq.com/doc/offiaccount/OA_Web_Apps/JS-SDK.html#1" target="_blank" rel="noopener">JS-SDK使用步骤</a></li><li><a href="https://www.cnblogs.com/willian/p/13293030.html" target="_blank" rel="noopener">cnblogs其他人采坑</a></li><li><a href="https://blog.csdn.net/WangYC_/article/details/107089709" target="_blank" rel="noopener">csdn其他人采坑</a></li><li><a href="https://developers.weixin.qq.com/community/develop/doc/0000065f1741801069eaec5e55b400?_at=1603177240329" target="_blank" rel="noopener">官方回复域名issues</a></li><li><a href="https://developers.weixin.qq.com/community/develop/doc/000082dea443f0d2042b5081156000" target="_blank" rel="noopener">自己提的域名issues</a></li></ol><h2 id="四、完整代码"><a href="#四、完整代码" class="headerlink" title="四、完整代码"></a>四、完整代码</h2><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// tsx</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">this</span>.isAllowWeixinTag(userAgent)</span><br><span class="line">?</span><br><span class="line"><span class="comment">// 微信环境</span></span><br><span class="line">&lt;&gt;</span><br><span class="line">&#123;<span class="comment">/* @ts-ignore */</span> &#125;</span><br><span class="line">&lt; wx-open-launch-app</span><br><span class="line">id = <span class="string">"launch-btn-app"</span></span><br><span class="line">appid = <span class="string">""</span></span><br><span class="line">extinfo = &#123;<span class="string">`带给app的信息 可以使用协议，让app端接受`</span>&#125;</span><br><span class="line">&gt;</span><br><span class="line">&lt;script type=<span class="string">"text/wxtag-template"</span> &gt;</span><br><span class="line">&lt;div style=&#123;&#123; <span class="attr">width</span>: <span class="string">'170px'</span>, <span class="attr">height</span>: <span class="string">'70px'</span>, <span class="attr">lineHeight</span>: <span class="string">"70px"</span>, <span class="attr">color</span>: <span class="string">"rgba(0,0,0,1)"</span>, <span class="attr">display</span>: <span class="string">"block"</span>, <span class="attr">fontSize</span>: <span class="string">"38px"</span>, <span class="attr">textAlign</span>: <span class="string">"center"</span> &#125;&#125;&gt; 打开App &lt; <span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt; /</span>script&gt;</span><br><span class="line">&#123;<span class="comment">/* @ts-ignore */</span> &#125;</span><br><span class="line">&lt;<span class="regexp">/wx-open-launch-app&gt;</span></span><br><span class="line"><span class="regexp">&lt; /</span>&gt;</span><br><span class="line">: <span class="xml"><span class="tag">&lt;<span class="name">span</span> <span class="attr">className</span>=<span class="string">"go_to_app"</span> <span class="attr">onClick</span> = <span class="string">&#123;</span> <span class="attr">this.onApp</span> &#125; &gt;</span> 打开APP <span class="tag">&lt; /<span class="attr">span</span>&gt;</span></span></span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line"><span class="comment">// 事件监听</span></span><br><span class="line">            <span class="keyword">if</span>(!<span class="keyword">this</span>.isAllowWeixinTag(<span class="keyword">this</span>.props.userAgent)) <span class="keyword">return</span></span><br><span class="line">            <span class="keyword">var</span> btn = <span class="built_in">document</span>.getElementById(<span class="string">"launch-btn-app"</span>)</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"app"</span>, btn)</span><br><span class="line">            <span class="keyword">if</span>(!btn) <span class="keyword">return</span></span><br><span class="line">            btn.addEventListener(<span class="string">'launch'</span>, (e: any) =&gt; &#123;</span><br><span class="line">                <span class="comment">// 在此处可设置粘贴板内数据，数据是传递给 app 的参数进，</span></span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">' app success'</span>);</span><br><span class="line">            &#125;);</span><br><span class="line">            btn.addEventListener(<span class="string">'error'</span>, (e: any) =&gt; &#123;</span><br><span class="line">                <span class="comment">// 在此处可设置粘贴板内数据，数据是传递给 app 的参数，</span></span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">'app'</span>, e.detail);</span><br><span class="line">                <span class="comment">// 唤醒失败的情况下,可以打开app等</span></span><br><span class="line">                <span class="keyword">this</span>.onApp()</span><br><span class="line">            &#125;);    </span><br><span class="line">    </span><br><span class="line"> </span><br><span class="line"><span class="comment">//function</span></span><br><span class="line">    </span><br><span class="line">isAllowWeixinTag(userAgent: string)&#123;</span><br><span class="line">      &#123;<span class="comment">/* 1.微信环境  2.微信版本大于7.0.12 */</span>&#125;</span><br><span class="line">     <span class="keyword">return</span> UA(userAgent).isWechat &amp;&amp; HandleJudgeWechat(userAgent)</span><br><span class="line">&#125;    </span><br><span class="line"><span class="keyword">const</span> HandleJudgeWechat = <span class="function">(<span class="params">ua: string</span>)=&gt;</span> &#123;</span><br><span class="line"><span class="keyword">let</span> wechat = ua.match(<span class="regexp">/MicroMessenger\/([\d\.]+)/i</span>);</span><br><span class="line"><span class="keyword">let</span> judgewechat = wechat[<span class="number">1</span>].split(<span class="string">'.'</span>)</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">Number</span>(judgewechat[<span class="number">0</span>]) &gt;= <span class="number">7</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">Number</span>(judgewechat[<span class="number">1</span>]) &gt;= <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">Number</span>(judgewechat[<span class="number">2</span>]) &gt;= <span class="number">12</span>) &#123;</span><br><span class="line"><span class="comment">// console.log("当前微信版本大于7.0.12 可打开指定app")</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="五、-总结"><a href="#五、-总结" class="headerlink" title="五、 总结"></a>五、 总结</h2><p>较为简单的接入。</p><p>只能到微信安全域名下测试，实在是麻烦，导致 只能发版测试，而且唤醒绑定的那个域名是正式环境的，略麻烦。微信开发者工具对这个新标签兼容性不是很好。</p>]]></content>
    
    <summary type="html">
    
      今年5月微信新开放的api ， 微信环境H5唤起APP和小程序实践
    
    </summary>
    
      <category term="默认分类" scheme="https://kitions.github.io/categories/%E9%BB%98%E8%AE%A4%E5%88%86%E7%B1%BB/"/>
    
    
      <category term="微信" scheme="https://kitions.github.io/tags/%E5%BE%AE%E4%BF%A1/"/>
    
  </entry>
  
  <entry>
    <title>群晖Moments发送未知错误</title>
    <link href="https://kitions.github.io/2020/10/18/%E7%BE%A4%E8%BE%89Moment/"/>
    <id>https://kitions.github.io/2020/10/18/群辉Moment/</id>
    <published>2020-10-18T08:24:19.000Z</published>
    <updated>2020-10-21T08:09:47.458Z</updated>
    
    <content type="html"><![CDATA[<h1 id="群晖Moments发送未知错误，请再试一次"><a href="#群晖Moments发送未知错误，请再试一次" class="headerlink" title="群晖Moments发送未知错误，请再试一次"></a>群晖Moments发送未知错误，请再试一次</h1><p>按下面图的步骤来就好了，先删三个套件，重启，安装moments，最后恢复索引，就好了。下面的图就不解释了</p><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlgy1gjvsfj1awqj30hb0910sv.jpg" alt="image-20201020143501721"></p><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlgy1gjvsg8dc4nj30lc0eoq57.jpg" alt="image-20201020143549313"></p><p>时间比较长，等等</p><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlgy1gjvskxusuhj30oi0fwju3.jpg" alt="image-20201020144021076"></p><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlgy1gjvsmi01q4j30k90g7acq.jpg" alt="image-20201020144150773"></p><p>我这个群辉 应用程序服务的图标是错的，不知道为啥</p><p>最后一步 重启NAS</p><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlgy1gjvsnl2j26j30gx09w42m.jpg" alt="image-20201020144253666"></p><p>最最后 重启，安装moment，它会自动下载群辉应用程序和drive。Node.js我本机是安装的，所以不用重新下了</p><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlgy1gjvsse9kjvj30e308g0t8.jpg" alt="image-20201020144731049"></p><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlgy1gjvstr8f0aj30kh0duq5p.jpg" alt="image-20201020144848581"></p><p>因为重装了drive，它会去索引文件夹</p><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlgy1gjvsy80htwj30e607pjta.jpg" alt="image-20201020145306329"></p><p>打开moment，好了</p><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlgy1gjvtpfzcj8j31f00npgp4.jpg" alt="image-20201020151858761"></p><p>接着 我们要点开左下角的设置，要重建索引</p><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlgy1gjvtr12oefj30mu0hgjta.jpg" alt="image-20201020152040110"></p><p>看到图片 慢慢有了</p><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlgy1gjvttn2c82j31e50mvt9x.jpg" alt="image-20201020152316292"></p>]]></content>
    
    <summary type="html">
    
      我的群晖内置的存储空间1坏了，新换了块固态，启动Moments遇到这个问题
    
    </summary>
    
      <category term="默认分类" scheme="https://kitions.github.io/categories/%E9%BB%98%E8%AE%A4%E5%88%86%E7%B1%BB/"/>
    
    
      <category term="群晖" scheme="https://kitions.github.io/tags/%E7%BE%A4%E6%99%96/"/>
    
  </entry>
  
  <entry>
    <title>H5唤醒APP 简单hacker方法</title>
    <link href="https://kitions.github.io/2020/10/15/H5%E5%94%A4%E9%86%92APP%20%E7%AE%80%E5%8D%95hacker%E6%96%B9%E6%B3%95/"/>
    <id>https://kitions.github.io/2020/10/15/H5唤醒APP 简单hacker方法/</id>
    <published>2020-10-15T03:58:39.000Z</published>
    <updated>2020-10-15T03:59:44.914Z</updated>
    
    <content type="html"><![CDATA[<h2 id="H5唤醒APP-简单hacker方法"><a href="#H5唤醒APP-简单hacker方法" class="headerlink" title="H5唤醒APP 简单hacker方法"></a>H5唤醒APP 简单hacker方法</h2><p>本质上浏览器是通过URLscheme打开APP，一个APP可以设置一个或多个打开自己的URL scheme。类似于zhihu://</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> APPRouter = <span class="function">(<span class="params">router: <span class="built_in">string</span></span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (isWeiXin()) &#123;</span><br><span class="line">        <span class="comment">// alert("请点击右上角打开其他浏览器")</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">window</span>.location.href = router</span><br><span class="line">      </span><br><span class="line">        <span class="keyword">if</span>(isAndroid())&#123;</span><br><span class="line">          <span class="comment">// 安卓 </span></span><br><span class="line">            <span class="keyword">var</span> t = <span class="built_in">Date</span>.now()</span><br><span class="line">            setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="built_in">Date</span>.now() - t &lt; <span class="number">1200</span>) &#123;</span><br><span class="line">                    <span class="built_in">window</span>.location.href = <span class="string">`你app下载域名`</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;, <span class="number">1000</span>)</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">          <span class="comment">// 苹果</span></span><br><span class="line">            setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">                    <span class="built_in">window</span>.location.href = <span class="string">`你app下载域名`</span></span><br><span class="line">            &#125;, <span class="number">250</span>)</span><br><span class="line">            setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">                    <span class="built_in">window</span>.location.reload()</span><br><span class="line">            &#125;, <span class="number">1000</span>)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="安卓设置的原理："><a href="#安卓设置的原理：" class="headerlink" title="安卓设置的原理："></a>安卓设置的原理：</h3><p>如果设置比较小的运行间隔（&lt;30ms），在浏览器或者webview中，应用切换到后台，setInterval会被很明显的延迟执行，比如设置一个运行间隔20ms，总计运行100次的定时器，如果页面一直处于前台，则100次跑完，总耗时与100x20=2000ms不会有太大差异，但页面在后台运行时，此时间会明显超过2000ms。可以利用这一点来实现是否成功打开APP检测及回调。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> t = <span class="built_in">Date</span>.now()</span><br><span class="line">            setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="built_in">Date</span>.now() - t &lt; <span class="number">1200</span>) &#123;</span><br><span class="line">                    <span class="built_in">window</span>.location.href = <span class="string">`你app下载域名`</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;, <span class="number">1000</span>)</span><br></pre></td></tr></table></figure><h3 id="苹果设置的原理："><a href="#苹果设置的原理：" class="headerlink" title="苹果设置的原理："></a>苹果设置的原理：</h3><p>APP已安装这是没问题的，但如果APP未安装，跳App Store 的请求会失败。 这时可以使用两个定时器</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">                   <span class="built_in">window</span>.location.href = <span class="string">`你app下载域名`</span></span><br><span class="line">           &#125;, <span class="number">250</span>)</span><br><span class="line">           setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">                   <span class="built_in">window</span>.location.reload()</span><br><span class="line">           &#125;, <span class="number">1000</span>)</span><br></pre></td></tr></table></figure><h3 id="Iframe"><a href="#Iframe" class="headerlink" title="Iframe"></a>Iframe</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> ifm = <span class="built_in">document</span>.createElement(<span class="string">'iframe'</span>);</span><br><span class="line"></span><br><span class="line">      ifm.setAttribute(<span class="string">'src'</span>, wakeupUrl);</span><br><span class="line">      ifm.setAttribute(<span class="string">'style'</span>, <span class="string">'display:none'</span>);</span><br><span class="line">      <span class="built_in">document</span>.body.appendChild(ifm);</span><br><span class="line">      onBeforeWakeup &amp;&amp; onBeforeWakeup();</span><br><span class="line"></span><br><span class="line">      <span class="keyword">var</span> currentTime = <span class="built_in">Date</span>.now();</span><br><span class="line"></span><br><span class="line">      setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">          <span class="keyword">var</span> nowTime = <span class="built_in">Date</span>.now();</span><br><span class="line">          <span class="keyword">if</span> (nowTime - currentTime &lt; <span class="number">1050</span>) &#123;</span><br><span class="line">            <span class="comment">// 回调</span></span><br><span class="line">              onWakeupFail &amp;&amp; onWakeupFail();</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;, <span class="number">1000</span>);</span><br></pre></td></tr></table></figure><h3 id="引导页"><a href="#引导页" class="headerlink" title="引导页"></a>引导页</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> H5ToApp = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> div = <span class="built_in">document</span>.createElement(<span class="string">'div'</span>);</span><br><span class="line">    <span class="built_in">document</span>.body.appendChild(div);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> template = <span class="string">`</span></span><br><span class="line"><span class="string">    &lt;div class="h5_toweixin" style="z-index: 9999;position: absolute;width: 100%;top: 0px;left: 0;height: 100%;"&gt;</span></span><br><span class="line"><span class="string">        &lt;img src="/images/h5-weixin.png" alt="引导到微信"/&gt;</span></span><br><span class="line"><span class="string">    &lt;/div&gt;`</span></span><br><span class="line">    <span class="keyword">const</span> bodyScroll = <span class="function">(<span class="params">event: any</span>) =&gt;</span> &#123;</span><br><span class="line">        event.stopPropagation();</span><br><span class="line">        event.preventDefault();</span><br><span class="line">    &#125;</span><br><span class="line">    div.appendChild(parseElement(template))</span><br><span class="line">    <span class="built_in">window</span>.addEventListener(<span class="string">'touchmove'</span>, bodyScroll);</span><br><span class="line">    <span class="built_in">document</span>.body.style.position = <span class="string">'fixed'</span>;</span><br><span class="line">    <span class="built_in">document</span>.addEventListener(<span class="string">"click"</span>, fn)</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (div.parentNode) &#123;</span><br><span class="line">            <span class="built_in">document</span>.body.style.position = <span class="string">'static'</span>;</span><br><span class="line">            <span class="built_in">window</span>.removeEventListener(<span class="string">'touchmove'</span>, bodyScroll);</span><br><span class="line">            <span class="built_in">document</span>.removeEventListener(<span class="string">'click'</span>,fn);</span><br><span class="line">            div.parentNode.removeChild(div);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> parseElement = <span class="function">(<span class="params">htmlString: string</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> DOMParser().parseFromString(htmlString, <span class="string">'text/html'</span>).body.childNodes[<span class="number">0</span>]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> &#123;H5ToApp&#125;</span><br></pre></td></tr></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>坑很多，问题主要在安卓上，会有各种兼容问题，机型浏览器众多。当然ios也有。</p><p>知乎的解决办法是，提供两个按钮，一个下载，一个打开APP，让用户自己选。</p><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p>链接：<a href="https://www.jianshu.com/p/7645ad94840d" target="_blank" rel="noopener">https://www.jianshu.com/p/7645ad94840d</a></p>]]></content>
    
    <summary type="html">
    
      H5唤醒APP,本质上浏览器是通过URLscheme打开APP，安卓和苹果的两个比较hack的方法实现了跳转后本页面不跳转到下载页
    
    </summary>
    
      <category term="默认分类" scheme="https://kitions.github.io/categories/%E9%BB%98%E8%AE%A4%E5%88%86%E7%B1%BB/"/>
    
    
      <category term="H5" scheme="https://kitions.github.io/tags/H5/"/>
    
  </entry>
  
  <entry>
    <title>函数的柯里化简单了解</title>
    <link href="https://kitions.github.io/2020/08/25/%E5%87%BD%E6%95%B0%E7%9A%84%E6%9F%AF%E9%87%8C%E5%8C%96/"/>
    <id>https://kitions.github.io/2020/08/25/函数的柯里化/</id>
    <published>2020-08-25T11:41:44.000Z</published>
    <updated>2020-09-23T04:02:34.064Z</updated>
    
    <content type="html"><![CDATA[<h1 id="函数的柯里化"><a href="#函数的柯里化" class="headerlink" title="函数的柯里化"></a>函数的柯里化</h1><h2 id="一、概念"><a href="#一、概念" class="headerlink" title="一、概念"></a>一、概念</h2><p>接受多个参数的函数转换成接受单一参数的函数的操作。通俗理解为：只传递给函数的一部分参数来调用它，让它返回一个新函数去处理剩下的参数。</p><blockquote><p>测试可用quokka.js（免费版即可）  vscode的插件</p></blockquote><h2 id="二、参数定长柯里化"><a href="#二、参数定长柯里化" class="headerlink" title="二、参数定长柯里化"></a>二、参数定长柯里化</h2><h3 id="2-1-例一"><a href="#2-1-例一" class="headerlink" title="2.1 例一"></a>2.1 例一</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> add = <span class="function">(<span class="params">...args</span>) =&gt;</span> args.reduce(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a + b);</span><br><span class="line"></span><br><span class="line">add(<span class="number">1</span>, <span class="number">2</span>) <span class="comment">// 3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> sum = currying(add);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> addCurryOne = sum(<span class="number">1</span>);</span><br><span class="line">addCurryOne(<span class="number">2</span>) <span class="comment">// 3</span></span><br><span class="line">addCurryOne(<span class="number">3</span>) <span class="comment">// 4</span></span><br></pre></td></tr></table></figure><p>用闭包把传入参数保存起来，当传入参数的数量足够执行函数时，就开始执行函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">currying</span>(<span class="params">func</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> args = [];</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="title">result</span>(<span class="params">...rest</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (rest.length === <span class="number">0</span>) &#123;</span><br><span class="line">          <span class="keyword">return</span> func(...args);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          args.push(...rest);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlgy1gi35mxxb8cj30eo0ga0tz.jpg" alt="image-20200825165013800"></p><h3 id="2-2-例二"><a href="#2-2-例二" class="headerlink" title="2.2 例二"></a>2.2 例二</h3><p>柯里化是在一个函数的基础上变换，得到一个新的预设了参数的函数。最后在调用新函数时候，实际上还是会调用柯里化前的原函数。</p><p>而且柯里化得到的新函数可以继续被柯里化，有点递归的感觉，不对不是递归，有点套娃的感觉</p><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlgy1gi49mnwbg6j30tk0fp42s.jpg" alt="image-20200826155358746"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">adds</span>(<span class="params">a, b, c</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a + b + c</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">currying</span>(<span class="params">fn, length</span>) </span>&#123;</span><br><span class="line">    length = length || fn.length; <span class="comment">// 第一次调用获取函数 fn 参数的长度，后续调用获取 fn 剩余参数的长度</span></span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">arguments</span> <span class="comment">//将类数组对象转换成数组</span></span><br><span class="line">        <span class="keyword">var</span> args = [].slice.call(<span class="built_in">arguments</span>) <span class="comment">// currying返回函数接受的参数</span></span><br><span class="line">        fn</span><br><span class="line">        args</span><br><span class="line">        <span class="built_in">console</span>.log(args.length)</span><br><span class="line">        length</span><br><span class="line">        <span class="keyword">if</span> (args.length &lt; length) &#123; <span class="comment">// 判断参数的长度是否小于 fn 剩余参数需要接收的长度</span></span><br><span class="line">            <span class="keyword">return</span> currying(fn.bind(<span class="keyword">this</span>, ...args), length - args.length) <span class="comment">// 递归 currying 函数，新的 fn 为 bind 返回的新函数（bind 绑定了 ...args 参数，未执行），新的 length 为 fn 剩余参数的长度</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(fn)</span><br><span class="line">            <span class="built_in">console</span>.log(...args)</span><br><span class="line">            <span class="keyword">return</span> fn.call(<span class="keyword">this</span>, ...args) <span class="comment">// 执行 fn 函数，传入新函数的参数</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> addCurry = currying(adds);</span><br><span class="line"><span class="built_in">console</span>.log(addCurry(<span class="number">2</span>)(<span class="number">3</span>)(<span class="number">4</span>)) <span class="comment">// 9</span></span><br><span class="line"><span class="comment">// console.log(addCurry(2, 3)(4))  // 9</span></span><br><span class="line"><span class="comment">// console.log(addCurry(2, 3, 4))  // 9</span></span><br><span class="line"><span class="comment">// addCurry(2)(3, 4) // 9</span></span><br></pre></td></tr></table></figure><p>实现原理都是「用闭包把传入参数保存起来，当传入参数的数量足够执行函数时，就开始执行函数」</p><h2 id="三、实际使用"><a href="#三、实际使用" class="headerlink" title="三、实际使用"></a>三、实际使用</h2><h3 id="1-bind"><a href="#1-bind" class="headerlink" title="1.bind"></a>1.bind</h3><p>MDN的解释</p><blockquote><p><code>Function.prototype.bind()</code>方法创建一个新的函数，在<code>bind()</code>被调用时，这个新函数的<code>this</code>被指定为<code>bind</code>的第一个参数，而其余参数会被指定为新函数的参数，供调用时使用</p></blockquote><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlgy1gi5i8qlgwqj30eg0eltb4.jpg" alt="image-20200827173736428"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结!"></a>总结!</h2><p>柯里化属于函数式编程思想。柯里化时只是返回一个预置参数的新函数，没有立刻执行，实际上在满足条件后才会执行。不污染原函数。</p>]]></content>
    
    <summary type="html">
    
      接受多个参数的函数转换成接受单一参数的函数的操作。通俗理解为：只传递给函数的一部分参数来调用它，让它返回一个新函数去处理剩下的参数。
    
    </summary>
    
      <category term="默认分类" scheme="https://kitions.github.io/categories/%E9%BB%98%E8%AE%A4%E5%88%86%E7%B1%BB/"/>
    
    
      <category term="javascript" scheme="https://kitions.github.io/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>浏览器事件全屏</title>
    <link href="https://kitions.github.io/2020/07/31/%E6%B5%8F%E8%A7%88%E5%99%A8%E4%BA%8B%E4%BB%B6%E5%85%A8%E5%B1%8F/"/>
    <id>https://kitions.github.io/2020/07/31/浏览器事件全屏/</id>
    <published>2020-07-31T03:55:08.000Z</published>
    <updated>2020-07-31T03:55:54.231Z</updated>
    
    <content type="html"><![CDATA[<h1 id="浏览器事件全屏"><a href="#浏览器事件全屏" class="headerlink" title="浏览器事件全屏"></a>浏览器事件全屏</h1><h2 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 全屏</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> fullScreen = <span class="function">(<span class="params">element: any</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> requestMethod = element.requestFullScreen || element.webkitRequestFullScreen || element.mozRequestFullScreen || element.msRequestFullScreen || element.msRequestFullscreen || element.requestFullscreen;</span><br><span class="line">    <span class="keyword">if</span> (requestMethod) &#123;</span><br><span class="line">        requestMethod.call(element);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> (<span class="built_in">window</span> <span class="keyword">as</span> any).ActiveXObject != <span class="string">"undefined"</span>) &#123;</span><br><span class="line">        <span class="comment">//for IE，这里其实就是模拟了按下键盘的F11，使浏览器全屏</span></span><br><span class="line">        <span class="keyword">var</span> wscript = <span class="keyword">new</span> ActiveXObject(<span class="string">"WScript.Shell"</span>);</span><br><span class="line">        <span class="keyword">if</span> (wscript != <span class="literal">null</span>) &#123;</span><br><span class="line">            wscript.SendKeys(<span class="string">"&#123;F11&#125;"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 退出全屏</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> exitFullScreen = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> el: any = <span class="built_in">document</span>;</span><br><span class="line">    <span class="comment">// 判断各种浏览器，找到正确的方法</span></span><br><span class="line">    <span class="keyword">var</span> exitMethod = el.exitFullscreen || <span class="comment">//W3C</span></span><br><span class="line">        el.mozCancelFullScreen || <span class="comment">//FireFox</span></span><br><span class="line">        el.webkitExitFullscreen || <span class="comment">//Chrome等</span></span><br><span class="line">        el.webkitExitFullscreen; <span class="comment">//IE11</span></span><br><span class="line">    <span class="keyword">if</span> (exitMethod) &#123;</span><br><span class="line">        exitMethod.call(<span class="built_in">document</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> (<span class="built_in">window</span> <span class="keyword">as</span> any).ActiveXObject !== <span class="string">"undefined"</span>) &#123; <span class="comment">//for Internet Explorer</span></span><br><span class="line">        <span class="keyword">var</span> wscript = <span class="keyword">new</span> ActiveXObject(<span class="string">"WScript.Shell"</span>);</span><br><span class="line">        <span class="keyword">if</span> (wscript !== <span class="literal">null</span>) &#123;</span><br><span class="line">            wscript.SendKeys(<span class="string">"&#123;F11&#125;"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="监听事件"><a href="#监听事件" class="headerlink" title="监听事件"></a>监听事件</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fullChage = <span class="function">(<span class="params">e: any</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> el: any = <span class="built_in">document</span></span><br><span class="line">        <span class="comment">// if isFullScreen</span></span><br><span class="line">        <span class="keyword">if</span> (el.isFullScreen || el.mozFullScreen || el.webkitIsFullScreen) &#123;</span><br><span class="line">            <span class="comment">// do someting</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"全屏失败"</span>, error)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">document</span>.addEventListener(<span class="string">"fullscreenchange"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">    fullChage(e)</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">document</span>.addEventListener(<span class="string">"mozfullscreenchange"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">    fullChage(e)</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">document</span>.addEventListener(<span class="string">"webkitfullscreenchange"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">    fullChage(e)</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">document</span>.addEventListener(<span class="string">"msfullscreenchange"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">    fullChage(e)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      浏览器的全屏，退出全屏，监听全屏
    
    </summary>
    
      <category term="默认分类" scheme="https://kitions.github.io/categories/%E9%BB%98%E8%AE%A4%E5%88%86%E7%B1%BB/"/>
    
    
      <category term="全屏" scheme="https://kitions.github.io/tags/%E5%85%A8%E5%B1%8F/"/>
    
  </entry>
  
  <entry>
    <title>styled-components浅入浅出</title>
    <link href="https://kitions.github.io/2020/07/25/styled-components/"/>
    <id>https://kitions.github.io/2020/07/25/styled-components/</id>
    <published>2020-07-25T10:45:22.000Z</published>
    <updated>2020-07-31T03:58:33.672Z</updated>
    
    <content type="html"><![CDATA[<h1 id="styled-components"><a href="#styled-components" class="headerlink" title="styled-components"></a>styled-components</h1><p>styled-components以组件的形式来声明样式，让样式也成为组件，从而分离逻辑组件与展示组件。</p><h2 id="部分实践"><a href="#部分实践" class="headerlink" title="部分实践"></a>部分实践</h2><h3 id="1-引入全部样式"><a href="#1-引入全部样式" class="headerlink" title="1.  引入全部样式"></a>1.  引入全部样式</h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;createGlobalStyle&#125; <span class="keyword">from</span> <span class="string">'styled-components'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> Global = createGlobalStyle<span class="string">`</span></span><br><span class="line"><span class="string">  body&#123;</span></span><br><span class="line"><span class="string">    background-color:red!important;</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string"> h1, h2, h3 &#123;</span></span><br><span class="line"><span class="string">    font-family: '<span class="subst">$&#123;props =&gt; props.theme.fontFamily.common&#125;</span>';</span></span><br><span class="line"><span class="string">    font-weight: normal;</span></span><br><span class="line"><span class="string">    font-style: normal;</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">`</span></span><br><span class="line"></span><br><span class="line">&lt;div className=<span class="string">"App"</span>&gt;</span><br><span class="line">  &lt;Global&gt;<span class="xml"><span class="tag">&lt;/<span class="name">Global</span>&gt;</span></span></span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-input-attr"><a href="#2-input-attr" class="headerlink" title="2.  input attr"></a>2.  input attr</h3><p>为Styled-Component添加默认属性和默认样式值</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Input = styled.input.attrs(<span class="function"><span class="params">props</span> =&gt;</span> (&#123;</span><br><span class="line">  <span class="comment">// we can define static props</span></span><br><span class="line">  type: <span class="string">"password"</span>,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// or we can define dynamic ones</span></span><br><span class="line">  size: props.size || <span class="string">"1em"</span>,</span><br><span class="line">&#125;))<span class="string">`</span></span><br><span class="line"><span class="string">  color: red;</span></span><br><span class="line"><span class="string">`</span>;</span><br><span class="line"></span><br><span class="line">render(</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;Input /&gt;</span><br><span class="line">  &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">);</span></span><br></pre></td></tr></table></figure><h3 id="3-主题"><a href="#3-主题" class="headerlink" title="3. 主题"></a>3. 主题</h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> theme = &#123;</span><br><span class="line">fontSizes: &#123;</span><br><span class="line">sm: <span class="string">'10px'</span>,</span><br><span class="line">md: <span class="string">'15px'</span>,</span><br><span class="line">lg: <span class="string">'25px'</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> BodyTexts = styled.p<span class="string">`</span></span><br><span class="line"><span class="string">font-size: <span class="subst">$&#123;props =&gt; props.theme.fontSizes.sm&#125;</span></span></span><br><span class="line"><span class="string">`</span></span><br><span class="line"></span><br><span class="line">render(</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;ThemeProvider theme=&#123;theme&#125;&gt;</span><br><span class="line">      &lt;BodyTexts&gt;Themed&lt;<span class="regexp">/BodyTexts&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>ThemeProvider&gt;</span><br><span class="line">  &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">);</span></span><br></pre></td></tr></table></figure><h3 id="4-继承"><a href="#4-继承" class="headerlink" title="4. 继承"></a>4. 继承</h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> StyledCompoent2 = styled(StyledCompoent1)<span class="string">`</span></span><br><span class="line"><span class="string">    background:xxx</span></span><br><span class="line"><span class="string">    ...</span></span><br><span class="line"><span class="string">`</span></span><br></pre></td></tr></table></figure><p>StyledComponent2其实是一个全新的class</p><p>如果我们想要做到<strong>真正的继承</strong>，需要使用style-components提供的<code>extend</code>方法，它是StyleComponent下的一个属性方法。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> StyledCompoent2 = StyledCompoent1.extend<span class="string">`</span></span><br><span class="line"><span class="string">    background:xxx</span></span><br><span class="line"><span class="string">    ...</span></span><br><span class="line"><span class="string">`</span></span><br></pre></td></tr></table></figure><h3 id="5-withComponent"><a href="#5-withComponent" class="headerlink" title="5. withComponent"></a>5. withComponent</h3><p>创建新StyledComponent的方法，该新StyledComponent会应用不同的标签或组件，但所调用的规则相同。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Component = styled.div<span class="string">`</span></span><br><span class="line"><span class="string">  color: red;</span></span><br><span class="line"><span class="string">`</span>;</span><br><span class="line"></span><br><span class="line">render(</span><br><span class="line">  &lt;Component</span><br><span class="line">    <span class="keyword">as</span>=<span class="string">"button"</span></span><br><span class="line">    onClick=&#123;() =&gt; alert(<span class="string">'It works!'</span>)&#125;</span><br><span class="line">  &gt;</span><br><span class="line">    Hello World!</span><br><span class="line">  &lt;<span class="regexp">/Component&gt;</span></span><br><span class="line"><span class="regexp">)</span></span><br></pre></td></tr></table></figure><h3 id="6-Refs"><a href="#6-Refs" class="headerlink" title="6. Refs"></a>6. Refs</h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Input = styled.input<span class="string">`</span></span><br><span class="line"><span class="string">  padding: 0.5em;</span></span><br><span class="line"><span class="string">  margin: 0.5em;</span></span><br><span class="line"><span class="string">`</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Form</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">    <span class="keyword">super</span>(props);</span><br><span class="line">    <span class="keyword">this</span>.inputRef = React.createRef();</span><br><span class="line">  &#125;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;Input</span><br><span class="line">        ref=&#123;<span class="keyword">this</span>.inputRef&#125;</span><br><span class="line">        placeholder=<span class="string">"Hover to focus!"</span></span><br><span class="line">        onMouseEnter=&#123;() =&gt; &#123;</span><br><span class="line">          <span class="keyword">this</span>.inputRef.current.focus()</span><br><span class="line">        &#125;&#125;</span><br><span class="line">      /&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">render(</span><br><span class="line">  &lt;Form /&gt;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h3 id="7-获取Theme"><a href="#7-获取Theme" class="headerlink" title="7. 获取Theme"></a>7. 获取Theme</h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; withTheme &#125; <span class="keyword">from</span> <span class="string">'styled-components'</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyComponent</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Current theme: '</span>, <span class="keyword">this</span>.props.theme);</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> withTheme(MyComponent)</span><br></pre></td></tr></table></figure><h2 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h2><h3 id="Stylelint"><a href="#Stylelint" class="headerlink" title="Stylelint"></a>Stylelint</h3> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">(npm install --save-dev \</span><br><span class="line">  stylelint \</span><br><span class="line">  stylelint-processor-styled-components \</span><br><span class="line">  stylelint-config-styled-components \</span><br><span class="line">  stylelint-config-recommended)</span><br></pre></td></tr></table></figure><h3 id="Styled-Theming"><a href="#Styled-Theming" class="headerlink" title="Styled Theming"></a><a href="https://styled-components.com/docs/tooling#styled-theming" target="_blank" rel="noopener">Styled Theming</a></h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"><span class="keyword">import</span> styled, &#123; ThemeProvider &#125; <span class="keyword">from</span> <span class="string">'styled-components'</span></span><br><span class="line"><span class="keyword">import</span> theme <span class="keyword">from</span> <span class="string">'styled-theming'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> boxBackgroundColor = theme(<span class="string">'mode'</span>, &#123;</span><br><span class="line">  light: <span class="string">'#fff'</span>,</span><br><span class="line">  dark: <span class="string">'#000'</span>,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Box = styled.div<span class="string">`</span></span><br><span class="line"><span class="string">  background-color: <span class="subst">$&#123;boxBackgroundColor&#125;</span>;</span></span><br><span class="line"><span class="string">`</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">App</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;ThemeProvider theme=&#123;&#123; <span class="attr">mode</span>: <span class="string">'light'</span> &#125;&#125;&gt;</span><br><span class="line">      &lt;Box&gt;Hello World&lt;<span class="regexp">/Box&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>ThemeProvider&gt;</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="vscode-styled-components"><a href="#vscode-styled-components" class="headerlink" title="vscode-styled-components"></a><strong>vscode-styled-components</strong></h3><h3 id="typescript-plugin-styled-components"><a href="#typescript-plugin-styled-components" class="headerlink" title="typescript-plugin-styled-components"></a><a href="https://github.com/Igorbek/typescript-plugin-styled-components" target="_blank" rel="noopener">typescript-plugin-styled-components</a></h3><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><h3 id="优点："><a href="#优点：" class="headerlink" title="优点："></a>优点：</h3><ol><li>活跃的<a href="https://github.com/styled-components/styled-components/graphs/contributors" target="_blank" rel="noopener">社区</a>。</li><li><strong>CSS的模板文字语法</strong>。这意味着，如果您可以编写普通的CSS，就可以为组件设置样式，而不必学习新的语法。</li><li>Sass支持。</li><li>自动提供前缀</li><li>组件更加独立清晰，语义化更清晰，维护简单，第二个人接手很快，也不用顾忌之前的样式冲突。</li><li>减轻了大家类名命名的负担。</li><li>可实现仅加载所需的最少代码。</li><li>兼容性良好 v4.x（React v16.3 +：IE11，IE 9+（带有Map + Set polyfills）</li></ol><h3 id="缺点："><a href="#缺点：" class="headerlink" title="缺点："></a>缺点：</h3><ol><li>使用<strong>vscode-styled-components</strong> 有提示，但提示速度较慢，没有scss、css提示友好，比如margin-left，我在scss中只需要ml回车就行了，在styled-components组件中就还是得打全。</li><li>产品改样式，想要从HTML中定位确切的知道代码中某个 class 在哪儿用到很难</li></ol><h3 id="so"><a href="#so" class="headerlink" title="so:"></a>so:</h3><p>优点&gt;缺点，go on 用起来吧！</p>]]></content>
    
    <summary type="html">
    
      styled-components以组件的形式来声明样式，让样式也成为组件，从而分离逻辑组件与展示组件。
    
    </summary>
    
      <category term="默认分类" scheme="https://kitions.github.io/categories/%E9%BB%98%E8%AE%A4%E5%88%86%E7%B1%BB/"/>
    
    
      <category term="styled-components" scheme="https://kitions.github.io/tags/styled-components/"/>
    
  </entry>
  
  <entry>
    <title>React + antd-table 表格拖拽</title>
    <link href="https://kitions.github.io/2020/07/22/React%20+%20antd-table%20%E8%A1%A8%E6%A0%BC%E6%8B%96%E6%8B%BDclass%E7%B1%BB%E5%86%99%E6%B3%95/"/>
    <id>https://kitions.github.io/2020/07/22/React + antd-table 表格拖拽class类写法/</id>
    <published>2020-07-22T10:52:24.000Z</published>
    <updated>2020-07-23T01:35:48.732Z</updated>
    
    <content type="html"><![CDATA[<h1 id="React-antd-table-表格拖拽class类写法-Immutability-Helpers介绍"><a href="#React-antd-table-表格拖拽class类写法-Immutability-Helpers介绍" class="headerlink" title="React + antd-table 表格拖拽class类写法(Immutability Helpers介绍)"></a>React + antd-table 表格拖拽class类写法(Immutability Helpers介绍)</h1><h2 id="第一种方案：react-dnt"><a href="#第一种方案：react-dnt" class="headerlink" title="第一种方案：react-dnt"></a>第一种方案：react-dnt</h2><h3 id="主组件"><a href="#主组件" class="headerlink" title="主组件"></a>主组件</h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; DndProvider &#125; <span class="keyword">from</span> <span class="string">'react-dnd'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; HTML5Backend &#125; <span class="keyword">from</span> <span class="string">'react-dnd-html5-backend'</span>;</span><br><span class="line"><span class="keyword">import</span> update <span class="keyword">from</span> <span class="string">'immutability-helper'</span>;</span><br><span class="line"></span><br><span class="line">moveRow = <span class="function">(<span class="params">dragIndex: number, hoverIndex: number</span>) =&gt;</span> &#123;</span><br><span class="line">   <span class="keyword">const</span> &#123; dataSource &#125; = <span class="keyword">this</span>.state;</span><br><span class="line">   <span class="keyword">const</span> dragRow = dataSource[dragIndex];</span><br><span class="line">   <span class="keyword">this</span>.setState(</span><br><span class="line">     <span class="comment">// 下面有对这个函数的说明</span></span><br><span class="line">     update(<span class="keyword">this</span>.state, &#123;</span><br><span class="line">       dataSource: &#123;</span><br><span class="line">         $splice: [[dragIndex, <span class="number">1</span>], [hoverIndex, <span class="number">0</span>, dragRow]],</span><br><span class="line">       &#125;,</span><br><span class="line">     &#125;), () =&gt; &#123;</span><br><span class="line">       <span class="built_in">console</span>.log(<span class="keyword">this</span>.state.dataSource)</span><br><span class="line">     &#125;</span><br><span class="line">   );</span><br><span class="line"> &#125;;</span><br><span class="line"></span><br><span class="line">public render() &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; dataSource &#125; = <span class="keyword">this</span>.state;</span><br><span class="line">  &lt;DndProvider backend=&#123;HTML5Backend&#125;&gt;</span><br><span class="line">    &lt;Table</span><br><span class="line">      columns=&#123;<span class="keyword">this</span>.renderColumns()&#125;</span><br><span class="line">      dataSource=&#123;dataSource&#125;</span><br><span class="line">      rowKey=<span class="string">"index"</span></span><br><span class="line">      bordered=&#123;<span class="literal">false</span>&#125;</span><br><span class="line">      pagination=&#123;<span class="literal">false</span>&#125;</span><br><span class="line">      locale=&#123;&#123; <span class="attr">emptyText</span>: <span class="string">"暂未选择"</span> &#125;&#125;</span><br><span class="line">      components=&#123;&#123;</span><br><span class="line">        body: &#123;</span><br><span class="line">          row: DragableBodyRow,</span><br><span class="line">        &#125;,</span><br><span class="line">        &#125;&#125;</span><br><span class="line">      onRow=&#123;(record, index) =&gt; (&#123;</span><br><span class="line">        index,</span><br><span class="line">        moveRow: <span class="keyword">this</span>.moveRow,</span><br><span class="line">      &#125;)&#125;</span><br><span class="line"></span><br><span class="line">      /&gt;</span><br><span class="line">  &lt;<span class="regexp">/DndProvider&gt;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; DragSource, DropTarget &#125; <span class="keyword">from</span> <span class="string">'react-dnd'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> dragingIndex = <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BodyRow</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span>&lt;<span class="title">any</span>&gt; </span>&#123;</span><br><span class="line">    render() &#123;</span><br><span class="line">        <span class="keyword">const</span> &#123; isOver, connectDragSource, connectDropTarget, moveRow, ...restProps &#125; = <span class="keyword">this</span>.props;</span><br><span class="line">        <span class="keyword">const</span> style = &#123; ...restProps.style, <span class="attr">cursor</span>: <span class="string">'move'</span> &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> className = restProps.className;</span><br><span class="line">        <span class="keyword">if</span> (isOver) &#123;</span><br><span class="line">            <span class="keyword">if</span> (restProps.index &gt; dragingIndex) &#123;</span><br><span class="line">                className += <span class="string">' drop-over-downward'</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (restProps.index &lt; dragingIndex) &#123;</span><br><span class="line">                className += <span class="string">' drop-over-upward'</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> connectDragSource(</span><br><span class="line">            connectDropTarget(<span class="xml"><span class="tag">&lt;<span class="name">tr</span> &#123;<span class="attr">...restProps</span>&#125; <span class="attr">className</span>=<span class="string">&#123;className&#125;</span> <span class="attr">style</span>=<span class="string">&#123;style&#125;</span> /&gt;</span>),</span></span><br><span class="line"><span class="xml">        );</span></span><br><span class="line"><span class="xml">    &#125;</span></span><br><span class="line"><span class="xml">&#125;</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">const rowSource = &#123;</span></span><br><span class="line"><span class="xml">    beginDrag(props: any) &#123;</span></span><br><span class="line"><span class="xml">        dragingIndex = props.index;</span></span><br><span class="line"><span class="xml">        return &#123;</span></span><br><span class="line"><span class="xml">            index: props.index,</span></span><br><span class="line"><span class="xml">        &#125;;</span></span><br><span class="line"><span class="xml">    &#125;,</span></span><br><span class="line"><span class="xml">&#125;;</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">const rowTarget = &#123;</span></span><br><span class="line"><span class="xml">    drop(props: any, monitor: any) &#123;</span></span><br><span class="line"><span class="xml">        const dragIndex = monitor.getItem().index;</span></span><br><span class="line"><span class="xml">        const hoverIndex = props.index;</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">        // Don't replace items with themselves</span></span><br><span class="line"><span class="xml">        if (dragIndex === hoverIndex) &#123;</span></span><br><span class="line"><span class="xml">            return;</span></span><br><span class="line"><span class="xml">        &#125;</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">        // Time to actually perform the action</span></span><br><span class="line"><span class="xml">        props.moveRow(dragIndex, hoverIndex);</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">        // Note: we're mutating the monitor item here!</span></span><br><span class="line"><span class="xml">        // Generally it's better to avoid mutations,</span></span><br><span class="line"><span class="xml">        // but it's good here for the sake of performance</span></span><br><span class="line"><span class="xml">        // to avoid expensive index searches.</span></span><br><span class="line"><span class="xml">        monitor.getItem().index = hoverIndex;</span></span><br><span class="line"><span class="xml">    &#125;,</span></span><br><span class="line"><span class="xml">&#125;;</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">export const DragableBodyRow = DropTarget('row', rowTarget, (connect, monitor) =&gt; (&#123;</span></span><br><span class="line"><span class="xml">    connectDropTarget: connect.dropTarget(),</span></span><br><span class="line"><span class="xml">    isOver: monitor.isOver(),</span></span><br><span class="line"><span class="xml">&#125;))(</span></span><br><span class="line"><span class="xml">    DragSource('row', rowSource, connect =&gt; (&#123;</span></span><br><span class="line"><span class="xml">        connectDragSource: connect.dragSource(),</span></span><br><span class="line"><span class="xml">    &#125;))(BodyRow),</span></span><br><span class="line"><span class="xml">);</span></span><br></pre></td></tr></table></figure><h3 id="css"><a href="#css" class="headerlink" title="css"></a>css</h3><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">:global &#123;</span><br><span class="line">    .drop-over-downward td &#123;</span><br><span class="line">        border-bottom: <span class="number">2px</span> dashed <span class="number">#1890ff</span><span class="meta">!important</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-class">.drop-over-upward</span> <span class="selector-tag">td</span> &#123;</span><br><span class="line">        <span class="attribute">border-top</span>: <span class="number">2px</span> dashed <span class="number">#1890ff</span><span class="meta">!important</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="第二种方案：react-sortable-hoc"><a href="#第二种方案：react-sortable-hoc" class="headerlink" title="第二种方案：react-sortable-hoc"></a>第二种方案：react-sortable-hoc</h2><p>未做组件抽离，凑合看</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; arrayMove, SortableContainer, SortableElement, SortableHandle &#125; <span class="keyword">from</span> <span class="string">'react-sortable-hoc'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> SortableItem = SortableElement(<span class="function">(<span class="params">props: any</span>) =&gt;</span></span><br><span class="line">    &lt;tr &#123;...props&#125; /&gt;</span><br><span class="line">);</span><br><span class="line"><span class="keyword">const</span> SortableContainers = SortableContainer(<span class="function">(<span class="params">props: any</span>) =&gt;</span></span><br><span class="line">    &lt;tbody &#123;...props&#125; /&gt;</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> DragHandle = SortableHandle(<span class="function"><span class="params">()</span> =&gt;</span> (</span><br><span class="line">    &lt;span className=<span class="string">"sortIcon"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line">));</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AAA</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span>&lt;<span class="title">Props</span>, <span class="title">State</span>&gt; </span>&#123;</span><br><span class="line">  onSortEnd = <span class="function">(<span class="params">params: any</span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">const</span> &#123; oldIndex, newIndex &#125; = params;</span><br><span class="line">          <span class="keyword">const</span> &#123; dataSource &#125; = <span class="keyword">this</span>.state;</span><br><span class="line"></span><br><span class="line">          <span class="keyword">if</span> (oldIndex !== newIndex) &#123;</span><br><span class="line">              <span class="keyword">const</span> newData = arrayMove(<span class="function">(<span class="params">[] <span class="keyword">as</span> ISettleItemUse[]</span>).<span class="params">concat</span>(<span class="params">dataSource</span>), <span class="params">oldIndex</span>, <span class="params">newIndex</span>).<span class="params">filter</span>(<span class="params">(el: any</span>) =&gt;</span> !!el);</span><br><span class="line">              <span class="keyword">this</span>.setState(&#123; <span class="attr">dataSource</span>: newData &#125;);</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;;</span><br><span class="line"></span><br><span class="line">  DragableBodyRow = <span class="function">(<span class="params">params: any</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; ...restProps &#125; = params</span><br><span class="line">    <span class="keyword">const</span> &#123; dataSource &#125; = <span class="keyword">this</span>.state;</span><br><span class="line">    <span class="keyword">const</span> index = dataSource.findIndex(<span class="function"><span class="params">x</span> =&gt;</span> x.index === restProps[<span class="string">'data-row-key'</span>]);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">SortableItem</span> <span class="attr">index</span>=<span class="string">&#123;index&#125;</span> &#123;<span class="attr">...restProps</span>&#125; /&gt;</span></span></span><br><span class="line"><span class="xml">  &#125;;</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">  render()&#123;</span></span><br><span class="line"><span class="xml">      const DraggableContainer = (props: any) =&gt; (</span></span><br><span class="line"><span class="xml">              <span class="tag">&lt;&gt;</span></span></span><br><span class="line">                  &lt;SortableContainers</span><br><span class="line">                      useDragHandle</span><br><span class="line">                      helperClass="row-dragging"</span><br><span class="line">                      onSortEnd=&#123;this.onSortEnd&#125;</span><br><span class="line">                      &#123;...props&#125;</span><br><span class="line">                  /&gt;</span><br><span class="line">              &lt;/&gt;</span><br><span class="line">          );</span><br><span class="line"></span><br><span class="line">     &lt;Table</span><br><span class="line">       columns=&#123;this.renderColumns()&#125;</span><br><span class="line">       dataSource=&#123;dataSource&#125;</span><br><span class="line">       rowKey="index"</span><br><span class="line">       bordered=&#123;false&#125;</span><br><span class="line">       pagination=&#123;false&#125;</span><br><span class="line">       locale=&#123;&#123; emptyText: "暂未选择" &#125;&#125;</span><br><span class="line">       components=&#123;&#123;</span><br><span class="line">          body: &#123;</span><br><span class="line">            wrapper: DraggableContainer,</span><br><span class="line">              row: this.DragableBodyRow,</span><br><span class="line">          &#125;,</span><br><span class="line">        &#125;&#125;</span><br><span class="line">       /&gt;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> &lt;DragHandle /&gt;为拖动的图标</span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">// 拖动</span><br><span class="line">  <span class="selector-class">.row-dragging</span> &#123;</span><br><span class="line">      <span class="attribute">background</span>: <span class="number">#fafafa</span>;</span><br><span class="line">      <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#ccc</span>;</span><br><span class="line"></span><br><span class="line">      th &#123;</span><br><span class="line">          color: $color-333;</span><br><span class="line">          <span class="selector-tag">background</span>: <span class="selector-id">#E9EAEA</span> !<span class="selector-tag">important</span>;</span><br><span class="line">          <span class="selector-tag">font-size</span>: 12<span class="selector-tag">px</span>;</span><br><span class="line">          <span class="selector-tag">padding</span>: 8<span class="selector-tag">px</span> 10<span class="selector-tag">px</span> !<span class="selector-tag">important</span>;</span><br><span class="line">          <span class="selector-tag">font-weight</span>: <span class="selector-tag">normal</span>;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="selector-tag">td</span> &#123;</span><br><span class="line">          <span class="attribute">font-size</span>: <span class="number">12px</span>;</span><br><span class="line">          <span class="attribute">padding</span>: <span class="number">10px</span> <span class="number">10px</span> <span class="meta">!important</span>;</span><br><span class="line">          <span class="attribute">color</span>: $color-<span class="number">333</span>;</span><br><span class="line">          <span class="attribute">visibility</span>: hidden;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="selector-class">.drag-visible</span> &#123;</span><br><span class="line">          <span class="attribute">visibility</span>: visible;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>该方案在使用后有点卡顿，时间急没找到 卡顿的原因。使用了第一种方案</p><p>可能是跟表格中的动态编辑的select、input有关，setState导致tbody重新渲染，造成卡顿，select和input也有许多联动，目前猜是这个原因，后期有时间，找到一下这个原因。</p><h1 id="immutability-helper"><a href="#immutability-helper" class="headerlink" title="immutability-helper"></a>immutability-helper</h1><p>yarn add immutability-helper</p><p>上文中update $splice</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> initialArray = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>, <span class="string">'e'</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * API: &#123;$splice: array of arrays&#125;</span></span><br><span class="line"><span class="comment"> * 同数组的 splice 方法</span></span><br><span class="line"><span class="comment"> *      数组 arrays 中包含的是所有需要执行的操作集合</span></span><br><span class="line"><span class="comment"> *      元素 array 中第一个元素代表下标，第二个元素代表需要删除的个数，第三个元素代表需要插入到 initialArray 中的的元素</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * PS:  1、可以在 arrays 中执行多个集合；</span></span><br><span class="line"><span class="comment"> *      2、两个操作不是同时执行，而是按顺序执行，后面的操作会在前面一个操作的执行结果上执行</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> spliceArray = update(initialArray, &#123; <span class="attr">$splice</span>: [[<span class="number">1</span>, <span class="number">2</span>], [<span class="number">2</span>, <span class="number">0</span>, <span class="string">'f'</span>, <span class="string">'g'</span>]] &#125;);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'spliceArray：'</span>, spliceArray);  <span class="comment">// =&gt; [ 'a', 'd', 'f', 'g', 'e' ]</span></span><br></pre></td></tr></table></figure><p>在不更改原始源的情况下改变数据副本。</p><blockquote><p>Immutable data encourages pure functions (data-in, data-out) and lends itself to much simpler application development and enabling techniques from functional programming such as lazy evaluation.</p></blockquote><p>API</p><p><code>$push</code> —— 数组;</p><p><code>$unshift</code> —— 数组;</p><p><code>$splice</code> —— 数组;</p><p><code>$set</code> —— 替换/覆盖/合并原数据;</p><p><code>$toggle</code> —— array of strings ，toggles a list of boolean fields from the target object；</p><p><code>$unset</code> —— remove the list of keys in array from the target object;</p><p><code>$merge</code> —— 合并对象;</p><p><code>$apply</code> ——  passes in the current value to the function and updates it with the new returned value；</p><p><code>$add</code> —— 新增;</p><p><code>$remove</code> —— 删除。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">$splice</span><br><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">66</span>];</span><br><span class="line">  <span class="keyword">let</span> arr2 = update(arr,&#123;</span><br><span class="line">    $splice : [[<span class="number">1</span>,<span class="number">2</span>,[<span class="number">66788</span>,<span class="number">99</span>],&#123;<span class="attr">a</span>:<span class="number">123</span>,<span class="attr">b</span>:<span class="string">"fff"</span>&#125;]], <span class="comment">// or [0,1,"从我开始是插入的内容",88,89,90,"后面可以很多，是数组、对象、字符串都行"]</span></span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="built_in">console</span>.log(arr2); </span><br><span class="line"></span><br><span class="line">  <span class="comment">//复杂一些的用法：</span></span><br><span class="line">  <span class="keyword">let</span> obj=&#123;</span><br><span class="line">    name:<span class="string">"immutable"</span>,</span><br><span class="line">    list :[<span class="number">1</span>,<span class="number">2</span>,[<span class="number">90</span>,<span class="number">55</span>,<span class="number">44</span>,<span class="number">3</span>,<span class="number">22</span>,<span class="number">55</span>],<span class="number">3</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>]</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">let</span> obj2 = update(obj,&#123;</span><br><span class="line">    list:&#123;</span><br><span class="line">      [<span class="number">2</span>]:<span class="function"><span class="params">value</span>=&gt;</span>update(value,&#123;</span><br><span class="line">        $splice:[[<span class="number">0</span>,<span class="number">2</span>]]  <span class="comment">// [90,55,44,3,22,55] =&gt; [44, 3, 22, 55]</span></span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><p>参考</p><p><a href="https://www.jianshu.com/p/074bbb7a36b2" target="_blank" rel="noopener">immutability因React官方出镜之使用总结分享！</a></p><p><a href="https://ant.design/components/table-cn/" target="_blank" rel="noopener">https://ant.design/components/table-cn/</a></p><p><a href="https://react-dnd.github.io/react-dnd/docs/overview" target="_blank" rel="noopener">https://react-dnd.github.io/react-dnd/docs/overview</a></p>]]></content>
    
    <summary type="html">
    
      React + antd-table 表格拖拽class类写法，顺便看到了Immutability Helpers，觉得还不错，简单的看了看
    
    </summary>
    
      <category term="默认分类" scheme="https://kitions.github.io/categories/%E9%BB%98%E8%AE%A4%E5%88%86%E7%B1%BB/"/>
    
    
      <category term="React" scheme="https://kitions.github.io/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>setState是同步和还是异步的</title>
    <link href="https://kitions.github.io/2020/06/30/setState/"/>
    <id>https://kitions.github.io/2020/06/30/setState/</id>
    <published>2020-06-30T06:34:54.000Z</published>
    <updated>2021-01-07T07:20:50.139Z</updated>
    
    <content type="html"><![CDATA[<h1 id="setState"><a href="#setState" class="headerlink" title="setState"></a>setState</h1><p>setState立马执行之后，是无法直接获取到最新的state的，需要经过React对state的所有改变进行合并处理之后，才会去计算新的虚拟dom，再根据最新的虚拟dom去重新渲染真实dom。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">this</span>.setState(&#123; <span class="attr">count</span>: <span class="keyword">this</span>.state.count + <span class="number">1</span> &#125;);</span><br><span class="line">   <span class="built_in">console</span>.log(<span class="string">"console: "</span> + <span class="keyword">this</span>.state.count); <span class="comment">// 0</span></span><br><span class="line">   <span class="keyword">this</span>.setState(&#123; <span class="attr">count</span>: <span class="keyword">this</span>.state.count + <span class="number">1</span> &#125;, () =&gt; &#123;</span><br><span class="line">     <span class="built_in">console</span>.log(<span class="string">"console from callback: "</span> + <span class="keyword">this</span>.state.count); <span class="comment">// 2</span></span><br><span class="line">   &#125;);</span><br><span class="line">   <span class="keyword">this</span>.setState(<span class="function"><span class="params">prevState</span> =&gt;</span> &#123;</span><br><span class="line">     <span class="built_in">console</span>.log(<span class="string">"console from func: "</span> + prevState.count); <span class="comment">// 1</span></span><br><span class="line">     <span class="keyword">return</span> &#123;</span><br><span class="line">       count: prevState.count + <span class="number">1</span></span><br><span class="line">     &#125;;</span><br><span class="line">   &#125;, ()=&gt;&#123;</span><br><span class="line">     <span class="built_in">console</span>.log(<span class="string">'last console: '</span>+ <span class="keyword">this</span>.state.count)</span><br><span class="line">   &#125;);</span><br></pre></td></tr></table></figure><p>结果</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>: <span class="number">0</span> </span><br><span class="line"><span class="built_in">console</span> <span class="keyword">from</span> func: <span class="number">1</span> </span><br><span class="line"><span class="built_in">console</span> <span class="keyword">from</span> callback: <span class="number">2</span></span><br><span class="line">last <span class="built_in">console</span>: <span class="number">2</span></span><br></pre></td></tr></table></figure><p>React 其实会维护着一个 state 的更新队列，每次调用 setState 都会先把当前修改的 state 推进这个队列，在最后，React 会对这个队列进行合并处理，然后去执行回调。根据最终的合并结果再去走下面的流程（更新虚拟dom，触发渲染）。</p><p>setState为什么要设计成“异步”的，因为<code>setState()</code>之后无法立马获取最新的 state，给人的感觉便是异步去设置状态。也确实是有异步的感觉。</p><h3 id="合成事件"><a href="#合成事件" class="headerlink" title="合成事件"></a>合成事件</h3><p>React为了解决跨平台，兼容性问题，自己封装了一套事件机制，代替了原生的事件，像在jsx中常见的onClick、onChange这些都是合成事件</p><h3 id="原生事件"><a href="#原生事件" class="headerlink" title="原生事件"></a>原生事件</h3><p>原生事件是指非React合成事件，原生自带的事件监听addEventListener，或者也可以用原生js，jquery直接document.querySelector().onclick 这种绑定事件的形式都属于原生事件。</p><p><a href="https://codesandbox.io/s/k2jwvz03m3?expanddevtools=1&amp;file=/src/index.js" target="_blank" rel="noopener">点击执行</a>，点一点理解就很清楚了</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  state = &#123;</span><br><span class="line">    count: <span class="number">0</span></span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  componentDidMount() &#123;</span><br><span class="line">    <span class="comment">// 生命周期中调用</span></span><br><span class="line">    <span class="keyword">this</span>.setState(&#123; <span class="attr">count</span>: <span class="keyword">this</span>.state.count + <span class="number">1</span> &#125;);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"lifecycle: "</span> + <span class="keyword">this</span>.state.count);</span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// setTimeout中调用</span></span><br><span class="line">      <span class="keyword">this</span>.setState(&#123; <span class="attr">count</span>: <span class="keyword">this</span>.state.count + <span class="number">1</span> &#125;);</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">"setTimeout: "</span> + <span class="keyword">this</span>.state.count);</span><br><span class="line">    &#125;, <span class="number">0</span>);</span><br><span class="line">    <span class="built_in">document</span>.getElementById(<span class="string">"div2"</span>).addEventListener(<span class="string">"click"</span>, <span class="keyword">this</span>.increment2);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  increment = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 合成事件中调用</span></span><br><span class="line">    <span class="keyword">this</span>.setState(&#123; <span class="attr">count</span>: <span class="keyword">this</span>.state.count + <span class="number">1</span> &#125;);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"react event: "</span> + <span class="keyword">this</span>.state.count);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  increment2 = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 原生事件中调用</span></span><br><span class="line">    <span class="keyword">this</span>.setState(&#123; <span class="attr">count</span>: <span class="keyword">this</span>.state.count + <span class="number">1</span> &#125;);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"dom event: "</span> + <span class="keyword">this</span>.state.count);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div className=<span class="string">"App"</span>&gt;</span><br><span class="line">        &lt;h2&gt;couont: &#123;<span class="keyword">this</span>.state.count&#125;&lt;<span class="regexp">/h2&gt;</span></span><br><span class="line"><span class="regexp">        &lt;div id="div1" onClick=&#123;this.increment&#125;&gt;</span></span><br><span class="line"><span class="regexp">          click me and count+1</span></span><br><span class="line"><span class="regexp">        &lt;/</span>div&gt;</span><br><span class="line">        &lt;div id=<span class="string">"div2"</span>&gt;click me and count+<span class="number">1</span>&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">      &lt;/</span>div&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlgy1gga4li3ykej31400mawj5.jpg" alt="image-20200630105133004"></p><h3 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h3><blockquote><p>下面的异步是带引号的</p></blockquote><ol><li>setState 只在合成事件和钩子函数中的是异步的，在原生事件和<strong>setTimeout</strong>中都是同步的</li><li>setState 的异步并不是说内部由异步代码实现，其实本身执行的过程中和代码都是同步的，只是合成事件和钩子函数的调用顺序在更新之前，导致在合成事件和钩子函数中没法立马拿到更新后的值，形成了所谓的异步，当然可以通过第二个参数setState(partialState, callback)中的callback拿到更新后的结果</li><li>setState 的批量更新优化也是建立在异步（合成事件，钩子函数）只上的，在原生事件和setTimeout中不会批量更新，在异步中如果对同一个值进行多次setTimeout，setState的批量更新策略会对其进行覆盖，取最后一次的执行，如果是同事setState对个不同的值，在更新时会对其进行合并批量更新</li></ol><h3 id="20210107补充"><a href="#20210107补充" class="headerlink" title="20210107补充"></a>20210107补充</h3><p>setState 异步的，性能优化过程中的batchedUpdates批处理，当触发事件，多个this.setState,只触发一次，多次合并为一次，提升react性能。</p><p>全局变量executionContext |= BatchedContext<br>setTimeOut, 全部的上下文不存在BathedContext,跳出,同步更新</p><p>以上是基于ReactDom.render(<app>, rootElement)   legacy模式</app></p><p>如果开启Concurrent模式则全是异步， ReactDom.unstable_createRoot(rootElement).render(App /)</p><p><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gmf5oykrulj31050ittb6.jpg" alt=""><br><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gmf5oxt81bj30gq09kt9p.jpg" alt=""></p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol><li><a href="https://juejin.im/post/5b45c57c51882519790c7441" target="_blank" rel="noopener">https://juejin.im/post/5b45c57c51882519790c7441</a></li></ol>]]></content>
    
    <summary type="html">
    
      setState 的合并是通过队列实现的。通过创建一个队列来保存每次 setState 的数据，然后每隔一段时间，清空和这个队列并渲染组件。在 React 的 setState 中，利用 JavaScript 的事件循环机制对多个 setState 调用进行合并。首先创建一个队列保存每次 setState 的数据，在一次事件循环的所有同步任务之后，清空着队列，将队列中的所有 setState 进行合并，并进行一次性更新渲染。这样在一次事件循环的，最多只会执行一次合并操作，并且只会渲染一次组件。
    
    </summary>
    
      <category term="默认分类" scheme="https://kitions.github.io/categories/%E9%BB%98%E8%AE%A4%E5%88%86%E7%B1%BB/"/>
    
    
      <category term="react" scheme="https://kitions.github.io/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>宏任务与微任务</title>
    <link href="https://kitions.github.io/2020/05/29/%E5%AE%8F%E4%BB%BB%E5%8A%A1%E4%B8%8E%E5%BE%AE%E4%BB%BB%E5%8A%A1/"/>
    <id>https://kitions.github.io/2020/05/29/宏任务与微任务/</id>
    <published>2020-05-29T12:34:54.000Z</published>
    <updated>2020-06-30T07:17:21.421Z</updated>
    
    <content type="html"><![CDATA[<h1 id="宏任务与微任务"><a href="#宏任务与微任务" class="headerlink" title="宏任务与微任务"></a>宏任务与微任务</h1><p>在点击事件冒泡捕获的处理中，通过使用setTimeout 的方式，想要调整某个代码的执行顺序的话，其具体的执行顺序，由一套  <strong>机制</strong>  去实现，这套机制就是通过定义 <strong>宏任务与微任务</strong> 来安排执行顺序。</p><h2 id="异步机制：javascript事件循环"><a href="#异步机制：javascript事件循环" class="headerlink" title="异步机制：javascript事件循环"></a>异步机制：javascript事件循环</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlgy1ggabuqi9gbj313s0u0n1x.jpg" alt="image-20200507113822255"></p><p><strong>内存堆</strong>：这是内存分配发生的地方。当V8引擎遇到变量声明和函数声明的时候，就把它们存储在堆里面。</p><p><strong>调用栈</strong>：这是你的代码执行时的地方。当引擎遇到像函数调用之类的可执行单元，就会把它们推入调用栈。</p><p>JS单线程，指的是在JS引擎中，解析执行JS代码的调用栈是唯一的，所有的JS代码都在这一个调用栈里按照调用顺序执行，不能同时执行多个函数。</p><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlgy1ggabvgopfkj31470u0jyq.jpg" alt="image-20200507154251938" style="zoom: 33%;"></p><p><strong>Web APIs</strong>：还有很多引擎之外的 API，我们把这些称为浏览器提供的 Web API，比如说 事件监听函数、DOM、HTTP／AJAX请求、setTimeout等等。</p><p><strong>回调队列</strong>（Event Queue)：按照<strong>先进先出</strong>的顺序存储所有的回调函数。在任意时间，只要Web API容器中的事件达到触发条件，就可以把回调函数添加到回调队列中去。</p><p><strong>事件循环 </strong> (Event Loop)：持续的检测调用栈和回调队列，如果检测到调用栈为空，它就会通知回调队列把队列中的第一个回调函数推入执行栈。</p><h3 id="机制"><a href="#机制" class="headerlink" title="机制"></a>机制</h3><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlgy1ggabvmfj03j30vw0qo7fl.jpg" alt="tapd_55367591_base64_1587813146_16"></p><p>JS运行时环境的工作机制：</p><ol><li><strong>JS引擎</strong>：（唯一主线程）按顺序解析代码，遇到函数声明，入堆，遇到函数调用，入栈；</li><li>如果是同步函数调用，直接执行得到结果，同步函数弹出栈，继续下一个函数调用；</li><li>如果是异步函数调用，分发给<strong>Web API</strong>（多个辅助线程），进入Event Table并注册函数，异步函数弹出栈，继续下一个函数调用；</li><li>Web API中，异步函数在相应辅助线程中处理完成后，即异步函数达到触发条件了，Event Table就将回调函数推入<strong>回调队列</strong>中。</li><li><strong>Event Loop</strong>：不停地检查主线程的调用栈与回调队列，当调用栈空时，就把回调队列中的第一个任务推入栈中执行，不断循环。</li></ol><h3 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h3><p>下面是一段简易的 <code>ajax</code> 请求代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">let data = [];</span><br><span class="line">$.ajax(&#123;</span><br><span class="line">    url:www.javascript.com,</span><br><span class="line">    data:data,</span><br><span class="line">    success:() =&gt; &#123;</span><br><span class="line">        console.log(&apos;发送成功!&apos;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line">console.log(&apos;代码执行结束&apos;);</span><br></pre></td></tr></table></figure><ul><li><p>ajax进入Event Table，注册回调函数 <code>success</code> 。</p></li><li><p>执行 <code>console.log(&#39;代码执行结束&#39;)</code> 。</p></li><li><p>ajax事件完成，回调函数 <code>success</code> 进入Event Queue。</p></li><li><p>主线程从Event Queue读取回调函数 <code>success</code> 并执行。</p></li></ul><p>下面是一段更详细的例子：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Hey, Why am I last?'</span>)</span><br><span class="line">&#125;, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sayHi</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Hello'</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sayBye</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Goodbye'</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">sayHi()</span><br><span class="line">sayBye()</span><br></pre></td></tr></table></figure><p>执行过程是这样的：</p><ol><li>JS引擎会检查整段代码的语法错误，如果没有错误，就从头开始深度解析</li><li>首先遇到setTimeout函数调用，把它推入执行栈顶</li><li>解析函数体，发现setTimeout函数是Web API的一种，因此就把它分发到Web API模块然后推出栈</li><li>因为定时器设置了0ms延迟，因此Web API模块立即把它的匿名回调函数推入到回调函数函数队列。事件循环检测执行栈是否是空闲，但是当前栈并不空闲，因为…</li><li>当setTimeout函数一被分发到Web API模块，JS引擎发现了两个函数声明，把它们存储在堆内存里，然后遇到了sayHi函数的调用，就把它推入了栈顶</li><li>sayHi函数调用了console.log函数，因此console.log就被推入了栈顶</li><li>JS引擎开始解析console.log的函数体，它接收了一个消息去打印‘Hello’，然后被弹出栈</li><li>JS引擎返回到函数sayHi的执行，遇到函数的结束符号}之后，把sayHi弹出栈</li><li>sayHi函数一出栈，紧接着sayBye函数被调用，它就被推入栈顶，被解析，调用console.log，把console.log推入栈顶，打印一条消息，弹出栈。然后sayBye函数弹出栈</li><li>事件循环检测到执行栈终于空闲了，通知回调队列，然后回调队列把其中的匿名函数推入执行栈</li><li>匿名函数（就是setTimeout的回调函数）被解析，调用console.log，console.log推入栈顶</li><li>console.log执行完毕、再出栈</li><li>匿名函数再被推出栈，程序结束</li></ol><h2 id="另一个异步机制：宏任务与微任务"><a href="#另一个异步机制：宏任务与微任务" class="headerlink" title="另一个异步机制：宏任务与微任务"></a>另一个异步机制：宏任务与微任务</h2><p>但是，JS异步还有一个机制，就是遇到宏任务，先处理宏任务——将宏任务放入Event Queue，然后再处理微任务——将微任务放入Event Queue。<br>注意，这里两个Event Queue不是同一个queue。<br>当js引擎的主线程执行栈为空时，它会优先从微任务queue里遍历注册的回调函数并一一执行，然后再从宏任务的queue里遍历执行注册的回调函数，如下图：</p><p><img src="https://bucket-1256530863.cos.ap-shanghai.myqcloud.com/tapd_55367591_1587814302_40.png" alt="tapd_55367591_1587814302_40" style="zoom: 50%;"></p><ul><li><p><strong>Web API</strong>中，异步函数在相应辅助线程中处理完成后，即异步函数达到触发条件了（比如setTimeout设置的10s后），如果异步函数是宏任务，则入<strong>宏任务消息队列</strong>，如果是微任务，则入<strong>微任务消息队列</strong>；</p></li><li><p><strong>Event Loop</strong>不停地检查主线程的调用栈与回调队列，当调用栈空时，就把<strong>微任务</strong>消息队列中的第一个任务推入栈中执行，执行完成后，再取第二个微任务，直到微任务消息队列为空；然后 去宏任务消息队列中取第一个宏任务推入栈中执行，当该宏任务执行完成后，在下一个宏任务执行前，再依次取出微任务消息队列中的所有微任务入栈执行。</p></li></ul><p>上述过程不断循环，每当微任务队列清空，可作为本轮事件循环的结束。</p><p><strong>宏任务</strong> (macrotask/task)</p><p>包括：</p><ul><li>I/O（例如点击一次<code>button</code>，上传一个文件，与程序产生交互的这些都可以称之为<code>I/O</code>）</li><li>setTimeout</li><li>setInterval</li><li>setImmediate（仅Node）</li><li>requestAnimationFrame（仅浏览器）</li><li>xhr</li><li>postMessage</li><li>MessageChannel</li></ul><p>对于 <code>setInterval(fn,ms)</code> 来说，不是每过 <code>ms</code> 秒会执行一次 <code>fn</code> ，而是每过 <code>ms</code> 秒，会有 <code>fn</code> 进入Event Queue。<br>一旦 <code>setInterval</code> 的回调函数 <code>fn</code> 执行时间超过了延迟时间 <code>ms</code> ，那么就完全看不出来有时间间隔了。</p><p><em>P.S. 有些地方会列出来<code>UI Rendering</code>，说这个也是宏任务，可是在读了<a href="https://html.spec.whatwg.org/multipage/webappapis.html#event-loop-processing-model" target="_blank" rel="noopener">HTML规范文档</a>以后，发现这很显然是和微任务平行的一个操作步骤</em></p><p><em>P.S. <code>requestAnimationFrame</code>在<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Window/requestAnimationFrame" target="_blank" rel="noopener">MDN的定义</a>为，下次页面重绘前所执行的操作，而重绘也是作为宏任务的一个步骤来存在的，且该步骤晚于微任务的执行</em></p><p><strong>微任务</strong> (microtask/job)</p><p>包括：</p><ul><li>Promise.then catch finally</li><li>process.nextTick（仅Node）</li><li>MutationObserver（仅浏览器）</li></ul><p><strong>P.S.</strong> new Promise在实例化的过程中所执行的代码都是同步进行的，而then中注册的回调才是异步执行的。 async/await底层是基于Promise封装的，所以await前面的代码相当于new Promise，是同步进行的，await后面的代码相当于then，才是异步进行的。</p><p><strong>P.S</strong>.  在<a href="https://promisesaplus.com/#notes" target="_blank" rel="noopener">Promise/A+的规范</a>中，<code>Promise</code>的实现可以是微任务，也可以是宏任务，但是普遍的共识表示(至少<code>Chrome</code>是这么做的)，<code>Promise</code>应该是属于微任务阵营的*</p><h3 id="例子-1"><a href="#例子-1" class="headerlink" title="例子"></a>例子</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">setTimeout(<span class="function"><span class="params">_</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="number">4</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">  resolve()</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">1</span>)</span><br><span class="line">&#125;).then(<span class="function"><span class="params">_</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">3</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">2</span>)</span><br></pre></td></tr></table></figure><p>最终输出结果为：1 &gt; 2 &gt; 3 &gt; 4</p><p>再来看一个嵌套的示例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Promise</span>.resolve().then(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'Promise1'</span>) </span><br><span class="line">  <span class="built_in">Promise</span>.resolve().then(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Promise2'</span>)    </span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">setTimeout(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'setTimeout1'</span>)</span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'setTimeout2'</span>)</span><br><span class="line">  &#125;,<span class="number">0</span>)</span><br><span class="line">&#125;,<span class="number">0</span>)</span><br></pre></td></tr></table></figure><p>最后输出结果是Promise1 &gt; setTimeout1 &gt; Promise2 &gt; setTimeout2</p><p>Promise1</p><h2 id="Node-环境"><a href="#Node-环境" class="headerlink" title="Node 环境"></a>Node 环境</h2><h3 id="Node中事件循环"><a href="#Node中事件循环" class="headerlink" title="Node中事件循环"></a>Node中事件循环</h3><p> Node用V8作为js的解析引擎，而I/O处理方面使用了自己设计的libuv，libuv是一个基于事件驱动的跨平台抽象层，封装了不同操作系统一些底层特性，对外提供统一的API，事件循环机制也是它里面的实现。 Node也是单线程，但是在处理Event Loop上与浏览器稍微有些不同。</p><p>在node里，有一些常用的异步API，这里简单介绍下他们：</p><h4 id="setImmediate"><a href="#setImmediate" class="headerlink" title="setImmediate()"></a><strong>setImmediate()</strong></h4><p><code>setImmediate()</code>在一次Event Loop执行完毕后立刻调用。 </p><p><code>setTimeout</code>则是通过计算一个延迟时间后进行执行。</p><p>所以如下示例，不能保证输出顺序。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">setTimeout(<span class="function"><span class="params">_</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">'setTimeout'</span>))</span><br><span class="line">setImmediate(<span class="function"><span class="params">_</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">'setImmediate'</span>))</span><br></pre></td></tr></table></figure><p>而如果是下面这样，则一定是setImmediate先输出。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">setTimeout(<span class="function"><span class="params">_</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">'setTimeout'</span>), <span class="number">20</span>)</span><br><span class="line">setImmediate(<span class="function"><span class="params">_</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">'setImmediate'</span>))</span><br></pre></td></tr></table></figure><h4 id="process-nextTick"><a href="#process-nextTick" class="headerlink" title="process.nextTick()"></a><strong>process.nextTick()</strong></h4><p><code>process.nextTick()</code>会将回调函数放入队列中,在下一轮Tick时取出执行</p><p>这是因为 ，process.nextTick()中的回调函数执行的优先级要高于setImmediate()。<br>Node里，事件循环对观察者的检查是有先后顺序的,process.nextTick()属于idle观察者, setImmediate()属于check观察者。</p><p>process.nextTick和setImmediate的一个重要区别：多个process.nextTick语句总是在当前”执行栈”一次执行完，多个setImmediate可能则需要多次loop才能执行完。 事实上，这正是Node.js 10.0版添加setImmediate方法的原因，否则像下面这样的递归调用process.nextTick，将会没完没了，主线程根本不会去读取”事件队列”！</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">process.nextTick(<span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  process.nextTick(foo);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://juejin.im/post/5e972f3c518825739d40874a" target="_blank" rel="noopener">https://juejin.im/post/5e972f3c518825739d40874a</a></p><p><a href="https://juejin.im/post/5e9d0b48f265da47ff7cd9e6" target="_blank" rel="noopener">JS核心理论之《运行机制与宏任务、微任务》</a></p><p><a href="https://github.com/benyasin/js-core-theory/blob/master/JS引擎、运行时与调用椎栈.md" target="_blank" rel="noopener">JS核心理论之《JS引擎、运行时与调用椎栈》</a></p><h2 id="From"><a href="#From" class="headerlink" title="From"></a>From</h2><p><a href="http://mythcwj.com/" target="_blank" rel="noopener">copy from  wenjie</a></p>]]></content>
    
    <summary type="html">
    
      copy from  wenjie, 分析的很到位，也非常详细。遇到宏任务，先处理宏任务——将宏任务放入Event Queue，然后再处理微任务——将微任务放入Event Queue。
    
    </summary>
    
      <category term="默认分类" scheme="https://kitions.github.io/categories/%E9%BB%98%E8%AE%A4%E5%88%86%E7%B1%BB/"/>
    
    
      <category term="javascript" scheme="https://kitions.github.io/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>React diff揭秘</title>
    <link href="https://kitions.github.io/2020/05/26/react%20diff%E6%BA%90%E7%A0%81%E6%8F%AD%E7%A7%98/"/>
    <id>https://kitions.github.io/2020/05/26/react diff源码揭秘/</id>
    <published>2020-05-26T13:56:43.000Z</published>
    <updated>2020-05-27T08:49:31.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="React-diff揭秘"><a href="#React-diff揭秘" class="headerlink" title="React diff揭秘"></a>React diff揭秘</h1><p>React 框架内部的运作可以分为 3 层：</p><ul><li>Virtual DOM 层，描述页面长什么样。</li><li><strong>Reconciler 层，负责调用组件生命周期方法，进行 Diff 运算等</strong>。</li><li>Renderer 层，根据不同的平台，渲染出相应的页面，比较常见的是 ReactDOM 和 ReactNative。</li></ul><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlgy1gf71qq5z11j30sk0jbjzp.jpg" alt="image-20200527153644396"></p><p>ReactChildFiber.new.js中</p><h2 id="Diff的入口函数"><a href="#Diff的入口函数" class="headerlink" title="Diff的入口函数"></a>Diff的入口函数</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 根据newChild类型选择不同diff函数处理</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">reconcileChildFibers</span>(<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">  returnFiber: Fiber,</span></span></span><br><span class="line"><span class="function"><span class="params">  currentFirstChild: Fiber | null,</span></span></span><br><span class="line"><span class="function"><span class="params">  newChild: any,</span></span></span><br><span class="line"><span class="function"><span class="params"></span>): <span class="title">Fiber</span> | <span class="title">null</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> isObject = <span class="keyword">typeof</span> newChild === <span class="string">'object'</span> &amp;&amp; newChild !== <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (isObject) &#123;</span><br><span class="line">    <span class="comment">// object类型，可能是 REACT_ELEMENT_TYPE 或 REACT_PORTAL_TYPE</span></span><br><span class="line">    <span class="keyword">switch</span> (newChild.$$<span class="keyword">typeof</span>) &#123;</span><br><span class="line">      <span class="keyword">case</span> REACT_ELEMENT_TYPE:</span><br><span class="line">        <span class="comment">// 调用 reconcileSingleElement 处理</span></span><br><span class="line"></span><br><span class="line">      <span class="keyword">case</span> REACT_PORTAL_TYPE:</span><br><span class="line">        <span class="comment">// 调用 reconcileSinglePortal</span></span><br><span class="line">        <span class="keyword">return</span> placeSingleChild(</span><br><span class="line">          reconcileSinglePortal(</span><br><span class="line">            ... <span class="comment">//四个参数</span></span><br><span class="line">          ),</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> newChild === <span class="string">'string'</span> || <span class="keyword">typeof</span> newChild === <span class="string">'number'</span>) &#123;</span><br><span class="line">    <span class="comment">// 调用 reconcileSingleTextNode 处理</span></span><br><span class="line">    reconcileSingleTextNode</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (isArray(newChild)) &#123;</span><br><span class="line">    <span class="comment">// 调用 reconcileChildrenArray 处理</span></span><br><span class="line">    reconcileChildrenArray</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 一些其他情况调用处理函数</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 以上都没有命中，删除节点</span></span><br><span class="line">  <span class="keyword">return</span> deleteRemainingChildren(returnFiber, currentFirstChild);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>newChild</code>参数就是本次更新的 JSX 对象（对应<code>ClassComponent</code>的<code>this.render</code>方法返回值，或者<code>FunctionComponent</code>执行的返回值）</p><hr><h3 id="同级的节点数量将Diff分为两类："><a href="#同级的节点数量将Diff分为两类：" class="headerlink" title="同级的节点数量将Diff分为两类："></a>同级的节点数量将Diff分为两类：</h3><ol><li>当newChild类型为<code>object</code>、<code>number</code>、<code>string</code>，代表同级只有一个节点</li><li>当newChild类型为<code>Array</code>时，代表同级有多个节点</li></ol><h4 id="情况一：同级只有一个节点"><a href="#情况一：同级只有一个节点" class="headerlink" title="情况一：同级只有一个节点"></a>情况一：同级只有一个节点</h4><p>对于单个节点，我们以类型object为例，会进入<code>reconcileSingleElement</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> isObject = <span class="keyword">typeof</span> newChild === <span class="string">'object'</span> &amp;&amp; newChild !== <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (isObject) &#123;</span><br><span class="line">    <span class="comment">// 对象类型，可能是 REACT_ELEMENT_TYPE 或 REACT_PORTAL_TYPE</span></span><br><span class="line">    <span class="keyword">switch</span> (newChild.$$<span class="keyword">typeof</span>) &#123;</span><br><span class="line">      <span class="keyword">case</span> REACT_ELEMENT_TYPE:</span><br><span class="line">        <span class="comment">// 调用 reconcileSingleElement 处理</span></span><br><span class="line">      <span class="comment">// ...其他case</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlgy1gf4tpxrf79j30u00n40ye.jpg" alt="img"></p><blockquote><p><a href="https://github.com/BetaSu/react-on-the-way/blob/v1/packages/react-reconciler/ReactFiber.js#L15" target="_blank" rel="noopener">Fiber</a> 其实指的是一种数据结构，它可以用一个纯 JS 对象来表示：</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fiber = &#123;</span><br><span class="line">    stateNode,    <span class="comment">// 节点实例</span></span><br><span class="line">    child,        <span class="comment">// 子节点</span></span><br><span class="line">    sibling,      <span class="comment">// 兄弟节点</span></span><br><span class="line">    <span class="keyword">return</span>,       <span class="comment">// 父节点</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlgy1gf5pbqpocoj30i607z40d.jpg" alt="image-20200526114139235"></p><p>在<strong>render</strong>阶段会生成的Fiber结构</p><ul><li><p>Fiber中可以保存节点的类型，例子中App节点是一个函数组件节点，div节点是一个原生DOM节点，I am节点是一个文本节点。</p></li><li><p>可以保存节点的信息（比如state，props）。</p></li><li><p>可以保存节点对应的值（比如App节点对应App函数，div节点对应div DOMElement）。这样的结构也解释了为什么函数组件通过<a href="https://zh-hans.reactjs.org/docs/hooks-intro.html" target="_blank" rel="noopener">Hooks</a>可以保存state。因为state并不是保存在函数上，而是保存在函数组件对应的Fiber节点上。</p></li><li><p>可以保存节点的行为（更新/删除/插入）</p></li></ul><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlgy1gf5pe5bpcnj30ex0ct0u4.jpg" alt="image-20200526114358997"></p><p>div Fiber.return = App Fiber; 即用return指向自己的父节点。父级叫return不叫parent</p><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlgy1gf5pilkjgnj30f50dewgf.jpg" alt="image-20200526114645771"></p><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlgy1gf5leqv5u6j30iv0mwq5w.jpg" alt="image-20200526092607718"></p><p>判断DOM节点是否可以复用，让我们通过代码看看是如何判断的：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">reconcileSingleElement</span>(<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">  returnFiber: Fiber,</span></span></span><br><span class="line"><span class="function"><span class="params">  currentFirstChild: Fiber | null,</span></span></span><br><span class="line"><span class="function"><span class="params">  element: ReactElement</span></span></span><br><span class="line"><span class="function"><span class="params"></span>): <span class="title">Fiber</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> key = element.key;</span><br><span class="line">  <span class="keyword">let</span> child = currentFirstChild;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 首先判断是否存在对应DOM节点</span></span><br><span class="line">  <span class="keyword">while</span> (child !== <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="comment">// 上一次更新存在DOM节点，接下来判断是否可复用</span></span><br><span class="line">    <span class="keyword">if</span> (child.key === key) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 🙋‍♂️同学看这里，首先比较key是否相同</span></span><br><span class="line">      <span class="keyword">switch</span> (child.tag) &#123;</span><br><span class="line">        <span class="comment">// ...省略case</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">default</span>: &#123;</span><br><span class="line">          <span class="keyword">if</span> (child.elementType === element.type) &#123;</span><br><span class="line">            <span class="comment">// 🙋‍♂️同学看这里，key相同后再看type是否相同</span></span><br><span class="line">            <span class="comment">// 如果相同则表示可以复用</span></span><br><span class="line">            <span class="keyword">return</span> existing;</span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line">          <span class="comment">// type不同则跳出循环</span></span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 👹 key不同或type不同都代表不能复用，会到这里</span></span><br><span class="line">      <span class="comment">// 不能复用的节点，被标记为删除</span></span><br><span class="line">      deleteRemainingChildren(returnFiber, child);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      deleteChild(returnFiber, child);</span><br><span class="line">    &#125;</span><br><span class="line">    child = child.sibling;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 创建新Fiber，并返回</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从代码可以看出，React通过先判断key是否相同，如果key相同则判断type是否相同，只有都相同时一个DOM节点才能复用。</p><h6 id="练习题"><a href="#练习题" class="headerlink" title="练习题"></a>练习题</h6><p>请判断如下JSX对象对应的DOM元素是否可以复用：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 习题1 更新前</span></span><br><span class="line">&lt;div&gt;<span class="number">123</span>&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ 更新后</span></span><br><span class="line"><span class="regexp">&lt;p&gt;123&lt;/</span>p&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 习题2 更新前</span></span><br><span class="line">&lt;div key=<span class="string">"xxx"</span>&gt;<span class="number">123</span>&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ 更新后</span></span><br><span class="line"><span class="regexp">&lt;div key="ooo"&gt;123&lt;/</span>div&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 习题3 更新前</span></span><br><span class="line">&lt;div key=<span class="string">"xxx"</span>&gt;<span class="number">123</span>&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ 更新后</span></span><br><span class="line"><span class="regexp">&lt;p key="ooo"&gt;123&lt;/</span>p&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 习题4 更新前</span></span><br><span class="line">&lt;div key=<span class="string">"xxx"</span>&gt;<span class="number">123</span>&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ 更新后</span></span><br><span class="line"><span class="regexp">&lt;div key="xxx"&gt;456&lt;/</span>div&gt;</span><br></pre></td></tr></table></figure><p>`</p><p>`</p><p>`</p><p>`</p><p>`</p><p>`</p><p>`</p><p>习题1: 未设置key prop默认 key = null;，所以更新前后key相同，都为null，但是更新前type为div，更新后为p，type改变则不能复用。</p><p>习题2: 更新前后key改变，不需要再判断type，不能复用。</p><p>习题3: 更新前后key改变，不需要再判断type，不能复用。</p><p>习题4: 更新前后key与type都未改变，可以复用。children变化，DOM的子元素需要更新。</p><h4 id="情况二：同级有多个元素的Diff"><a href="#情况二：同级有多个元素的Diff" class="headerlink" title="情况二：同级有多个元素的Diff"></a>情况二：同级有多个元素的Diff</h4><p>刚才我们介绍了单一元素的Diff，现在考虑我们有一个<code>FunctionComponent</code>：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">List</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        &lt;ul&gt;</span><br><span class="line">            &lt;li key=<span class="string">"0"</span>&gt;<span class="number">0</span>&lt;<span class="regexp">/li&gt;</span></span><br><span class="line"><span class="regexp">            &lt;li key="1"&gt;1&lt;/</span>li&gt;</span><br><span class="line">            &lt;li key=<span class="string">"2"</span>&gt;<span class="number">2</span>&lt;<span class="regexp">/li&gt;</span></span><br><span class="line"><span class="regexp">            &lt;li key="3"&gt;3&lt;/</span>li&gt;</span><br><span class="line">        &lt;<span class="regexp">/ul&gt;</span></span><br><span class="line"><span class="regexp">    )</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><p>返回值JSX对象的children属性不是单一元素，而是包含四个对象的数组</p><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlgy1gf5lt57bhrj30u00bpwi1.jpg" alt="img"></p><p>在这种情况下，reconcileChildFibers的newChild参数为Array，就执行到了这儿</p><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlgy1gf5m5nz6goj30ft05vmxn.jpg" alt="image-20200526095202092"></p><p>来看看React如何处理同级多个元素的Diff。</p><h3 id="同级多个节点详解"><a href="#同级多个节点详解" class="headerlink" title="同级多个节点详解"></a><strong>同级多个节点</strong>详解</h3><ol><li><p>节点更新</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">// 情况1 节点更新</span><br><span class="line">    </span><br><span class="line">// 之前</span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">key</span>=<span class="string">"0"</span> <span class="attr">className</span>=<span class="string">"before"</span>&gt;</span>0<span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">key</span>=<span class="string">"1"</span>&gt;</span>1<span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">// 之后情况1 节点属性变化</span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">key</span>=<span class="string">"0"</span> <span class="attr">className</span>=<span class="string">"after"</span>&gt;</span>0<span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">key</span>=<span class="string">"1"</span>&gt;</span>1<span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">// 之后情况2 节点类型更新</span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">key</span>=<span class="string">"0"</span>&gt;</span>0<span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">key</span>=<span class="string">"1"</span>&gt;</span>1<span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><ol start="2"><li><p>节点新增或减少</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">// 情况2 节点新增或减少</span><br><span class="line"></span><br><span class="line">// 之前</span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">key</span>=<span class="string">"0"</span>&gt;</span>0<span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">key</span>=<span class="string">"1"</span>&gt;</span>1<span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line">// 之后情况1 新增节点</span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">key</span>=<span class="string">"0"</span>&gt;</span>0<span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">key</span>=<span class="string">"1"</span>&gt;</span>1<span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">key</span>=<span class="string">"2"</span>&gt;</span>2<span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line">// 之后情况2 删除节点</span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">key</span>=<span class="string">"1"</span>&gt;</span>1<span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><ol start="3"><li><p>节点位置变化</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">// 情况3 节点位置变化</span><br><span class="line"></span><br><span class="line">// 之前</span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">key</span>=<span class="string">"0"</span>&gt;</span>0<span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">key</span>=<span class="string">"1"</span>&gt;</span>1<span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line">// 之后</span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">key</span>=<span class="string">"1"</span>&gt;</span>1<span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">key</span>=<span class="string">"0"</span>&gt;</span>0<span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><p>同一次同级多个元素的Diff，一定属于以上三种情况中的一种或多种。</p><p>该如何设计算法呢</p><p>首先想到的是方案是：</p><ol><li>判断当前节点的更新属于哪种情况</li><li>如果是新增，执行新增逻辑</li><li>如果是删除，执行删除逻辑</li><li>如果是更新，执行更新逻辑</li></ol><p>按这个方案，其实有个隐含的前提，上述<strong>不同操作的优先级是相同的</strong></p><p>但React团队发现，在日常开发中，相对于增加和删除，更新组件发生的频率更高。所以React Diff会优先判断当前节点是否属于更新。</p><p>虽然本次更新的JSX对象<code>newChildren</code>为数组形式，但是和<code>newChildren</code>中每个值进行比较的是上次更新的Fiber节点，Fiber节点的同级节点是由sibling（兄弟节点）指针链接形成的链表。</p><p>即 newChildren[0]与oldFiber比较，newChildren[1]与oldFiber.sibling比较。</p><p><a href="https://blog.csdn.net/wyqwilliam/article/details/82717670" target="_blank" rel="noopener">单链表</a>无法使用双指针，所以无法对算法使用双指针优化。</p><p>基于以上原因，Diff算法的整体逻辑会经历两轮遍历。</p><p>第一轮遍历：处理更新的节点。</p><p>第二轮遍历：处理剩下的不属于更新的节点。</p><h4 id="第一遍遍历"><a href="#第一遍遍历" class="headerlink" title="第一遍遍历"></a><strong>第一遍遍历</strong></h4><ol><li>遍历newChildren，i = 0，将newChildren[i]与oldFiber比较，判断DOM节点是否可复用。</li><li>如果可复用，i++，比较newChildren[i]与oldFiber.sibling是否可复用。可以复用则重复步骤2。</li><li>如果不可复用，立即跳出整个遍历。</li><li>如果newChildren遍历完或者oldFiber遍历完（即oldFiber.sibling === null），跳出遍历。</li></ol><p>当最终完成遍历后，会有两种结果：</p><p>结果一：如果是步骤3跳出的遍历，newChildren没有遍历完，oldFiber也没有遍历完。</p><p>举个栗子🌰</p><p>如下代码中，前2个节点可复用，key === 2的节点type改变，不可复用，跳出遍历。</p><p>此时oldFiber剩下key === 2未遍历，newChildren剩下key === 2、key === 3未遍历。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">// 之前</span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">key</span>=<span class="string">"0"</span>&gt;</span>0<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">key</span>=<span class="string">"1"</span>&gt;</span>1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">key</span>=<span class="string">"2"</span>&gt;</span>2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"></span><br><span class="line">// 之后</span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">key</span>=<span class="string">"0"</span>&gt;</span>0<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">key</span>=<span class="string">"1"</span>&gt;</span>1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">key</span>=<span class="string">"2"</span>&gt;</span>2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">key</span>=<span class="string">"3"</span>&gt;</span>3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br></pre></td></tr></table></figure><p>结果二：如果是步骤4跳出的遍历，可能newChildren遍历完，或oldFiber遍历完，或他们同时遍历完。</p><p>再来个🌰</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">// 之前</span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">key</span>=<span class="string">"0"</span> <span class="attr">className</span>=<span class="string">"a"</span>&gt;</span>0<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">key</span>=<span class="string">"1"</span> <span class="attr">className</span>=<span class="string">"b"</span>&gt;</span>1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// 之后情况1 newChildren与oldFiber都遍历完</span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">key</span>=<span class="string">"0"</span> <span class="attr">className</span>=<span class="string">"aa"</span>&gt;</span>0<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">key</span>=<span class="string">"1"</span> <span class="attr">className</span>=<span class="string">"bb"</span>&gt;</span>1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// 之后情况2 newChildren没遍历完，oldFiber遍历完</span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">key</span>=<span class="string">"0"</span> <span class="attr">className</span>=<span class="string">"aa"</span>&gt;</span>0<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">key</span>=<span class="string">"1"</span> <span class="attr">className</span>=<span class="string">"bb"</span>&gt;</span>1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">key</span>=<span class="string">"2"</span> <span class="attr">className</span>=<span class="string">"cc"</span>&gt;</span>2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// 之后情况3 newChildren遍历完，oldFiber没遍历完</span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">key</span>=<span class="string">"0"</span> <span class="attr">className</span>=<span class="string">"aa"</span>&gt;</span>0<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="第二轮遍历"><a href="#第二轮遍历" class="headerlink" title="第二轮遍历"></a>第二轮遍历</h4><p>对于结果二，聪明的你想一想🐯，newChildren没遍历完，oldFiber遍历完意味着什么？</p><p>老的DOM节点都复用了，这时还有新加入的节点，意味着本次更新有新节点插入，我们只需要遍历剩下的newChildren依次执行插入操作<a href="https://blog.csdn.net/qiwoo_weekly/article/details/106247621" target="_blank" rel="noopener">（Fiber.effectTag = Placement;）</a>。</p><blockquote><p><strong>effectTag</strong>字段表示当前<strong>Fiber</strong>需要执行的副作用，最常见的副作用是：</p></blockquote><ul><li>Placement 插入DOM节点</li><li>Update 更新DOM节点</li><li>Deletion 删除DOM节点</li></ul><p>同样的，我们举一反三。newChildren遍历完，oldFiber没遍历完意味着什么？</p><p>意味着多余的oldFiber在这次更新中已经不存在了，所以需要遍历剩下的oldFiber，依次执行删除操作（Fiber.effectTag = Deletion;）。</p><p>那么结果一怎么处理呢？newChildren与oldFiber都没遍历完，这意味着有节点在这次更新中改变了位置。</p><p>接下来，就是Diff算法最精髓的部分！！！</p><h4 id="处理位置交换的节点"><a href="#处理位置交换的节点" class="headerlink" title="处理位置交换的节点"></a>处理位置交换的节点</h4><p>为了快速的找到key对应的oldFiber，我们将所有还没处理的oldFiber放进以key属性为key，Fiber为value的map。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> existingChildren = mapRemainingChildren(returnFiber, oldFiber);</span><br></pre></td></tr></table></figure><p>源码部分<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">mapRemainingChildren</span>(<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">    returnFiber: Fiber,</span></span></span><br><span class="line"><span class="function"><span class="params">    currentFirstChild: Fiber,</span></span></span><br><span class="line"><span class="function"><span class="params">  </span>): <span class="title">Map</span>&lt;<span class="title">string</span> | <span class="title">number</span>, <span class="title">Fiber</span>&gt; </span>&#123;</span><br><span class="line">    <span class="comment">// Add the remaining children to a temporary map so that we can find them by</span></span><br><span class="line">    <span class="comment">// keys quickly. Implicit (null) keys get added to this set with their index</span></span><br><span class="line">    <span class="comment">// instead.</span></span><br><span class="line">    <span class="keyword">const</span> existingChildren: <span class="built_in">Map</span>&lt;string | number, Fiber&gt; = <span class="keyword">new</span> <span class="built_in">Map</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> existingChild = currentFirstChild;</span><br><span class="line">    <span class="keyword">while</span> (existingChild !== <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (existingChild.key !== <span class="literal">null</span>) &#123;</span><br><span class="line">        existingChildren.set(existingChild.key, existingChild);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        existingChildren.set(existingChild.index, existingChild);</span><br><span class="line">      &#125;</span><br><span class="line">      existingChild = existingChild.sibling;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> existingChildren;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></p><p>再遍历剩余的newChildren，通过newChildren[i].key就能在existingChildren中找到key相同的oldFiber。</p><p>接下来是重点哦，敲黑板 👨‍🏫</p><p>在我们第一轮和第二轮遍历中，我们遇到的每一个可以复用的节点，一定存在一个代表上一次更新时该节点状态的oldFiber，并且页面上有一个DOM元素与其对应。</p><p>那么我们在Diff函数的入口处，定义一个变量</p><p>上篇React diff 中的LastIndex</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">let lastPlacedIndex = 0;</span><br></pre></td></tr></table></figure><p>该变量表示当前最后一个可复用的节点，对应的<code>oldFiber</code>在上次更新中的所在的位置索引，我们通过这个变量判断节点是否需要移动。</p><p>这里我们简化一下书写，每个字母代表一个节点，字母的值代表节点的key</p><p>// 之前<br>abcd</p><p>// 之后<br>acdb</p><table><thead><tr><th>index</th><th style="text-align:left">节点</th><th style="text-align:left">oldIndex</th><th style="text-align:left">lastIndex</th><th style="text-align:left">操作</th></tr></thead><tbody><tr><td>0</td><td style="text-align:left">B</td><td style="text-align:left">0</td><td style="text-align:left">0</td><td style="text-align:left">oldIndex(0)==lastIndex(0),不动</td></tr><tr><td>1</td><td style="text-align:left">c</td><td style="text-align:left">2</td><td style="text-align:left">2</td><td style="text-align:left">oldIndex(2)==lastIndex(2),不动</td></tr><tr><td>2</td><td style="text-align:left">d</td><td style="text-align:left">3</td><td style="text-align:left">3</td><td style="text-align:left">oldIndex(3)==lastIndex3),不动</td></tr><tr><td>3</td><td style="text-align:left">b</td><td style="text-align:left">1</td><td style="text-align:left">3</td><td style="text-align:left">oldIndex(1)&lt;lastIndex(3),节点b移动至index(3)的位置</td></tr></tbody></table><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 之前</span></span><br><span class="line">abcd</span><br><span class="line"></span><br><span class="line"><span class="comment">// 之后</span></span><br><span class="line">acdb</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">===第一轮遍历开始===</span><br><span class="line">a（之后）vs a（之前）</span><br><span class="line">key不变，可复用</span><br><span class="line">此时 a 对应的oldFiber（之前的a）在之前的数组（abcd）中索引为<span class="number">0</span></span><br><span class="line">所以 lastPlacedIndex = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">继续第一轮遍历...</span><br><span class="line"></span><br><span class="line">c（之后）vs b（之前）</span><br><span class="line">key改变，不能复用，跳出第一轮遍历</span><br><span class="line">此时 lastPlacedIndex === <span class="number">0</span>;</span><br><span class="line">===第一轮遍历结束===</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">===第二轮遍历开始===</span><br><span class="line"></span><br><span class="line">newChildren === cdb，没用完，不需要执行删除旧节点</span><br><span class="line">oldFiber === bcd，没用完，不需要执行插入新节点</span><br><span class="line"></span><br><span class="line">将剩余oldFiber（bcd）保存为map</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 当前oldFiber：bcd</span></span><br><span class="line"><span class="comment">// 当前newChildren：cdb</span></span><br><span class="line"></span><br><span class="line">继续遍历剩余newChildren</span><br><span class="line"></span><br><span class="line">key === c 在 oldFiber中存在</span><br><span class="line"><span class="keyword">const</span> oldIndex = c（之前）.index;</span><br><span class="line">即 oldIndex 代表当前可复用节点（c）在上一次更新时的位置索引</span><br><span class="line">此时 oldIndex === <span class="number">2</span>; <span class="comment">// 之前节点为 abcd，所以c.index === 2</span></span><br><span class="line">比较 oldIndex 与 lastPlacedIndex;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">如果 oldIndex &gt;= lastPlacedIndex 代表该可复用节点不需要移动</span><br><span class="line">并将 lastPlacedIndex = oldIndex;</span><br><span class="line">如果 oldIndex &lt; lastplacedIndex 该可复用节点之前插入的位置索引小于这次更新需要插入的位置索引，代表该节点需要向右移动</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">在例子中，oldIndex <span class="number">2</span> &gt; lastPlacedIndex <span class="number">0</span>，</span><br><span class="line">则 lastPlacedIndex = <span class="number">2</span>;</span><br><span class="line">c节点位置不变</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">继续遍历剩余newChildren</span><br><span class="line"></span><br><span class="line"><span class="comment">// 当前oldFiber：bd</span></span><br><span class="line"><span class="comment">// 当前newChildren：db</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">key === d 在 oldFiber中存在</span><br><span class="line"><span class="keyword">const</span> oldIndex = d（之前）.index;</span><br><span class="line"></span><br><span class="line">oldIndex <span class="number">3</span> &gt; lastPlacedIndex <span class="number">2</span> <span class="comment">// 之前节点为 abcd，所以d.index === 3</span></span><br><span class="line">则 lastPlacedIndex = <span class="number">3</span>;</span><br><span class="line">d节点位置不变</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">继续遍历剩余newChildren</span><br><span class="line"></span><br><span class="line"><span class="comment">// 当前oldFiber：b</span></span><br><span class="line"><span class="comment">// 当前newChildren：b</span></span><br><span class="line"></span><br><span class="line">key === b 在 oldFiber中存在</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> oldIndex = b（之前）.index;</span><br><span class="line"></span><br><span class="line">oldIndex <span class="number">1</span> &lt; lastPlacedIndex <span class="number">3</span> <span class="comment">// 之前节点为 abcd，所以b.index === 1</span></span><br><span class="line">则 b节点需要向右移动</span><br><span class="line">===第二轮遍历结束===</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">最终acd <span class="number">3</span>个节点都没有移动，b节点被标记为移动</span><br></pre></td></tr></table></figure><p>相信你已经明白了节点移动是如何判断的</p><p>再来看一个例子</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// 之前abcd</span><br><span class="line">// 之后dabc</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line">===第一轮遍历开始===</span><br><span class="line">d（之后）vs a（之前）</span><br><span class="line">key不变，type改变，不能复用，跳出遍历</span><br><span class="line">===第一轮遍历结束===</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">===第二轮遍历开始===</span><br><span class="line">newChildren === dabc，没用完，不需要执行删除旧节点</span><br><span class="line">oldFiber === abcd，没用完，不需要执行插入新节点</span><br><span class="line"></span><br><span class="line">将剩余oldFiber（abcd）保存为map</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">继续遍历剩余newChildren</span><br><span class="line"></span><br><span class="line"><span class="comment">// 当前oldFiber：abcd</span></span><br><span class="line"><span class="comment">// 当前newChildren dabc</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">key === d 在 oldFiber中存在</span><br><span class="line"><span class="keyword">const</span> oldIndex = d（之前）.index;</span><br><span class="line">此时 oldIndex === <span class="number">3</span>; <span class="comment">// 之前节点为 abcd，所以d.index === 3</span></span><br><span class="line">比较 oldIndex 与 lastPlacedIndex;</span><br><span class="line">oldIndex <span class="number">3</span> &gt; lastPlacedIndex <span class="number">0</span></span><br><span class="line">则 lastPlacedIndex = <span class="number">3</span>;</span><br><span class="line">d节点位置不变</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">继续遍历剩余newChildren</span><br><span class="line"><span class="comment">// 当前oldFiber：abc</span></span><br><span class="line"><span class="comment">// 当前newChildren abc</span></span><br><span class="line"></span><br><span class="line">key === a 在 oldFiber中存在</span><br><span class="line"><span class="keyword">const</span> oldIndex = a（之前）.index; <span class="comment">// 之前节点为 abcd，所以a.index === 0</span></span><br><span class="line">此时 oldIndex === <span class="number">0</span>;</span><br><span class="line">比较 oldIndex 与 lastPlacedIndex;</span><br><span class="line">oldIndex <span class="number">0</span> &lt; lastPlacedIndex <span class="number">3</span></span><br><span class="line">则 a节点需要向右移动</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">继续遍历剩余newChildren</span><br><span class="line"></span><br><span class="line"><span class="comment">// 当前oldFiber：bc</span></span><br><span class="line"><span class="comment">// 当前newChildren bc</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">key === b 在 oldFiber中存在</span><br><span class="line"><span class="keyword">const</span> oldIndex = b（之前）.index; <span class="comment">// 之前节点为 abcd，所以b.index === 1</span></span><br><span class="line">此时 oldIndex === <span class="number">1</span>;</span><br><span class="line">比较 oldIndex 与 lastPlacedIndex;</span><br><span class="line">oldIndex <span class="number">1</span> &lt; lastPlacedIndex <span class="number">3</span></span><br><span class="line">则 b节点需要向右移动</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">继续遍历剩余newChildren</span><br><span class="line"></span><br><span class="line"><span class="comment">// 当前oldFiber：c</span></span><br><span class="line"><span class="comment">// 当前newChildren c</span></span><br><span class="line"></span><br><span class="line">key === c 在 oldFiber中存在</span><br><span class="line"><span class="keyword">const</span> oldIndex = c（之前）.index; <span class="comment">// 之前节点为 abcd，所以c.index === 2</span></span><br><span class="line">此时 oldIndex === <span class="number">2</span>;</span><br><span class="line">比较 oldIndex 与 lastPlacedIndex;</span><br><span class="line">oldIndex <span class="number">2</span> &lt; lastPlacedIndex <span class="number">3</span></span><br><span class="line">则 c节点需要向右移动</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">===第二轮遍历结束===</span><br></pre></td></tr></table></figure><p>可以看到，我们以为从 abcd 变为 dabc，只需要将d移动到前面。</p><p>但实际上React保持d不变，将abc分别移动到了d的后面。</p><p>从这点可以看出，考虑性能，我们要尽量减少将节点从后面移动到前面的操作。</p><h4 id="注释过的React源码"><a href="#注释过的React源码" class="headerlink" title="注释过的React源码"></a><a href="https://github.com/BetaSu/react-on-the-way/blob/master/packages/react-reconciler/ReactChildFiber.js#L265" target="_blank" rel="noopener">注释过的React源码</a></h4><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// diff算法会进行两轮遍历，可能中间有中断，时间复杂度O(n)</span></span><br><span class="line">  <span class="comment">// 可复用节点的几种情况：</span></span><br><span class="line">  <span class="comment">// 1. 相同key（index可以不同）相同type</span></span><br><span class="line">  <span class="comment">// 2. 没有key，相同index，相同type</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">reconcileChildrenArray</span>(<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">returnFiber, </span></span></span><br><span class="line"><span class="function"><span class="params"> currentFirstChild, </span></span></span><br><span class="line"><span class="function"><span class="params"> newChildren, </span></span></span><br><span class="line"><span class="function"><span class="params"> expirationTime   <span class="comment">// 最新版本换为了 lanes: Lanes,</span></span></span></span><br><span class="line"><span class="function"><span class="params">  </span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 由于fiber没有保存before引用，所以无法通过头尾双指针的方式优化diff算法</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// diff完成后新的第一个child</span></span><br><span class="line">    <span class="keyword">let</span> resultingFirstChild = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">let</span> previousNewFiber = <span class="literal">null</span>;</span><br><span class="line">    <span class="comment">// 可复用节点的位置可能和上次不同（需要标记Placement代表移动） ex： abcd =&gt; badc</span></span><br><span class="line">    <span class="comment">// 所以判断完是否可复用后还需要比较index，具体逻辑见 placeChild</span></span><br><span class="line">    <span class="keyword">let</span> lastPlacedIndex = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// 遍历到的newChild 索引</span></span><br><span class="line">    <span class="keyword">let</span> newIdx = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// 遍历过程中用于比较的老fiber</span></span><br><span class="line">    <span class="keyword">let</span> oldFiber = currentFirstChild;</span><br><span class="line">    <span class="keyword">let</span> nextOldFiber = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 第一轮遍历，对比oldFiber与newChildren[i]寻找可以复用的fiber，可复用条件：</span></span><br><span class="line">    <span class="comment">// 1. 新旧节点都为文本节点，直接复用（文本节点没有key）</span></span><br><span class="line">    <span class="comment">// 2. 其他类型节点判断key是否相同决定复用（可能key相同但是类型不同）</span></span><br><span class="line">    <span class="comment">// 这次遍历要求新旧fiber key相同，顺序相同，如果遇到不满足的则跳出这次遍历</span></span><br><span class="line">    <span class="keyword">for</span> (; oldFiber !== <span class="literal">null</span> &amp;&amp; newIdx &lt; newChildren.length; newIdx++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (oldFiber.index &gt; newIdx) &#123;</span><br><span class="line">        <span class="comment">// fiber.index 始终等于该fiber在数组中的索引，即使其前一个兄弟节点是null</span></span><br><span class="line">        <span class="comment">// ex： [null, a] ， 其中 a.index === 1</span></span><br><span class="line">        <span class="comment">// 上次的索引大于这次，代表上次这个节点之前的兄弟节点有null  ex： [null, a] </span></span><br><span class="line">        <span class="comment">// 假设这次是 [b, a] ，则实际上 diff的是 null -&gt; b   a -&gt; a</span></span><br><span class="line">        <span class="comment">// 所以这里这么赋值</span></span><br><span class="line">        nextOldFiber = oldFiber;</span><br><span class="line">        oldFiber = <span class="literal">null</span>;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        nextOldFiber = oldFiber.sibling;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// key相同则更新fiber</span></span><br><span class="line">      <span class="comment">//   更新包括 复用fiber或者创建新fiber</span></span><br><span class="line">      <span class="comment">// key不同则返回null，代表该节点不能复用</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">// 尝试复用节点</span></span><br><span class="line">      <span class="keyword">const</span> newFiber = updateSlot(</span><br><span class="line">        returnFiber,</span><br><span class="line">        oldFiber,</span><br><span class="line">        newChildren[newIdx],</span><br><span class="line">        expirationTime</span><br><span class="line">      )</span><br><span class="line">      <span class="keyword">if</span> (newFiber === <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="comment">// 该索引对应位置的新节点是 null</span></span><br><span class="line">        <span class="keyword">if</span> (!oldFiber) &#123;</span><br><span class="line">          oldFiber = nextOldFiber;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (shouldTrackSideEffects) &#123;</span><br><span class="line">        <span class="keyword">if</span> (oldFiber &amp;&amp; !newFiber.alternate) &#123;</span><br><span class="line">          <span class="comment">// oldFiber与newFiber都存在代表对应索引key没变化</span></span><br><span class="line">          <span class="comment">// !newFiber.alternate代表newFiber是新创建的fiber</span></span><br><span class="line">          <span class="comment">//   ex：oldFiber: &lt;div key="1"&gt;&lt;/div&gt; newFiber: &lt;p key="1"&gt;&lt;/p&gt;</span></span><br><span class="line">          <span class="comment">//   新旧fiber key相同，则newFiber存在，但是type不同，所以是创建新fiber，没有对应alternate</span></span><br><span class="line">          <span class="comment">// 插入新DOM节点的同时删掉老的DOM节点</span></span><br><span class="line">          deleteChild(returnFiber, oldFiber);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 将可复用的新fiber插入，返回插入的索引</span></span><br><span class="line">      lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (!previousNewFiber) &#123;</span><br><span class="line">        <span class="comment">// 这是第一个插入的新fiber</span></span><br><span class="line">        resultingFirstChild = newFiber;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        previousNewFiber.sibling = newFiber;</span><br><span class="line">      &#125;</span><br><span class="line">      previousNewFiber = newFiber;</span><br><span class="line">      oldFiber = nextOldFiber;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 第二轮遍历情况1 newChildren遍历完时</span></span><br><span class="line">    <span class="keyword">if</span> (newIdx === newChildren.length) &#123;</span><br><span class="line">      <span class="comment">// 当newChildren遍历完时，代表第一轮所有新节点都可复用，</span></span><br><span class="line">      <span class="comment">// 只需要删除剩下的oldFiber，因为这部分oldFiber在新的数组里已经不存在了</span></span><br><span class="line">      deleteRemainingChildren(returnFiber, oldFiber);</span><br><span class="line">      <span class="keyword">return</span> resultingFirstChild;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 第二轮遍历情况2 oldFiber遍历完时</span></span><br><span class="line">    <span class="keyword">if</span> (!oldFiber) &#123;</span><br><span class="line">      <span class="comment">// 当oldFiber遍历完时，代表所有oldFiber已经复用完或者这是首次渲染没有oldFiber</span></span><br><span class="line">      <span class="comment">// 再遍历newChildren，把新节点append到后面，这部分在oldFiber中不存在的节点是新加入的</span></span><br><span class="line">      <span class="keyword">for</span> (; newIdx &lt; newChildren.length; newIdx++) &#123;</span><br><span class="line">        <span class="keyword">const</span> newFiber = createChild(returnFiber, newChildren[newIdx], expirationTime);</span><br><span class="line">        <span class="keyword">if</span> (!newFiber) &#123;</span><br><span class="line">          <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);</span><br><span class="line">        <span class="keyword">if</span> (previousNewFiber === <span class="literal">null</span>) &#123;</span><br><span class="line">          resultingFirstChild = newFiber;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          previousNewFiber.sibling = newFiber;</span><br><span class="line">        &#125;</span><br><span class="line">        previousNewFiber = newFiber;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> resultingFirstChild;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 第二轮遍历情况3 newChildren，oldFiber都未遍历完</span></span><br><span class="line">    <span class="comment">// 将可复用的节点移动位置</span></span><br><span class="line">    <span class="comment">// 将所有未遍历的oldFiber存入map，这样在接下来的遍历中能O(1)的复杂度就能通过key找到对应的oldFiber</span></span><br><span class="line">    <span class="keyword">const</span> existingChildren = mapRemainingChildren(returnFiber, oldFiber);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (; newIdx &lt; newChildren.length; newIdx++) &#123;</span><br><span class="line">      <span class="keyword">const</span> newFiber = updateFromMap(</span><br><span class="line">        existingChildren,</span><br><span class="line">        returnFiber,</span><br><span class="line">        newIdx,</span><br><span class="line">        newChildren[newIdx],</span><br><span class="line">        expirationTime</span><br><span class="line">      );</span><br><span class="line">      <span class="keyword">if</span> (newFiber) &#123;</span><br><span class="line">        <span class="keyword">if</span> (shouldTrackSideEffects) &#123;</span><br><span class="line">          <span class="keyword">if</span> (newFiber.alternate) &#123;</span><br><span class="line">            <span class="comment">// 存在current，代表我们需要复用这个节点，将对应oldFiber从map中删除</span></span><br><span class="line">            <span class="comment">// 这样该oldFiber就不会置为删除</span></span><br><span class="line">            existingChildren.delete(newFiber.key === <span class="literal">null</span> ? newIdx : newFiber.key);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);</span><br><span class="line">        <span class="keyword">if</span> (!previousNewFiber) &#123;</span><br><span class="line">          resultingFirstChild = newFiber;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          previousNewFiber.sibling = newFiber;</span><br><span class="line">        &#125;</span><br><span class="line">        previousNewFiber = newFiber;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (shouldTrackSideEffects) &#123;</span><br><span class="line">      <span class="comment">// 还留下的oldFiber表示没有被复用，需要删除</span></span><br><span class="line">      existingChildren.forEach(<span class="function"><span class="params">child</span> =&gt;</span> deleteChild(returnFiber, child));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> resultingFirstChild;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 协调子节点，分为 mount 和 reconcile 2类</span></span><br><span class="line">  <span class="comment">// mount用于首次渲染，child没有对应fiber，直接生成fiber，mount不会改变fiber的effectTag，原因见 appendAllChildren</span></span><br><span class="line">  <span class="comment">// reconcile用于更新</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">reconcileChildFibers</span>(<span class="params">returnFiber, currentFirstChild, newChild, expirationTime</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// React.createElement类型 或者 子节点是String、Number对应的Array类型</span></span><br><span class="line">    <span class="keyword">const</span> isObject = <span class="keyword">typeof</span> newChild === <span class="string">'object'</span> &amp;&amp; newChild !== <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">if</span> (isObject) &#123;</span><br><span class="line">      <span class="keyword">switch</span> (newChild.$$<span class="keyword">typeof</span>) &#123;</span><br><span class="line">        <span class="keyword">case</span> REACT_ELEMENT_TYPE:</span><br><span class="line">          <span class="keyword">return</span> placeSingleChild(reconcileSingleElement(</span><br><span class="line">            returnFiber,</span><br><span class="line">            currentFirstChild,</span><br><span class="line">            newChild,</span><br><span class="line">            expirationTime</span><br><span class="line">          ))</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 在 beginWork update各类Component时并未处理HostText，这里处理单个HostText</span></span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">typeof</span> newChild === <span class="string">'number'</span> || <span class="keyword">typeof</span> newChild === <span class="string">'string'</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> placeSingleChild(reconcileSingleTextNode(</span><br><span class="line">          returnFiber,</span><br><span class="line">          currentFirstChild,</span><br><span class="line">          newChild,</span><br><span class="line">          expirationTime</span><br><span class="line">        ))</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 在 beginWork update各类Component时并未处理HostText，这里处理多个HostText</span></span><br><span class="line">      <span class="keyword">if</span> (<span class="built_in">Array</span>.isArray(newChild)) &#123;</span><br><span class="line">        <span class="keyword">return</span> reconcileChildrenArray(</span><br><span class="line">          returnFiber,</span><br><span class="line">          currentFirstChild,</span><br><span class="line">          newChild,</span><br><span class="line">          expirationTime</span><br><span class="line">        )</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 兜底删除</span></span><br><span class="line">    <span class="keyword">return</span> deleteRemainingChildren(returnFiber, currentFirstChild);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> reconcileChildFibers;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="参考大佬"><a href="#参考大佬" class="headerlink" title="参考大佬"></a>参考大佬</h2><ol><li><p>奇舞周刊. <a href="https://mp.weixin.qq.com/s/e0fDbM5pp9bX1YuYBSXhLA" target="_blank" rel="noopener">React源码揭秘(三)：Diff算法详解</a></p></li><li><p><a href="https://github.com/BetaSu/react-on-the-way/blob/master/packages/react-reconciler/ReactChildFiber.js#L265" target="_blank" rel="noopener">https://github.com/BetaSu/react-on-the-way/blob/master/packages/react-reconciler/ReactChildFiber.js#L265</a></p></li><li><p><a href="https://blog.csdn.net/qiwoo_weekly/article/details/106247621" target="_blank" rel="noopener">https://blog.csdn.net/qiwoo_weekly/article/details/106247621</a></p></li><li><p><a href="https://juejin.im/post/5e9abf06e51d454702460bf6#heading-5" target="_blank" rel="noopener">https://juejin.im/post/5e9abf06e51d454702460bf6#heading-5</a></p></li><li><p><a href="https://juejin.im/post/5ec507146fb9a047f47cb805" target="_blank" rel="noopener">https://juejin.im/post/5ec507146fb9a047f47cb805</a> (原作者大佬)</p></li><li><p><a href="https://segmentfault.com/a/1190000018250127" target="_blank" rel="noopener">https://segmentfault.com/a/1190000018250127</a></p></li><li><p><a href="https://segmentfault.com/a/1190000018250127" target="_blank" rel="noopener">React Fiber 原理介绍</a></p></li></ol>]]></content>
    
    <summary type="html">
    
      React diff简易源码原理探究
    
    </summary>
    
      <category term="默认分类" scheme="https://kitions.github.io/categories/%E9%BB%98%E8%AE%A4%E5%88%86%E7%B1%BB/"/>
    
    
      <category term="React" scheme="https://kitions.github.io/tags/React/"/>
    
      <category term="diff" scheme="https://kitions.github.io/tags/diff/"/>
    
  </entry>
  
  <entry>
    <title>React 两大特色之React diff</title>
    <link href="https://kitions.github.io/2020/05/18/React%20diff/"/>
    <id>https://kitions.github.io/2020/05/18/React diff/</id>
    <published>2020-05-18T10:51:45.000Z</published>
    <updated>2020-05-27T08:45:26.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="React-两大特色之React-diff"><a href="#React-两大特色之React-diff" class="headerlink" title="React 两大特色之React diff"></a>React 两大特色之React diff</h1><p>React 的两大特色：React diff 和 Virtual Dom。</p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>React diff，是 Virtual DOM和渲染的性能保证，高效的diff算法极大地保障了React的性能。使我们的页面的构建效率提到了极大的提升。</p><h2 id="传统的diff算法"><a href="#传统的diff算法" class="headerlink" title="传统的diff算法"></a>传统的diff算法</h2><p>传统diff算法通过循环递归对节点进行依次对比，效率低下，算法复杂度达到 O(n^3)，其中 n 是树中节点的总数。具体是怎么算出来的，可以查看知乎上的一个回答。</p><p><a href="https://www.zhihu.com/question/66851503" target="_blank" rel="noopener">react的diff 从O(n^3)到 O(n) ，请问 O(n^3) 和O(n) 是怎么算出来？</a></p><p>懒得点链接看下：</p><p>传统Diff算法需要找到两个树的最小更新方式，所以需要[两两]对比每个叶子节点是否相同，对比就需要O(n^2)次了，再加上更新（移动、创建、删除）时需要遍历一次，所以是O(n^3)。</p><p>查找不同就需要O(n^2)，找到差异后还要计算最小转换方式，最终结果为O(n^3)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Prev                  Last</span><br><span class="line">       A                     A  </span><br><span class="line">      / \                   / \</span><br><span class="line">     /   \                 /   \</span><br><span class="line">    B     D     ====&gt;     D     B</span><br><span class="line">   /                             \</span><br><span class="line">  C                               C</span><br></pre></td></tr></table></figure><p>就上面两树的变化而言，若要达到最小更新，首先要对比每个节点是否相同，也就是：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">PA-&gt;LA</span><br><span class="line">PA-&gt;LB</span><br><span class="line">PA-&gt;LC</span><br><span class="line">PA-&gt;LD</span><br><span class="line">PB-&gt;LA</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>React的Diff算法完全不同，简单到有些粗暴，过程如下。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 按叶子节点位置比较</span><br><span class="line">[0,0]     :     PA-&gt;LA   # 相同，不理会</span><br><span class="line">[0.0, 0.0]:     PB-&gt;LD   # 不同，删除PB，添加LD</span><br><span class="line">[0.1, 0.1]:     PD-&gt;LB   # 不同，更新</span><br><span class="line">[0.1.0, 0.1.0]: PC-&gt;Null # Last树没有该节点，所以删除PC即可</span><br><span class="line">[0.1.2, 0.1.2]: Null-&gt;LC # Prev树没有该节点，所以添加C到该位置</span><br></pre></td></tr></table></figure><p>标准的O(n)，所有的节点只遍历一次。</p><p>O(n^3)到O(n)的提升有多大，通过一张图来看一下</p><p><img src="https://i.loli.net/2020/05/13/qGAO7U2kXWx3eiu.png" alt="image.png" style="zoom:50%;"></p><h2 id="React的diff策略"><a href="#React的diff策略" class="headerlink" title="React的diff策略"></a>React的diff策略</h2><ol><li><p>策略一：忽略Web UI中DOM节点跨层级移动；（跨层级不进行比较）</p></li><li><p>策略二：拥有相同类型的两个组件产生的DOM结构也是相似的，不同类型的两个组件产生的DOM结构则不近相同（不同类不进行比较，同级节点做diff）</p></li><li><p>策略三：对于同一层级的一组子节点，通过分配唯一id进行区分（同类同级通过key比较）</p></li></ol><p>上面的好像不太通俗易懂</p><ol><li>一：只对同级元素进行Diff。如果一个DOM节点在前后两次更新中跨越了层级，那么React不会复用它。</li><li>二：两个不同类型的元素会产生出不同的树。如果元素由div变为p，React会销毁div及其子孙节点，并新建p及其子孙节点。</li><li>三：开发者可以通过 key属性 来暗示哪些子元素在不同的渲染下能保持稳定。</li></ol><p>在Web UI的场景下，基于以上三个点，React对tree diff、component diff、element diff进行优化，将普适diff的复杂度降低到一个数量级，保证了整体UI界面的构建性能！</p><h3 id="Tree-diff"><a href="#Tree-diff" class="headerlink" title="Tree diff"></a>Tree diff</h3><hr><p>针对策略一，React对树的算法进行了优化，对树进行分层比较，两棵树只会对同一层次的节点进行比较。</p><p>既然DOM节点跨层级的移动操作少到可以忽略不计，针对这一现象，React只会对相同层级的DOM节点进行比较，即同一个父节点下的所有子节点。当发现节点已经不存在时，则该节点及其子节点会被完全删除掉，不会进行下一步的比较。这样就只需要对树进行一次遍历，就能完成整个DOM树的比较。</p><p><img src="https://i.loli.net/2020/05/14/iZWFCyOxuRKn52G.png" alt="image.png"></p><p>前提是WEB ui 中的DOM节点跨层级的移动操作特别少，但并没有否定DOM节点跨层级的操作的存在，那么当遇到这种操作时，React的处理方式</p><p>example； A(包括其子节点) –&gt; D</p><p><img src="https://i.loli.net/2020/05/14/Avw4XQcBJDCFMf8.png" alt="image.png"></p><p>由于React只会简单的考虑同层级节点的位置变换，而对于不同层级的节点，只会创建和删除操作。当根节点发现子节点的A消失了，就会直接销毁A，当D发现多了一个子节点A，则会创建新的A(包括子节点)作为其子节点。此时，diff的执行情况是；</p><p>​                        CreateA —&gt;   CreateB —&gt;   CreateC —&gt;   DeleteA </p><p>  所以，由此可以看出，当出现节点跨层级移动，并不会出现想象中的直接把整个A节点移动到D节点下的移动操作，而是以A节点的整个树会被重新创建。so，这是一种影响React性能的操作，因此官方建议不要进行DOM节点跨层级的操作。</p><blockquote><p>在开发组件时，保持稳定的 DOM 结构会有助于性能的提升。例如，可以通过 CSS 隐藏或显示节点，而不是真正地移除或添加 DOM 节点。</p></blockquote><p>图整个处理过程：</p><p><img src="https://i.loli.net/2020/05/14/GCazVwlI52WcSxd.png" alt="image.png"></p><h3 id="Component-diff"><a href="#Component-diff" class="headerlink" title="Component diff"></a>Component diff</h3><hr><p>React 是基于组件构建应用的，对于组件间的比较所采取的策略也是简洁、高效的。</p><ol><li><p><strong>如果是同一类型的组件，按照原策略继续比较 Virtual DOM 树即可。</strong></p></li><li><p><strong>如果不是，则将该组件判定为dirty component，从而替换整个组件下的所有子节点</strong></p></li><li><p><strong>对于同一类型的组件，有可能其Virtual DOM没有任何变化，如果能够确切知道这点，那么可以节省大量的diff运算时间，因此，React允许用户通过ShouldComponentUpdate()来判断该组件是否需要进行diff算法，但如果调用了forceUpdate方法，ShouldComponentUpdate会失效</strong></p><p>example； D –&gt; G</p></li></ol><p><img src="https://i.loli.net/2020/05/13/juDeNmIx9zRHGE1.png" alt="image.png"></p><p>内部流程</p><p><img src="https://i.loli.net/2020/05/18/tGXixoF8fMYVhDa.png" alt="image.png"></p><p>当组件D变为组件G时,即使这两个组件的结构相似,一旦React判断D和G是不同类型的组件，就不会比较二者的结构，而是直接删除组件D，重新创建组件G及其子节点。虽然当两个组件时不同类型但结构相似时，diff会影响性能，但入React官方所说，不同类型的组件很少存在相似DOM树的情况，因此这种极端因素很难在实际开发过程中造成较大的影响。</p><h3 id="Element-diff"><a href="#Element-diff" class="headerlink" title="Element diff"></a>Element diff</h3><p>当节点处于同于同一层级时候，diff提供了3种节点操作，分别是插入、移动、删除</p><ul><li>插入：新的组件类型不在旧集合里，即全新的节点，需要对新节点执行插入操作</li><li>移动：旧集合里有新组件类型，且element是可更新的类型，这种情况下 prevChild=nextChild ，就需要做移动操作，可以复用以前的 DOM 节点。</li><li>删除：旧组件类型，在新集合里也有，但对应的element不同则不能直接复用和更新，需要执行删除操作，或者旧组件不在新集合里，也需要执行删除操作。</li></ul><p><img src="https://i.loli.net/2020/05/18/SpXsxoKOGFJmEbj.png" style="zoom: 33%;"></p><p>旧集合中包含节点A、B、C和D，</p><p>更新后的新集合中包含节点B、A、D和C，</p><p>此时新旧集合进行diff差异化对比，发现B!=A，则创建并插入B至新集合，删除旧集合A;以此类推，创建并插入A、D和C，删除B、C和D。</p><hr><p>我们发现这些都是相同的节点，仅仅是位置发生了变化，但却需要进行繁杂低效的删除、创建操作，其实只要对这些节点进行位置移动即可。React针对这一现象提出了一种优化策略：<strong>让开发者对同一层级的同组子节点，添加唯一key进行区分</strong>。虽然这只是小小的改动，性能上却发生了翻天覆地的变化，再来看一下应用了这个策略之后，diff是如何处理的</p><p>example:</p><p><img src="https://i.loli.net/2020/05/18/AOauJGyqPtEoHNW.png" alt="image.png" style="zoom: 50%;"></p><p>通过key可以准确的发现新旧集合中的节点都是相同的节点，因此无需进行节点删除和创建，只需要将旧集合中的位置进行移动，更新为新集合中节点的位置名词是的React给出的diff结果为：B、D不做任何操作，A、C进行移动操作就行。</p><p>具体的流程看表格：</p><table><thead><tr><th>index</th><th style="text-align:left">节点</th><th style="text-align:left">oldIndex</th><th style="text-align:left">lastIndex</th><th style="text-align:left">操作</th></tr></thead><tbody><tr><td>0</td><td style="text-align:left">B</td><td style="text-align:left">1</td><td style="text-align:left">0</td><td style="text-align:left">oldIndex(1)&gt;lastIndex(0),lastIndex=oldIndex，lastIndex变为1</td></tr><tr><td>1</td><td style="text-align:left">A</td><td style="text-align:left">0</td><td style="text-align:left">1</td><td style="text-align:left">oldIndex(0)&lt;lastIndex(1),节点A移动至index(1)的位置</td></tr><tr><td>2</td><td style="text-align:left">D</td><td style="text-align:left">3</td><td style="text-align:left">1</td><td style="text-align:left">oldIndex(3)&gt;lastIndex(1),lastIndex=oldIndex，lastIndex变为3</td></tr><tr><td>3</td><td style="text-align:left">C</td><td style="text-align:left">2</td><td style="text-align:left">3</td><td style="text-align:left">oldIndex(2)&lt;lastIndex(3),节点C移动至index(3)的位置</td></tr></tbody></table><ul><li>index： 新集合的遍历下标。</li><li>oldIndex：当前节点在老集合中的下标。</li><li>lastIndex：在新集合访问过的节点中，其在老集合的最大下标值(在老集合中最右的位置, 即最大的位置)。</li></ul><p>操作一栏中只比较oldIndex和lastIndex：</p><ul><li><p>当oldIndex&gt;lastIndex时，将oldIndex的值赋值给lastIndex</p></li><li><p>当oldIndex=lastIndex时，不操作</p></li><li><p>当oldIndex&lt;lastIndex时，将当前节点移动到index的位置，</p><p>新版本React，应该是从v16起, placeChild(<em>newFiber</em>, <em>lastPlacedIndex</em>, <em>newIndex</em>), <em>lastPlacedIndex</em>就是当前的新fiber数组中已经遍历过的fiber中在上一次更新时的index中最大的那个，就是上面的lastIndex</p></li></ul><p>  <del>老版本React源码中的enqueueMove(this, child._mountIndex, toIndex)，其中 toIndex 其实就是 nextIndex</del></p><p>  <img src="https://tva1.sinaimg.cn/large/007S8ZIlgy1gf72uvqaenj30df0fdjtm.jpg" alt="image-20200527161523369"></p><hr><p>上面例子是新旧集合中的节点都是相同的节点的情况下，那如果新集合中有新加入的节点且旧集合存在 需要删除的节点，那么 diff 又是如何对比运作的</p><p>ABCD –&gt; BECA</p><table><thead><tr><th>index</th><th style="text-align:left">节点</th><th style="text-align:left">oldIndex</th><th style="text-align:left">lastIndex</th><th style="text-align:left">操作</th></tr></thead><tbody><tr><td>0</td><td style="text-align:left">B</td><td style="text-align:left">1</td><td style="text-align:left">0</td><td style="text-align:left">oldIndex(1)&gt;lastIndex(0)，lastIndex=oldIndex，lastIndex变为1</td></tr><tr><td>1</td><td style="text-align:left">E</td><td style="text-align:left">-</td><td style="text-align:left">1</td><td style="text-align:left">oldIndex不存在，添加节点E至index(1)的位置</td></tr><tr><td>2</td><td style="text-align:left">C</td><td style="text-align:left">2</td><td style="text-align:left">1</td><td style="text-align:left">oldIndex(2)&gt;lastIndex(1),lastIndex=oldIndex，lastIndex变为2</td></tr><tr><td>3</td><td style="text-align:left">A</td><td style="text-align:left">0</td><td style="text-align:left">2</td><td style="text-align:left">oldIndex(0)&lt;lastIndex(2),节点A移动至index(3)的位置</td></tr></tbody></table><blockquote><p>PS：最后还需要对旧集合进行循环遍历，找出新集合中没有的节点，此时发现存在这样的节点D，因此删除节点D，到此 diff 操作全部完成。</p></blockquote><p>同样操作一栏中只比较oldIndex和lastIndex，但是oldIndex可能有不存在的情况：</p><ul><li>oldIndex存在<ol><li>当oldIndex&gt;lastIndex时，将oldIndex的值赋值给lastIndex</li><li>当oldIndex=lastIndex时，不操作</li><li>当oldIndex&lt;lastIndex时，将当前节点移动到index的位置</li></ol></li><li><p>oldIndex不存在</p><ol><li>新增当前节点至index的位置</li></ol><p><img src="https://i.loli.net/2020/05/18/r8vweGqTnVLUaic.png" alt="image.png"></p></li></ul><hr><p>当然这种diff并非完美无缺的，我们来看这么一种情况：</p><p><img src="https://i.loli.net/2020/05/18/WI7XbhK84QuJej5.png" alt="image.png"></p><p>实际我们只需对D执行移动操作，然而由于D在旧集合中的位置是最大的，导致其他节点的oldIndex &lt; lastIndex，造成D没有执行移动操作，而是A、B、C全部移动到D节点后面的现象。针对这种情况，官方建议：</p><blockquote><p>在开发过程中，尽量减少类似将最后一个节点移动到列表首部的操作。当节点数量过大或更新操作过于频繁时，这在一定程度上会影响React的渲染性能</p></blockquote><p>由于key的存在，react可以准确地判断出该节点在新集合中是否存在，这极大地提高了diff效率。我们在开发过中进行列表渲染的时候，若没有加key，react会抛出警告要求开发者加上key，就是为了提高diff效率。</p><p>但是加了key一定要比没加key的性能更高吗？我们再来看一个例子：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">现在有一集合[1,2,3,4,5],渲染成如下的样子：</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>4<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>5<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">---------------</span><br><span class="line">现在我们将这个集合的顺序打乱变成[1,3,2,5,4]。</span><br><span class="line">1.加key</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">key</span>=<span class="string">'1'</span>&gt;</span>1<span class="tag">&lt;/<span class="name">div</span>&gt;</span>             <span class="tag">&lt;<span class="name">div</span> <span class="attr">key</span>=<span class="string">'1'</span>&gt;</span>1<span class="tag">&lt;/<span class="name">div</span>&gt;</span>     </span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">key</span>=<span class="string">'2'</span>&gt;</span>2<span class="tag">&lt;/<span class="name">div</span>&gt;</span>             <span class="tag">&lt;<span class="name">div</span> <span class="attr">key</span>=<span class="string">'3'</span>&gt;</span>3<span class="tag">&lt;/<span class="name">div</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">key</span>=<span class="string">'3'</span>&gt;</span>3<span class="tag">&lt;/<span class="name">div</span>&gt;</span>  ========&gt;  <span class="tag">&lt;<span class="name">div</span> <span class="attr">key</span>=<span class="string">'2'</span>&gt;</span>2<span class="tag">&lt;/<span class="name">div</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">key</span>=<span class="string">'4'</span>&gt;</span>4<span class="tag">&lt;/<span class="name">div</span>&gt;</span>             <span class="tag">&lt;<span class="name">div</span> <span class="attr">key</span>=<span class="string">'5'</span>&gt;</span>5<span class="tag">&lt;/<span class="name">div</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">key</span>=<span class="string">'5'</span>&gt;</span>5<span class="tag">&lt;/<span class="name">div</span>&gt;</span>             <span class="tag">&lt;<span class="name">div</span> <span class="attr">key</span>=<span class="string">'4'</span>&gt;</span>4<span class="tag">&lt;/<span class="name">div</span>&gt;</span>  </span><br><span class="line">操作：节点2移动至下标为2的位置，节点4移动至下标为4的位置。</span><br><span class="line"></span><br><span class="line">2.不加key</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>1<span class="tag">&lt;/<span class="name">div</span>&gt;</span>             <span class="tag">&lt;<span class="name">div</span>&gt;</span>1<span class="tag">&lt;/<span class="name">div</span>&gt;</span>     </span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>2<span class="tag">&lt;/<span class="name">div</span>&gt;</span>             <span class="tag">&lt;<span class="name">div</span>&gt;</span>3<span class="tag">&lt;/<span class="name">div</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>3<span class="tag">&lt;/<span class="name">div</span>&gt;</span>  ========&gt;  <span class="tag">&lt;<span class="name">div</span>&gt;</span>2<span class="tag">&lt;/<span class="name">div</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>4<span class="tag">&lt;/<span class="name">div</span>&gt;</span>             <span class="tag">&lt;<span class="name">div</span>&gt;</span>5<span class="tag">&lt;/<span class="name">div</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>5<span class="tag">&lt;/<span class="name">div</span>&gt;</span>             <span class="tag">&lt;<span class="name">div</span>&gt;</span>4<span class="tag">&lt;/<span class="name">div</span>&gt;</span>  </span><br><span class="line">操作：修改第1个到第5个节点的innerText</span><br><span class="line">---------------</span><br><span class="line">如果我们对这个集合进行增删的操作改成[1,3,2,5,6]。</span><br><span class="line">1.加key</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">key</span>=<span class="string">'1'</span>&gt;</span>1<span class="tag">&lt;/<span class="name">div</span>&gt;</span>             <span class="tag">&lt;<span class="name">div</span> <span class="attr">key</span>=<span class="string">'1'</span>&gt;</span>1<span class="tag">&lt;/<span class="name">div</span>&gt;</span>     </span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">key</span>=<span class="string">'2'</span>&gt;</span>2<span class="tag">&lt;/<span class="name">div</span>&gt;</span>             <span class="tag">&lt;<span class="name">div</span> <span class="attr">key</span>=<span class="string">'3'</span>&gt;</span>3<span class="tag">&lt;/<span class="name">div</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">key</span>=<span class="string">'3'</span>&gt;</span>3<span class="tag">&lt;/<span class="name">div</span>&gt;</span>  ========&gt;  <span class="tag">&lt;<span class="name">div</span> <span class="attr">key</span>=<span class="string">'2'</span>&gt;</span>2<span class="tag">&lt;/<span class="name">div</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">key</span>=<span class="string">'4'</span>&gt;</span>4<span class="tag">&lt;/<span class="name">div</span>&gt;</span>             <span class="tag">&lt;<span class="name">div</span> <span class="attr">key</span>=<span class="string">'5'</span>&gt;</span>5<span class="tag">&lt;/<span class="name">div</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">key</span>=<span class="string">'5'</span>&gt;</span>5<span class="tag">&lt;/<span class="name">div</span>&gt;</span>             <span class="tag">&lt;<span class="name">div</span> <span class="attr">key</span>=<span class="string">'6'</span>&gt;</span>6<span class="tag">&lt;/<span class="name">div</span>&gt;</span>  </span><br><span class="line">操作：节点2移动至下标为2的位置，新增节点6至下标为4的位置，删除节点4。</span><br><span class="line"></span><br><span class="line">2.不加key</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>1<span class="tag">&lt;/<span class="name">div</span>&gt;</span>             <span class="tag">&lt;<span class="name">div</span>&gt;</span>1<span class="tag">&lt;/<span class="name">div</span>&gt;</span>     </span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>2<span class="tag">&lt;/<span class="name">div</span>&gt;</span>             <span class="tag">&lt;<span class="name">div</span>&gt;</span>3<span class="tag">&lt;/<span class="name">div</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>3<span class="tag">&lt;/<span class="name">div</span>&gt;</span>  ========&gt;  <span class="tag">&lt;<span class="name">div</span>&gt;</span>2<span class="tag">&lt;/<span class="name">div</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>4<span class="tag">&lt;/<span class="name">div</span>&gt;</span>             <span class="tag">&lt;<span class="name">div</span>&gt;</span>5<span class="tag">&lt;/<span class="name">div</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>5<span class="tag">&lt;/<span class="name">div</span>&gt;</span>             <span class="tag">&lt;<span class="name">div</span>&gt;</span>6<span class="tag">&lt;/<span class="name">div</span>&gt;</span> </span><br><span class="line">操作：修改第1个到第5个节点的innerText</span><br><span class="line">---------------</span><br><span class="line">通过上面这两个例子我们发现：</span><br><span class="line">由于dom节点的移动操作开销是比较昂贵的，没有key的情况下要比有key的性能更好。</span><br></pre></td></tr></table></figure><p>通过上面的例子我们发现，虽然加了key提高了diff效率，但是未必一定提升了页面的性能。因此我们要注意这么一点：</p><blockquote><p>对于简单列表页渲染来说，不加key要比加了key的性能更好</p></blockquote><p>根据上面的情况，最后我们总结一下key的作用：</p><ul><li>准确判断出当前节点是否在旧集合中</li><li>极大地减少遍历次数</li></ul><h2 id="渲染"><a href="#渲染" class="headerlink" title="渲染"></a>渲染</h2><h4 id="合并操作"><a href="#合并操作" class="headerlink" title="合并操作"></a>合并操作</h4><p>当调用component的<code>setstate</code>时，React会将其标记为dirty。到每个时间循环结束，React检查所有标记dirty的component重新绘制</p><p>这里的“合并操作”是说，在一个事件循环中，DOM只会被更新一次，这个特性是构建高性能应用的关键。</p><p> <img src="https://i.loli.net/2020/05/14/b4J7ntmFZLOlaAK.png" alt=""></p><h4 id="子树渲染"><a href="#子树渲染" class="headerlink" title="子树渲染"></a>子树渲染</h4><p>调用setState方法时，component会重新构建包括子树子节点的virtual DOM 。如果你在根节点调用<code>setState</code>,整个React应用都会被重新渲染。所有的component，即便没有更新，都会调用他们的render方法，这个听起来很可怕，性能实际上很低，但实际上我们不会触及真实的DOM，运行起来就没问题。</p><p>在写react代码时，每当数据有更新，你都不会算调用根节点的<code>setState</code>。你会在需要接收对应的component上调用，或者在上面的几个component。你很少要一直到根节点。就是说页面更新只出现在用户交互的部分。</p><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlgy1geqli50hv8j30b005uweh.jpg" alt="img"></p><h4 id="选择子树渲染"><a href="#选择子树渲染" class="headerlink" title="选择子树渲染"></a>选择子树渲染</h4><p>去掉一些子树的重新渲染.</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">boolean</span> shouldComponentUpdate(object nextProps, object nextState)</span><br></pre></td></tr></table></figure><p>根据component的前一个和下一个<code>props/state</code>， 你可以告诉React这个component没有更新，也不需要重绘</p><blockquote><p>注意, 这个函数每次都会被调用, 所以你要确保运行起来花的时间更少,<br>比 React 的做法时间少, 还有比计算 component 需要的时间少,<br>即便重新绘制并不是必要的.</p><p>Ps: 不过有可能你的方法里写的比React花费的时间更多</p></blockquote><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlgy1geqliamkyej30az05kglm.jpg" alt="img"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li><p>React的高效得益于VIrtual DOM + React diff的体系。diff算法并非React独创，react只是在传统的diff算法中做了优化。但因为优化，将diff算法的时间复杂度一下从O(n^3) 降到了 O(n)。</p></li><li><p>开发组件时，保持稳定的dom结构会有助于性能的提升。</p></li><li><p>开发过程中，尽量减少类似将最后一个节点移动到列表首部的操作。</p></li><li><p>key的存在是为了提升diff效率，但未必一定就可以提升性能，记住简单列表渲染情况下，不加key要比加key的性能更好。（不过可能因为React console的提醒，大家都会加上，个人觉得这点性能问题不大）。</p></li><li><p>我们可以根据diff的特点，在具体场景中取长补短，规避一些算法上面的短板也是有利于提升应用整体的性能。</p></li></ul><p>之后可以简单实现下diff</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://blog.csdn.net/sexy_squirrel/java/article/details/79801940" target="_blank" rel="noopener">浅谈React中的diff</a></p><p><a href="https://www.zhihu.com/question/66851503/answer/246766239" target="_blank" rel="noopener">react的diff 从O(n^3)到 O(n) ，请问 O(n^3) 和O(n) 是怎么算出来？</a></p><p><a href="https://zhuanlan.zhihu.com/p/20346379?refer=purerender" target="_blank" rel="noopener">React 源码剖析系列 － 不可思议的 react diff</a></p><p><a href="https://juejin.im/post/5cb5b4926fb9a068b52fb823" target="_blank" rel="noopener">React diff原理探究以及应用实践</a></p><p><a href="https://juejin.im/post/5cb5b4926fb9a068b52fb823" target="_blank" rel="noopener">React Fiber 原理介绍</a></p>]]></content>
    
    <summary type="html">
    
      React 的两大特色：React diff 和 Virtual Dom。React 中最值得称道的部分莫过于 Virtual DOM 与 diff 的完美结合，特别是其高效的 diff 算法，让用户可以无需顾忌性能问题而”任性自由”的刷新页面，让开发者也可以无需关心 Virtual DOM 背后的运作原理，因为 React diff 会帮助我们计算出 Virtual DOM 中真正变化的部分，并只针对该部分进行实际 DOM 操作，而非重新渲染整个页面，从而保证了每次操作更新后页面的高效渲染，因此 Virtual DOM 与 diff 是保证 React 性能口碑的幕后推手。
    
    </summary>
    
      <category term="默认分类" scheme="https://kitions.github.io/categories/%E9%BB%98%E8%AE%A4%E5%88%86%E7%B1%BB/"/>
    
    
      <category term="React" scheme="https://kitions.github.io/tags/React/"/>
    
      <category term="diff" scheme="https://kitions.github.io/tags/diff/"/>
    
  </entry>
  
  <entry>
    <title>网易云歌单转移到Apple Music、Spotify等流音乐平台</title>
    <link href="https://kitions.github.io/2020/04/30/%E7%BD%91%E6%98%93%E4%BA%91%E8%BD%AC%E5%87%BA%E6%AD%8C%E5%8D%95/"/>
    <id>https://kitions.github.io/2020/04/30/网易云转出歌单/</id>
    <published>2020-04-30T02:13:33.000Z</published>
    <updated>2020-06-05T10:23:26.535Z</updated>
    
    <content type="html"><![CDATA[<h1 id="网易云歌单转移到Apple-Music、Spotify等流音乐平台"><a href="#网易云歌单转移到Apple-Music、Spotify等流音乐平台" class="headerlink" title="网易云歌单转移到Apple Music、Spotify等流音乐平台"></a>网易云歌单转移到Apple Music、Spotify等流音乐平台</h1><p>纯听歌，而且主力是在iOS端和MAC端的，Apple Music可能是最nice的。</p><p>系统级的应用体验，界面简洁。但太过于简洁，导致很多人嗤之以鼻，欧美曲库对比国内音乐应用算是最齐的，华语还行吧，但网易音乐人，小众民谣歌手的曲库应该很不全，新歌上架速度挺快的。音质比qq音乐，网易云好很多。你花钱相当于买断，新专辑都不收费，像网易，腾讯，尽管你充了会员，歌手出新专辑时，照样数字专辑是单独收费。</p><p>价格： 教育优惠盛惠5元/月，个人用户10元/月，家庭组15元/月。这么便宜的价格拥有这么庞大的曲库真的很实惠了。鉴于大家都qiong，你可以去某宝搜个Apple music教育优惠邮箱，5块钱，你以后5元/月。 不过10块也不贵，你加上家人开个家庭组，也很便宜，家庭组最多6个id，相当于每人每月两块五</p><p>缺点就是没有歌曲评论和社交功能，过于简洁。</p><h3 id="1-登录你的网易云账号"><a href="#1-登录你的网易云账号" class="headerlink" title="1. 登录你的网易云账号"></a>1. 登录你的<a href="https://music.163.com/" target="_blank" rel="noopener">网易云</a>账号</h3><p>   <img src="https://s1.ax1x.com/2020/04/30/JHXTVf.png" alt="JHXTVf.png"></p><h3 id="2-进入个人中心，选择你想要转移的歌单"><a href="#2-进入个人中心，选择你想要转移的歌单" class="headerlink" title="2. 进入个人中心，选择你想要转移的歌单"></a>2. 进入个人中心，选择你想要转移的歌单</h3><p>   <a href="https://imgchr.com/i/JHjpZV" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2020/04/30/JHjpZV.png" alt="JHjpZV.png"></a></p><h3 id="3-右键检查进入开发者工具，在console里复制这段代码回车"><a href="#3-右键检查进入开发者工具，在console里复制这段代码回车" class="headerlink" title="3. 右键检查进入开发者工具，在console里复制这段代码回车"></a>3. 右键检查进入开发者工具，在console里复制这段代码回车</h3><blockquote><p>其实就是很简单的选中表格中的歌名字段 和作者字段 拼接在一起，<code>作者-歌名</code>的形式，处理成这个<a href="https://www.tunemymusic.com网站需要的数据" target="_blank" rel="noopener">https://www.tunemymusic.com网站需要的数据</a></p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> script = <span class="built_in">document</span>.createElement(<span class="string">"SCRIPT"</span>);</span><br><span class="line">    script.src = <span class="string">'https://apps.bdimg.com/libs/jquery/2.1.4/jquery.min.js'</span>;</span><br><span class="line">    script.type = <span class="string">'text/javascript'</span>;</span><br><span class="line">    <span class="built_in">document</span>.getElementsByTagName(<span class="string">"head"</span>)[<span class="number">0</span>].appendChild(script);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> checkReady = <span class="function"><span class="keyword">function</span> (<span class="params">callback</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">window</span>.jQuery) &#123;</span><br><span class="line">            callback(jQuery);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">window</span>.setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                checkReady(callback);</span><br><span class="line">            &#125;, <span class="number">100</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    checkReady(<span class="function"><span class="keyword">function</span> (<span class="params">$</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> text = <span class="string">""</span>;</span><br><span class="line">        $(<span class="built_in">window</span>.contentFrame.document).find(<span class="string">'#m-playlist .m-table tbody tr'</span>).each(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            text += ($(<span class="keyword">this</span>).children(<span class="string">'td:eq(3)'</span>).children(<span class="string">'div'</span>).attr(<span class="string">'title'</span>) + <span class="string">" - "</span> + $(<span class="keyword">this</span>).find(<span class="string">"b"</span>).attr(<span class="string">"title"</span>) + <span class="string">"&lt;br/&gt;"</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">        $(<span class="built_in">window</span>.contentFrame.document).find(<span class="string">'body'</span>).append(<span class="string">"&lt;p&gt;"</span> + text + <span class="string">"&lt;/p&gt;"</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></figure><p>输出在了页面就是这样</p><p><a href="https://imgchr.com/i/JHvNc9" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2020/04/30/JHvNc9.png" alt="JHvNc9.png"></a></p><h3 id="4-打开咱们-最关键的-TuneMyMusic-https-www-tunemymusic-com-，也不用登录，也不用注册"><a href="#4-打开咱们-最关键的-TuneMyMusic-https-www-tunemymusic-com-，也不用登录，也不用注册" class="headerlink" title="4. 打开咱们 最关键的[TuneMyMusic][https://www.tunemymusic.com/]，也不用登录，也不用注册"></a>4. 打开咱们 最关键的[TuneMyMusic][<a href="https://www.tunemymusic.com/]，也不用登录，也不用注册" target="_blank" rel="noopener">https://www.tunemymusic.com/]，也不用登录，也不用注册</a></h3><blockquote><p>在不同的音乐服务平台之间传送播放列表<br>将您在任意音乐服务平台内的音乐库传送到您想要的任何其他平台！支持Spotify, TIDAL, Apple Music, YouTube等等</p></blockquote><p>   <a href="https://imgchr.com/i/JHvrtO" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2020/04/30/JHvrtO.md.png" alt="JHvrtO.md.png"></a></p><h4 id="4-1-导入方式"><a href="#4-1-导入方式" class="headerlink" title="4.1 导入方式"></a>4.1 导入方式</h4><p>选择从文本，当然你也可以从其他平台导入<img src="https://s1.ax1x.com/2020/04/30/JHxeUK.png" alt="JHxeUK.png"></p><h4 id="4-2-复制"><a href="#4-2-复制" class="headerlink" title="4.2 复制"></a>4.2 复制</h4><p>刚刚网易云那儿复制的歌手-歌名一大长串复制进去</p><p><img src="https://s1.ax1x.com/2020/04/30/JHx4M9.png" alt="JHx4M9.png"></p><h4 id="4-3-选择导入的平台"><a href="#4-3-选择导入的平台" class="headerlink" title="4.3  选择导入的平台"></a>4.3  选择导入的平台</h4><p>咱们这儿选择Apple music，然后会跳出一个登录的框，你登录后</p><p><img src="https://s1.ax1x.com/2020/04/30/JHzKoV.png" alt="JHzKoV.png"></p><h4 id="4-4-等待导入"><a href="#4-4-等待导入" class="headerlink" title="4.4  等待导入"></a>4.4  等待导入</h4><p>哪首成功，哪首失败都会显示出来，Apple Music小音乐人的曲库较少，欧美歌手的歌较全，所以可能你的歌单有一半会不成功。</p><p><img src="https://s1.ax1x.com/2020/04/30/JHz2wt.png" alt="JHz2wt.png"></p><h3 id="5-成功刚刚导入的。"><a href="#5-成功刚刚导入的。" class="headerlink" title="5. 成功刚刚导入的。"></a>5. 成功刚刚导入的。</h3><p><img src="https://s1.ax1x.com/2020/04/30/JbSuXd.png" alt="JbSuXd.png"></p>]]></content>
    
    <summary type="html">
    
      纯听歌，而且主力是在iOS端和MAC端的，Apple Music可能是最nice的。利用TuneMyMusic网站转移歌单
    
    </summary>
    
      <category term="默认分类" scheme="https://kitions.github.io/categories/%E9%BB%98%E8%AE%A4%E5%88%86%E7%B1%BB/"/>
    
    
  </entry>
  
  <entry>
    <title>Angular中的自定义表单控件ControlValueAccessor</title>
    <link href="https://kitions.github.io/2020/04/02/Angular%E4%B8%AD%E7%9A%84%E8%87%AA%E5%AE%9A%E4%B9%89%E8%A1%A8%E5%8D%95%E6%8E%A7%E4%BB%B6ControlValueAccessor/"/>
    <id>https://kitions.github.io/2020/04/02/Angular中的自定义表单控件ControlValueAccessor/</id>
    <published>2020-04-02T09:52:16.000Z</published>
    <updated>2020-04-07T02:02:39.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Angular中的自定义表单控件ControlValueAccessor"><a href="#Angular中的自定义表单控件ControlValueAccessor" class="headerlink" title="Angular中的自定义表单控件ControlValueAccessor"></a>Angular中的自定义表单控件ControlValueAccessor</h1><p>这个是个较为简单的理解</p><p> ControlValueAccessor acts as a bridge between the Angular forms API and a native element in the DOM.</p><p>作用：</p><ul><li>把 form 模型中值映射到视图中</li><li>当视图发生变化时，通知 form directives 或 form controls</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> ControlValueAccessor &#123;</span><br><span class="line">  writeValue(obj: <span class="built_in">any</span>): <span class="built_in">void</span></span><br><span class="line">  registerOnChange(fn: <span class="built_in">any</span>): <span class="built_in">void</span></span><br><span class="line">  registerOnTouched(fn: <span class="built_in">any</span>): <span class="built_in">void</span></span><br><span class="line">  setDisabledState(isDisabled: <span class="built_in">boolean</span>)?: <span class="built_in">void</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>writeValue(obj: any)：该方法用于将模型中的新值写入视图或 DOM 属性中，即model-&gt;view</li><li>registerOnChange(fn: any)：设置当控件接收到 change 事件后，调用的函数，可以用来通知外部，组件已经发生变化，即view-&gt;model</li><li>registerOnTouched(fn: any)：设置当控件接收到 touched 事件后，调用的函数</li><li>setDisabledState?(isDisabled: boolean)：当控件状态变成 DISABLED 或从 DISABLED 状态变化成 ENABLE 状态时，会调用该函数。该函数会根据参数值，启用或禁用指定的 DOM 元素。</li></ul><p>任何一个组件或指令都可以通过实现 <code>ControlValueAccessor</code> 接口并注册为 <code>NG_VALUE_ACCESSOR</code>，从而转变成 <code>ControlValueAccessor</code> 类型的对象</p><p><code>registerOnChange</code> 方法来注册由每次原生表单控件值更新时触发的回调函数</p><p>Example:</p><p>子组件</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">    selector: <span class="string">'app-demo'</span>,</span><br><span class="line">    templateUrl: <span class="string">'./demo.component.html'</span>,</span><br><span class="line">    styleUrls: [<span class="string">'./demo.component.css'</span>],</span><br><span class="line">    providers: [</span><br><span class="line">        &#123;</span><br><span class="line">            provide: NG_VALUE_ACCESSOR,</span><br><span class="line">            useExisting: DemoComponent,</span><br><span class="line">            multi: <span class="literal">true</span></span><br><span class="line">        &#125;,</span><br><span class="line">        DemoService</span><br><span class="line">    ]</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> DemoComponent <span class="keyword">implements</span> ControlValueAccessor, OnInit &#123;</span><br><span class="line">    <span class="keyword">private</span> _result: &#123; [index: <span class="built_in">string</span>]: [] &#125; = &#123;&#125;;</span><br><span class="line">    <span class="keyword">private</span> _labelHandler: <span class="function">(<span class="params">val: <span class="built_in">any</span></span>) =&gt;</span> <span class="built_in">void</span>;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params"></span></span><br><span class="line"><span class="params">        <span class="keyword">private</span> service: DemoService,</span></span><br><span class="line"><span class="params">    </span>) &#123; &#125;</span><br><span class="line">  </span><br><span class="line">  aTestFunc()&#123;</span><br><span class="line">      <span class="keyword">this</span>._labelHandler(<span class="string">"123123"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">  writeValue(value: <span class="built_in">string</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (value) &#123;</span><br><span class="line">            <span class="comment">// todo 在这里对父组件传进来的ngmodel值做处理</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    registerOnChange(fn: <span class="built_in">any</span>) &#123;</span><br><span class="line">      <span class="comment">//每次控件view层的值发生改变，都要调用该方法通知外部</span></span><br><span class="line">        <span class="keyword">this</span>._labelHandler = fn;</span><br><span class="line">    &#125;</span><br><span class="line">    registerOnTouched(fn: <span class="built_in">any</span>) &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>父组件</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// html</span><br><span class="line">    <span class="tag">&lt;<span class="name">app-demo</span> [(<span class="attr">ngModel</span>)]=<span class="string">"demo"</span> &gt;</span><span class="tag">&lt;/<span class="name">app-demo</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// component.ts</span></span><br><span class="line"></span><br><span class="line">ngOnInit() &#123;</span><br><span class="line">  <span class="comment">// 给demo一个值双向绑定</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      ControlValueAccessor acts as a bridge between the Angular forms API and a native element in the DOM.
    
    </summary>
    
      <category term="默认分类" scheme="https://kitions.github.io/categories/%E9%BB%98%E8%AE%A4%E5%88%86%E7%B1%BB/"/>
    
    
      <category term="Angnular" scheme="https://kitions.github.io/tags/Angnular/"/>
    
  </entry>
  
  <entry>
    <title>CKedior两张方法上传图片及简单的plugins编写</title>
    <link href="https://kitions.github.io/2020/03/19/CKedior%E4%B8%A4%E5%BC%A0%E6%96%B9%E6%B3%95%E4%B8%8A%E4%BC%A0%E5%9B%BE%E7%89%87%E5%8F%8A%E7%AE%80%E5%8D%95%E7%9A%84plugins%E7%BC%96%E5%86%99/"/>
    <id>https://kitions.github.io/2020/03/19/CKedior两张方法上传图片及简单的plugins编写/</id>
    <published>2020-03-19T09:29:44.000Z</published>
    <updated>2020-04-17T10:44:48.000Z</updated>
    
    <content type="html"><![CDATA[<p>CKedior比较稳健，文档很全，支持插件，配置什么的也很友好，先给个文档链接感受一下：ckeditor在线文档<a href="https://docs.ckeditor.com/#!/guide/dev_installation。" target="_blank" rel="noopener">https://docs.ckeditor.com/#!/guide/dev_installation。</a></p><p>ckeditor富文本编辑器上传图片目前想到的两个方法：</p><ol><li>自己写一个上传插件（扩展性更强）</li><li>找到钩子函数监听事件（上传更通用）</li></ol><h1 id="一-自己写一个上传插件"><a href="#一-自己写一个上传插件" class="headerlink" title="一. 自己写一个上传插件"></a>一. 自己写一个上传插件</h1><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>毕竟每个人的需求都是不一样的，这时候一个编辑器的“可扩展性”就必不可少了。有了这个插件功能，你可以针对富文本编辑器做各种各样的事情，比如复制外站图片，自动上传到你指定的域名，并插入富文本编辑器中等等。</p><h3 id="怎么写一个ckeditor的plugins"><a href="#怎么写一个ckeditor的plugins" class="headerlink" title="怎么写一个ckeditor的plugins"></a>怎么写一个ckeditor的plugins</h3><h5 id="1-文件夹"><a href="#1-文件夹" class="headerlink" title="1. 文件夹"></a>1. 文件夹</h5><p>在ckeidtor的目录下有个plugins文件夹，我们要做的就在这个文件夹里，在plugins下新建一个文件夹，名称为你所命名的插件名，新建一个js。images文件夹用来存放用到的小图标.</p><p><img src="https://ae01.alicdn.com/kf/H2f66016af09c42188659a0e89028b111I.png" alt=""></p><h5 id="2-plugin-js"><a href="#2-plugin-js" class="headerlink" title="2. plugin.js"></a>2. plugin.js</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">CKEDITOR.plugins.add( <span class="string">'UploadImage'</span>, &#123;</span><br><span class="line">    icons: <span class="string">'image'</span>,</span><br><span class="line">    init: <span class="function"><span class="keyword">function</span>(<span class="params"> editor </span>) </span>&#123;</span><br><span class="line">        <span class="comment">// Plugin logic goes here...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h6 id="2-1-创建编辑器命令"><a href="#2-1-创建编辑器命令" class="headerlink" title="2.1 创建编辑器命令"></a>2.1 创建编辑器命令</h6><p>我们希望插件具有一个对话框窗口，因此我们需要定义一个编辑器命令来打开一个新的对话框窗口。要做到这一点，我们需要使用的<a href="https://ckeditor.com/docs/ckeditor4/latest/api/CKEDITOR_editor.html#method-addCommand" target="_blank" rel="noopener">editor.addCommand</a> 函数注册abbr命令。业务逻辑 主要写在这块</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">editor.addCommand( <span class="string">'abbr'</span>, <span class="keyword">new</span> CKEDITOR.dialogCommand( <span class="string">'abbrDialog'</span> ) );</span><br></pre></td></tr></table></figure><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">editor.addCommand(<span class="string">'openFileComm'</span>, &#123;&#125;</span><br></pre></td></tr></table></figure><h6 id="2-2-创建工具栏按钮"><a href="#2-2-创建工具栏按钮" class="headerlink" title="2.2 创建工具栏按钮"></a>2.2 创建工具栏按钮</h6><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">editor.ui.addButton( <span class="string">'Abbr'</span>, &#123;</span><br><span class="line">    label: <span class="string">'Insert Abbreviation'</span>,</span><br><span class="line">    command: <span class="string">'UploadImage'</span>,</span><br><span class="line">    toolbar: <span class="string">'insert'</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h6 id="2-3-CKEditor初始化"><a href="#2-3-CKEditor初始化" class="headerlink" title="2.3 CKEditor初始化"></a>2.3 CKEditor初始化</h6><p>告诉CKEditor加载我们的插件了。为此，我们必须将其名称添加到<br>CKEDITOR.config.extraPlugins配置选项中：<br><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">config.extraPlugins = <span class="string">'UploadImage'</span>;</span><br></pre></td></tr></table></figure></p><h3 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h3><p>ps: 目前写的插件是用jquery针对自己项目使用的。没有写成一个通用型的插件</p><p><img src="https://ae01.alicdn.com/kf/Hadce4c9a7cd34578a322d91efc90af9c8.png" alt=""></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment"> * link 添加自定义图片上传组件  </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*     html</span></span><br><span class="line"><span class="comment">    &lt;div&gt;</span></span><br><span class="line"><span class="comment">        &lt;form id="editorImageForm" enctype="multipart/form-data" method="post"</span></span><br><span class="line"><span class="comment">            style="display: none"&gt;</span></span><br><span class="line"><span class="comment">            &lt;div&gt;</span></span><br><span class="line"><span class="comment">                &lt;input type="file" id="editFileInput" name="file"</span></span><br><span class="line"><span class="comment">                    accept=".gif,.png,.jpg,.jpeg" /&gt;&lt;br&gt;</span></span><br><span class="line"><span class="comment">            &lt;/div&gt;</span></span><br><span class="line"><span class="comment">        &lt;/form&gt;</span></span><br><span class="line"><span class="comment">    &lt;/div&gt;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line">CKEDITOR.plugins.add(<span class="string">'UploadImage'</span>,&#123;<span class="comment">// 调用add方法添加插件</span></span><br><span class="line">    init : <span class="function"><span class="keyword">function</span> (<span class="params">editor</span>) </span>&#123; <span class="comment">// 初始化页面时调用方法，接收一个富文本对象实例</span></span><br><span class="line">        <span class="keyword">var</span> pluginName = <span class="string">'UploadImage'</span>; <span class="comment">// 插件名</span></span><br><span class="line">        <span class="keyword">var</span> _file = <span class="built_in">document</span>.getElementById(<span class="string">'editFileInput'</span>); <span class="comment">//获取页面中的file文件选择器对象</span></span><br><span class="line">        <span class="keyword">var</span> uploadUrl = <span class="built_in">document</span>.querySelector(<span class="string">'.site_url_upload'</span>).innerText || <span class="string">"https://user.smm.cn/upload_img"</span>; <span class="comment">// 上传的url，从页面中获取的</span></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 添加执行命令</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        editor.addCommand(<span class="string">'openFileComm'</span>, &#123;<span class="comment">//添加命令</span></span><br><span class="line">            exec : <span class="function"><span class="keyword">function</span> (<span class="params">editor</span>) </span>&#123;<span class="comment">//命令调用时执行此函数</span></span><br><span class="line">                _file.click(); <span class="comment">//触发文件选择器的点击事件</span></span><br><span class="line">                _file.onchange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="comment">//为文件选择器独享绑定onchange方法</span></span><br><span class="line">                    upload();<span class="comment">//执行函数</span></span><br><span class="line">                    <span class="function"><span class="keyword">function</span> <span class="title">upload</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                        <span class="keyword">let</span> files = _file.files[<span class="number">0</span>];</span><br><span class="line">                        <span class="keyword">var</span> fd = <span class="keyword">new</span> FormData();</span><br><span class="line">                        fd.append(<span class="string">"richTxt_img"</span>, files); </span><br><span class="line">                        fd.append(<span class="string">"name"</span>, <span class="string">""</span>); </span><br><span class="line">                        fd.append(<span class="string">"cat"</span>, <span class="string">""</span>); </span><br><span class="line">                        $.ajax(&#123; <span class="comment">//使用ajax请求上传图片</span></span><br><span class="line">                            url : uploadUrl,</span><br><span class="line">                            <span class="keyword">type</span> : <span class="string">'POST'</span>,</span><br><span class="line">                            data : fd,</span><br><span class="line">                            <span class="keyword">async</span> : <span class="literal">false</span>,</span><br><span class="line">                            cache : <span class="literal">false</span>,</span><br><span class="line">                            processData:<span class="literal">false</span>,</span><br><span class="line">                            contentType:<span class="literal">false</span>,</span><br><span class="line">                            dataType:<span class="string">'json'</span>,</span><br><span class="line">                            success : <span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">                                <span class="keyword">if</span>(data.code === <span class="number">0</span>)&#123;</span><br><span class="line">                                    <span class="keyword">var</span> element = CKEDITOR.dom.element.createFromHtml( <span class="string">'&lt;img style="width: auto;" src="'</span> + data.fileurl +<span class="string">'" border="0" /&gt;'</span> ); <span class="comment">//上传成功后添加上传完成的图片元素到富文本内容中</span></span><br><span class="line">                                    editor.insertElement( element );<span class="comment">//插入元素</span></span><br><span class="line">                                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                                    alert(<span class="string">"图片上传失败！"</span>)</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;,</span><br><span class="line">                            error : <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                                alert(<span class="string">"ajax图片上传失败！"</span>);</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;;</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="keyword">async</span> : <span class="literal">true</span></span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        editor.ui.addButton &amp;&amp; editor.ui.addButton(pluginName, &#123; <span class="comment">//添加一个上传图片的按钮</span></span><br><span class="line">            label: <span class="string">'图片上传'</span>,<span class="comment">//按钮提示名</span></span><br><span class="line">            command: <span class="string">'openFileComm'</span>,<span class="comment">//当按钮被点击时执行上面定义好的命令</span></span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * 添加自定义按钮图片</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            icon: <span class="keyword">this</span>.path + <span class="string">'./upload.png'</span></span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h1 id="二-利用Ckeditor内置的钩子来上传图片"><a href="#二-利用Ckeditor内置的钩子来上传图片" class="headerlink" title="二.  利用Ckeditor内置的钩子来上传图片"></a>二.  利用Ckeditor内置的钩子来上传图片</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// editor.module.ts</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; NgModule, CUSTOM_ELEMENTS_SCHEMA &#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; ShareModule &#125; <span class="keyword">from</span> <span class="string">'../../../share/share.module'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; CKEditorModule &#125; <span class="keyword">from</span> <span class="string">'ng2-ckeditor'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; CkEditorComponent &#125; <span class="keyword">from</span> <span class="string">'./ckeditor/ckeditor.component'</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@NgModule(&#123;</span><br><span class="line">    declarations: [</span><br><span class="line">        CkEditorComponent,</span><br><span class="line">    ],</span><br><span class="line">    imports: [</span><br><span class="line">        ShareModule,</span><br><span class="line">        CKEditorModule,</span><br><span class="line">    ],</span><br><span class="line">    exports: [</span><br><span class="line">        CkEditorComponent</span><br><span class="line">    ],</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">NewsEditorModule</span> </span>&#123; &#125;</span><br></pre></td></tr></table></figure><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// CkEditorComponent关键性代码</span></span><br><span class="line"><span class="comment">// this.actionURL上传链接</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> CkEditorComponent <span class="keyword">implements</span> ControlValueAccessor, OnInit,OnChanges, AfterViewInit &#123;</span><br><span class="line">  ngOnInit() &#123;</span><br><span class="line">        <span class="keyword">this</span>.ckeConfig =  &#123;</span><br><span class="line">            allowedContent: <span class="literal">false</span>,</span><br><span class="line">            extraPlugins: <span class="string">'divarea'</span>,</span><br><span class="line">            forcePasteAsPlainText: <span class="literal">false</span>,</span><br><span class="line">            height: <span class="number">500</span>,</span><br><span class="line">            toolbar: <span class="string">'Basic'</span>,</span><br><span class="line">            toolbarGroups: [</span><br><span class="line">                <span class="comment">// &#123; name: 'clipboard', groups: [ 'clipboard', 'undo' ] &#125;,</span></span><br><span class="line">                &#123; name: <span class="string">'editing'</span>, groups: [<span class="string">'find'</span>, <span class="string">'selection'</span>] &#125;, <span class="comment">// 'spellchecker'</span></span><br><span class="line">                &#123; name: <span class="string">'links'</span> &#125;,</span><br><span class="line">                &#123; name: <span class="string">'insert'</span> &#125;,</span><br><span class="line">                &#123; name: <span class="string">'forms'</span> &#125;,</span><br><span class="line">                &#123; name: <span class="string">'tools'</span> &#125;,</span><br><span class="line">                &#123; name: <span class="string">'document'</span>, groups: [<span class="string">'mode'</span>, <span class="string">'document'</span>, <span class="string">'doctools'</span>] &#125;,</span><br><span class="line">                &#123; name: <span class="string">'others'</span> &#125;,</span><br><span class="line">                &#123; name: <span class="string">'basicstyles'</span>, groups: [<span class="string">'basicstyles'</span>, <span class="string">'cleanup'</span>] &#125;,</span><br><span class="line">                &#123; name: <span class="string">'paragraph'</span>, groups: [<span class="string">'list'</span>, <span class="string">'indent'</span>, <span class="string">'align'</span>] &#125;,</span><br><span class="line">                &#123; name: <span class="string">'styles'</span> &#125;,</span><br><span class="line">                &#123; name: <span class="string">'colors'</span> &#125;,</span><br><span class="line">                <span class="comment">// &#123; name: 'about' &#125;</span></span><br><span class="line">            ],</span><br><span class="line">            filebrowserImageUploadUrl: <span class="keyword">this</span>.actionURL,</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">ngAfterViewInit() &#123;</span><br><span class="line">        <span class="keyword">const</span> self = <span class="keyword">this</span>;</span><br><span class="line">        setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> instanceName <span class="keyword">in</span> CKEDITOR.instances) &#123;</span><br><span class="line">                self.editor = CKEDITOR.instances[instanceName];</span><br><span class="line">                self.editor.on(<span class="string">"instanceReady"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">ev: <span class="built_in">any</span></span>) </span>&#123;</span><br><span class="line">                    <span class="keyword">let</span> editor = ev.editor;</span><br><span class="line">                    <span class="comment">// 监听上传事件</span></span><br><span class="line">                    editor.on(<span class="string">'fileUploadRequest'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">evt</span>) </span>&#123;</span><br><span class="line">                        <span class="keyword">var</span> fileLoader = evt.data.fileLoader,</span><br><span class="line">                            formData = <span class="keyword">new</span> FormData(),</span><br><span class="line">                            xhr = fileLoader.xhr;</span><br><span class="line"></span><br><span class="line">                        xhr.open(<span class="string">'POST'</span>, fileLoader.uploadUrl, <span class="literal">true</span>);</span><br><span class="line">                        xhr.setRequestHeader(<span class="string">'TOKEN'</span>, self._cookie.get(CookiesService.KEY));</span><br><span class="line"></span><br><span class="line">                        formData.append(<span class="string">'upload'</span>, fileLoader.file, fileLoader.fileName);</span><br><span class="line">                        fileLoader.xhr.send(formData);</span><br><span class="line"></span><br><span class="line">                        <span class="comment">// Prevented the default behavior.</span></span><br><span class="line">                        evt.stop();</span><br><span class="line">                    &#125;, <span class="literal">null</span>, <span class="literal">null</span>, <span class="number">4</span>);</span><br><span class="line">                    <span class="comment">// 监听返回事件</span></span><br><span class="line">                    editor.on(<span class="string">'fileUploadResponse'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">evt</span>) </span>&#123;</span><br><span class="line">                        <span class="comment">// Prevent the default response handler.</span></span><br><span class="line">                        evt.stop();</span><br><span class="line"></span><br><span class="line">                        <span class="comment">// Get XHR and response.</span></span><br><span class="line">                        <span class="keyword">var</span> data = evt.data,</span><br><span class="line">                            xhr = data.fileLoader.xhr,</span><br><span class="line">                            response = xhr.responseText.split(<span class="string">'|'</span>);</span><br><span class="line"></span><br><span class="line">                        <span class="keyword">if</span> (response[<span class="number">1</span>]) &#123;</span><br><span class="line">                            <span class="comment">// An error occurred during upload.</span></span><br><span class="line">                            data.message = response[<span class="number">1</span>];</span><br><span class="line">                            evt.cancel();</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            <span class="keyword">try</span> &#123;</span><br><span class="line">                                <span class="keyword">if</span> (response[<span class="number">0</span>]) &#123;</span><br><span class="line">                                    <span class="keyword">const</span> res = <span class="built_in">JSON</span>.parse(response[<span class="number">0</span>]);</span><br><span class="line">                                    <span class="keyword">if</span> (res.code === <span class="number">0</span>) &#123;</span><br><span class="line">                                        data.url = res.data &amp;&amp; res.data.key;</span><br><span class="line">                                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                                        data.message = res.msg;</span><br><span class="line">                                    &#125;</span><br><span class="line">                                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                                    data.message = <span class="string">"上传失败了"</span>;</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">                                <span class="built_in">console</span>.log(<span class="string">"上传图片出错"</span>, error);</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;);</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      ckedior怎么写插件，ckedior上传图片plugins，ng2-ckedior上传图片的一些摸索，主要是ngAfterViewInit中的两个事件监听
    
    </summary>
    
      <category term="默认分类" scheme="https://kitions.github.io/categories/%E9%BB%98%E8%AE%A4%E5%88%86%E7%B1%BB/"/>
    
    
      <category term="Angnular" scheme="https://kitions.github.io/tags/Angnular/"/>
    
      <category term="CKeditor" scheme="https://kitions.github.io/tags/CKeditor/"/>
    
  </entry>
  
  <entry>
    <title>Next.js - FQ</title>
    <link href="https://kitions.github.io/2020/03/03/Next.js%20-%20FQ/"/>
    <id>https://kitions.github.io/2020/03/03/Next.js - FQ/</id>
    <published>2020-03-03T10:15:37.000Z</published>
    <updated>2020-03-03T10:12:38.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Next-js-FQ"><a href="#Next-js-FQ" class="headerlink" title="Next.js - FQ"></a>Next.js - FQ</h1><h2 id="How-to-use-cssModules"><a href="#How-to-use-cssModules" class="headerlink" title="How to use cssModules"></a>How to use cssModules</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"># install next-css</span><br><span class="line"></span><br><span class="line">yarn add @zeit/next-css</span><br><span class="line"></span><br><span class="line"># use nextCss warpped the config</span><br><span class="line"><span class="comment">// next.config.js</span></span><br><span class="line"><span class="keyword">const</span> withLess = <span class="built_in">require</span>(<span class="string">'@zeit/next-less'</span>);</span><br><span class="line"><span class="keyword">const</span> withCSS = <span class="built_in">require</span>(<span class="string">'@zeit/next-css'</span>);</span><br><span class="line">...</span><br><span class="line"><span class="built_in">module</span>.exports = withCSS(</span><br><span class="line">  withLess(&#123;</span><br><span class="line">    cssModules: <span class="literal">true</span>,</span><br><span class="line">    ... <span class="comment">// other config</span></span><br><span class="line">  &#125;)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"># use css modules</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> css <span class="keyword">from</span> <span class="string">"../style.css"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Component = <span class="function"><span class="params">props</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div className=&#123;css.example&#125;&gt;</span><br><span class="line">      ...</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">  );</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">export default Component;</span></span><br></pre></td></tr></table></figure><h2 id="How-to-listen-for-routing-changes"><a href="#How-to-listen-for-routing-changes" class="headerlink" title="How to listen for routing changes?"></a>How to listen for routing changes?</h2><p>The router of next provide some APIs that are used to listen for routing changes for us. <code>For example: beforeHistoryChange, routeChangeComplete...</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// _app.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> Router <span class="keyword">from</span> <span class="string">'next/router'</span>;</span><br><span class="line">...</span><br><span class="line"><span class="comment">// Listen the route path change</span></span><br><span class="line">Router.events.on(<span class="string">'routeChangeStart'</span>, (path) =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'route start change, the next route is:'</span>, path);</span><br><span class="line">  <span class="comment">// do something what you want to do.</span></span><br><span class="line">  ...</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="The-solution-of-ant-design-in-the-development-environment-style-load-is-incomplete"><a href="#The-solution-of-ant-design-in-the-development-environment-style-load-is-incomplete" class="headerlink" title="The solution of ant-design in the development environment style load is incomplete."></a>The solution of <code>ant-design</code> in the development environment style load is incomplete.</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// next.config.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> isDev = process.env.NODE_ENV !== <span class="string">'production'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// fix antd bug in dev development</span></span><br><span class="line"><span class="keyword">const</span> devAntd = <span class="string">'@import "~antd/dist/antd.less";\n'</span>;</span><br><span class="line"><span class="keyword">const</span> stylesData = fs.readFileSync(</span><br><span class="line">  path.resolve(__dirname, <span class="string">'./assets/_styles.less'</span>),</span><br><span class="line">  <span class="string">'utf-8'</span></span><br><span class="line">);</span><br><span class="line">fs.writeFileSync(</span><br><span class="line">  path.resolve(__dirname, <span class="string">'./assets/self-styles.less'</span>),</span><br><span class="line">  isDev ? <span class="string">`<span class="subst">$&#123;devAntd&#125;</span><span class="subst">$&#123;stylesData&#125;</span>`</span> : stylesData,</span><br><span class="line">  <span class="string">'utf-8'</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><h2 id="The-solution-of-min-css-extract-plugin-warning-in-the-console"><a href="#The-solution-of-min-css-extract-plugin-warning-in-the-console" class="headerlink" title="The solution of min-css-extract-plugin warning in the console"></a>The solution of <code>min-css-extract-plugin</code> warning in the console</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">chunk commons [mini-css-extract-plugin]</span><br><span class="line">Conflicting order between:</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>// next.config.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// define the webpack plugn</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FilterPlugin</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(options) &#123;</span><br><span class="line">    <span class="keyword">this</span>.options = options;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  apply(compiler) &#123;</span><br><span class="line">    compiler.hooks.afterEmit.tap(</span><br><span class="line">      <span class="string">'FilterPlugin'</span>,</span><br><span class="line">      (compilation) =&gt; &#123;</span><br><span class="line">        compilation.warnings = (compilation.warnings).filter(</span><br><span class="line">          warning =&gt; !<span class="keyword">this</span>.options.filter.test(warning.message)</span><br><span class="line">        );</span><br><span class="line">      &#125;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">webpack: <span class="function">(<span class="params">config, &#123;...args&#125;</span>) =&gt;</span> &#123;</span><br><span class="line">  config.plugins.push(</span><br><span class="line">    ...[</span><br><span class="line">      <span class="comment">// Instantiate the plugin and add it as a Webpack plugin</span></span><br><span class="line">      <span class="keyword">new</span> FilterPlugin(</span><br><span class="line">        &#123; <span class="attr">filter</span>: <span class="regexp">/chunk styles \[mini-css-extract-plugin]\nConflicting order between:/</span> &#125;</span><br><span class="line">      )</span><br><span class="line">    ]</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="How-to-polyfill-IE10-IE9-in-this-scaffold"><a href="#How-to-polyfill-IE10-IE9-in-this-scaffold" class="headerlink" title="How to polyfill IE10/IE9 in this scaffold?"></a>How to polyfill IE10/IE9 in this scaffold?</h2><h4 id="Add-polyfills-js-in-your-project"><a href="#Add-polyfills-js-in-your-project" class="headerlink" title="Add polyfills.js in your project."></a>Add polyfills.js in your project.</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// /core/polyfills.js</span></span><br><span class="line"><span class="comment">/* eslint no-extend-native: 0 */</span></span><br><span class="line"><span class="comment">// core-js comes with Next.js. So, you can import it like below</span></span><br><span class="line"><span class="keyword">import</span> includes <span class="keyword">from</span> <span class="string">'core-js/library/fn/string/virtual/includes'</span>;</span><br><span class="line"><span class="keyword">import</span> repeat <span class="keyword">from</span> <span class="string">'core-js/library/fn/string/virtual/repeat'</span>;</span><br><span class="line"><span class="keyword">import</span> assign <span class="keyword">from</span> <span class="string">'core-js/library/fn/object/assign'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'core-js/es6/map'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'core-js/es6/set'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Add your polyfills</span></span><br><span class="line"><span class="comment">// This files runs at the very beginning (even before React and Next.js core)</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'Load your polyfills'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">String</span>.prototype.includes = includes;</span><br><span class="line"><span class="built_in">String</span>.prototype.repeat = repeat;</span><br><span class="line"><span class="built_in">Object</span>.assign = assign;</span><br></pre></td></tr></table></figure><h4 id="How-to-alias-folder-path"><a href="#How-to-alias-folder-path" class="headerlink" title="How to alias folder path?"></a>How to alias folder path?</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// next.config.js</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// config alias</span></span><br><span class="line">config.resolve.alias[<span class="string">'@containers'</span>] =</span><br><span class="line">  path.resolve(__dirname, <span class="string">'./src/containers'</span>);</span><br></pre></td></tr></table></figure><h4 id="Config-the-next-config-js"><a href="#Config-the-next-config-js" class="headerlink" title="Config the next.config.js"></a>Config the next.config.js</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// next.config.js</span></span><br><span class="line">...</span><br><span class="line">webpack: <span class="function"><span class="keyword">function</span> (<span class="params">cfg</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> originalEntry = cfg.entry</span><br><span class="line">    cfg.entry = <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">      <span class="keyword">const</span> entries = <span class="keyword">await</span> originalEntry()</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (</span><br><span class="line">        entries[<span class="string">'main.js'</span>] &amp;&amp;</span><br><span class="line">        !entries[<span class="string">'main.js'</span>].includes(<span class="string">'./core/polyfills.js'</span>)</span><br><span class="line">      ) &#123;</span><br><span class="line">        entries[<span class="string">'main.js'</span>].unshift(<span class="string">'./core/polyfills.js'</span>)</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> entries</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> cfg</span><br><span class="line">  &#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h4 id="Downgrade-your-Next-version-to-‘7-0-2’"><a href="#Downgrade-your-Next-version-to-‘7-0-2’" class="headerlink" title="Downgrade your Next version to ‘7.0.2’"></a>Downgrade your Next version to ‘7.0.2’</h4><h2 id="The-ant-design-style-flash-when-page-refresh"><a href="#The-ant-design-style-flash-when-page-refresh" class="headerlink" title="The ant-design style flash when page refresh!"></a>The ant-design style flash when page refresh!</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// _app.js -&gt; getInitialProps</span></span><br><span class="line">  <span class="comment">/* 刷新页面 antd闪动 */</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="built_in">window</span> !== <span class="string">"undefined"</span>) &#123;</span><br><span class="line">    <span class="built_in">window</span>.onload = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">document</span>.getElementById(<span class="string">"flashStyle"</span>).remove();</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// _app.js -&gt; &lt;Head&gt;&lt;/Head&gt;</span></span><br><span class="line">&lt;style</span><br><span class="line">  id=<span class="string">'flashStyle'</span></span><br><span class="line">  dangerouslySetInnerHTML=&#123;&#123;</span><br><span class="line">    __html: <span class="string">`</span></span><br><span class="line"><span class="string">      *, *::before, *::after &#123;</span></span><br><span class="line"><span class="string">        transition: none!important;</span></span><br><span class="line"><span class="string">      &#125;</span></span><br><span class="line"><span class="string">    `</span></span><br><span class="line">  &#125;&#125;</span><br><span class="line">/&gt;</span><br></pre></td></tr></table></figure><h2 id="How-to-speed-up-packing-in-production"><a href="#How-to-speed-up-packing-in-production" class="headerlink" title="How to speed up packing in production?"></a>How to speed up packing in production?</h2><h4 id="1-tenser-webpack-plugin-gt-cache"><a href="#1-tenser-webpack-plugin-gt-cache" class="headerlink" title="1. tenser-webpack-plugin -&gt; cache"></a>1. tenser-webpack-plugin -&gt; cache</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> TerserPlugin(&#123;</span><br><span class="line">  cache: <span class="literal">true</span>, <span class="comment">// add this line</span></span><br><span class="line">  terserOptions: &#123;</span><br><span class="line">    ...</span><br><span class="line">  &#125;</span><br><span class="line">&#125;),</span><br></pre></td></tr></table></figure><h4 id="2-Add-thread-loader"><a href="#2-Add-thread-loader" class="headerlink" title="2. Add thread-loader"></a>2. Add thread-loader</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">config.module.rules.push(&#123;</span><br><span class="line">  test: <span class="regexp">/\.js$/</span>,</span><br><span class="line">  include: [</span><br><span class="line">    path.resolve(<span class="string">'src'</span>)</span><br><span class="line">    ...</span><br><span class="line">  ],</span><br><span class="line">  options: &#123;</span><br><span class="line">    workerParallelJobs: <span class="number">50</span>,</span><br><span class="line">    <span class="comment">// additional node.js arguments</span></span><br><span class="line">    workerNodeArgs: [<span class="string">'--max-old-space-size=1024'</span>],</span><br><span class="line">  &#125;,</span><br><span class="line">  loader: <span class="string">'thread-loader'</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="How-to-optimize-bundle-size"><a href="#How-to-optimize-bundle-size" class="headerlink" title="How to optimize bundle size?"></a>How to optimize bundle size?</h2><h4 id="Optimize-moment-local"><a href="#Optimize-moment-local" class="headerlink" title="Optimize moment local."></a>Optimize moment local.</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// next.config.js</span></span><br><span class="line"><span class="keyword">const</span> myWebpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>);</span><br><span class="line">...</span><br><span class="line"><span class="keyword">new</span> myWebpack.ContextReplacementPlugin(<span class="regexp">/moment[\/\\]locale$/</span>, /zh-cn|en/),</span><br></pre></td></tr></table></figure><h4 id="Optimize-antd-icon-dist"><a href="#Optimize-antd-icon-dist" class="headerlink" title="Optimize antd icon dist."></a>Optimize antd icon dist.</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// next.config.js</span></span><br><span class="line">...</span><br><span class="line">config.resolve.alias[<span class="string">'@ant-design/icons/lib/dist$'</span>] = path.resolve(__dirname, <span class="string">'./assets/icons.js'</span>);</span><br><span class="line"><span class="comment">// /assets/icons.js</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 你自己手动引入的Icon，默认是outline</span></span><br><span class="line"><span class="keyword">export</span> &#123;</span><br><span class="line">  <span class="keyword">default</span> <span class="keyword">as</span> LoginOutline</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">'@ant-design/icons/lib/outline/LoginOutline'</span>;</span><br><span class="line"><span class="keyword">export</span> &#123;</span><br><span class="line">  <span class="keyword">default</span> <span class="keyword">as</span> LogoutOutline</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">'@ant-design/icons/lib/outline/LogoutOutline'</span>;</span><br><span class="line"><span class="keyword">export</span> &#123;</span><br><span class="line">  <span class="keyword">default</span> <span class="keyword">as</span> UserOutline</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">'@ant-design/icons/lib/outline/UserOutline'</span>;</span><br><span class="line">...</span><br><span class="line"><span class="comment">// 下面的 不是自己引入的，而是内置组件引入的，比如Input/Select/Datepicker等</span></span><br><span class="line"><span class="keyword">export</span> &#123;</span><br><span class="line">  <span class="keyword">default</span> <span class="keyword">as</span> SearchOutline</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">'@ant-design/icons/lib/outline/SearchOutline'</span>;</span><br><span class="line"><span class="keyword">export</span> &#123;</span><br><span class="line">  <span class="keyword">default</span> <span class="keyword">as</span> DownOutline</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">'@ant-design/icons/lib/outline/DownOutline'</span>;</span><br><span class="line"><span class="keyword">export</span> &#123;</span><br><span class="line">  <span class="keyword">default</span> <span class="keyword">as</span> UpOutline</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">'@ant-design/icons/lib/outline/UpOutline'</span>;</span><br><span class="line"><span class="keyword">export</span> &#123;</span><br><span class="line">  <span class="keyword">default</span> <span class="keyword">as</span> CalendarOutline</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">'@ant-design/icons/lib/outline/CalendarOutline'</span>;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">"fs"</span>);</span><br><span class="line"><span class="keyword">const</span> withSass = <span class="built_in">require</span>(<span class="string">'@zeit/next-sass'</span>)</span><br><span class="line"><span class="keyword">const</span> withCss = <span class="built_in">require</span>(<span class="string">'@zeit/next-css'</span>);</span><br><span class="line"><span class="keyword">const</span> withBundleAnalyzer = <span class="built_in">require</span>(<span class="string">"@zeit/next-bundle-analyzer"</span>);</span><br><span class="line"><span class="keyword">const</span> webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>);</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">"path"</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> PROD_FILE = <span class="string">"./config/prod.json"</span>;</span><br><span class="line"><span class="keyword">const</span> DEV_FILE = <span class="string">"./config/dev.json"</span>;</span><br><span class="line"><span class="keyword">const</span> LOCAL_FILE = <span class="string">"./config/local.json"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> readConfig = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">const</span> prod = fs.existsSync(PROD_FILE);</span><br><span class="line"><span class="keyword">if</span> (prod) &#123;</span><br><span class="line"><span class="keyword">return</span> fs.readFileSync(PROD_FILE)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (process.env.NODE_ENV === <span class="string">'production'</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> fs.readFileSync(DEV_FILE)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> fs.readFileSync(LOCAL_FILE)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// return prod ?</span></span><br><span class="line"><span class="comment">// fs.readFileSync(PROD_FILE) :</span></span><br><span class="line"><span class="comment">// !fs.existsSync(LOCAL_FILE) ?</span></span><br><span class="line"><span class="comment">// fs.readFileSync(DEV_FILE) :</span></span><br><span class="line"><span class="comment">// fs.readFileSync(LOCAL_FILE)</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// fix: prevents error when .css files are required by node</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="built_in">require</span> !== <span class="string">'undefined'</span>) &#123;</span><br><span class="line"><span class="built_in">require</span>.extensions[<span class="string">'.css'</span>] = <span class="function"><span class="params">file</span> =&gt;</span> &#123;&#125;</span><br><span class="line"><span class="built_in">require</span>.extensions[<span class="string">'.scss'</span>] = <span class="function"><span class="params">file</span> =&gt;</span> &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> config = <span class="built_in">JSON</span>.parse(readConfig().toString());</span><br><span class="line"><span class="comment">// console.log("config is  :", config);</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> webpackConfig = <span class="function">(<span class="params">config, &#123;&#125;</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">const</span> originalEntry = config.entry;</span><br><span class="line">    config.entry = <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line"><span class="keyword">const</span> entries = <span class="keyword">await</span> originalEntry();</span><br><span class="line"><span class="keyword">if</span> (entries[<span class="string">'main.js'</span>]) &#123;</span><br><span class="line">entries[<span class="string">'main.js'</span>].unshift(<span class="string">'./polyfills.js'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> entries;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">config.module.rules.push(&#123;</span><br><span class="line">test: [<span class="regexp">/\.bmp$/</span>, /\.gif$/, /\.jpe?g$/, /\.png$/],</span><br><span class="line">use: [&#123;</span><br><span class="line">loader: <span class="string">'url-loader'</span>,</span><br><span class="line">options: &#123;</span><br><span class="line">limit: <span class="number">10000</span>,</span><br><span class="line">name: <span class="string">'static/media/[name].[hash:8].[ext]'</span>,</span><br><span class="line">&#125;,</span><br><span class="line">&#125;]</span><br><span class="line">&#125;),</span><br><span class="line">config.plugins.push(</span><br><span class="line"><span class="keyword">new</span> webpack.ContextReplacementPlugin(<span class="regexp">/moment[/\\]locale$/</span>, /zh-cn|en/),</span><br><span class="line">);</span><br><span class="line"><span class="comment">// comstom antd icon</span></span><br><span class="line">config.resolve.alias[<span class="string">"@ant-design/icons/lib/dist$"</span>] = path.resolve(__dirname, <span class="string">'./common/icon.ts'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> config;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = withSass(withCss(withBundleAnalyzer(&#123;</span><br><span class="line">analyzeServer: [<span class="string">"server"</span>, <span class="string">"both"</span>].includes(</span><br><span class="line">process.env.BUNDLE_ANALYZE</span><br><span class="line">),</span><br><span class="line">analyzeBrowser: [<span class="string">"browser"</span>, <span class="string">"both"</span>].includes(</span><br><span class="line">process.env.BUNDLE_ANALYZE</span><br><span class="line">),</span><br><span class="line">bundleAnalyzerConfig: &#123;</span><br><span class="line">server: &#123;</span><br><span class="line">analyzerMode: <span class="string">"static"</span>,</span><br><span class="line">reportFilename: <span class="string">"../bundles/server.html"</span></span><br><span class="line">&#125;,</span><br><span class="line">browser: &#123;</span><br><span class="line">analyzerMode: <span class="string">"static"</span>,</span><br><span class="line">reportFilename: <span class="string">"../bundles/client.html"</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">serverRuntimeConfig: config.server,</span><br><span class="line">publicRuntimeConfig: config.client,</span><br><span class="line">distDir: <span class="string">"_next"</span>,</span><br><span class="line">webpack: webpackConfig,</span><br><span class="line">assetPrefix: process.env.NODE_CDN == <span class="string">"true"</span> &amp;&amp; config ?</span><br><span class="line">config.deploy.host + config.deploy.version : <span class="string">""</span></span><br><span class="line">&#125;)));</span><br></pre></td></tr></table></figure><p>Thanks: <a href="https://github.com/luffyZh" target="_blank" rel="noopener">luffyZh</a> <a href="https://github.com/luffyZh/next-antd-scaffold/commit/420cdf9f4d00ba8d823fcb61ebaa35556337e7cb" target="_blank" rel="noopener">update FAQ</a></p>]]></content>
    
    <summary type="html">
    
      Next.js - 一些问题，常见的问题，配置
    
    </summary>
    
      <category term="默认分类" scheme="https://kitions.github.io/categories/%E9%BB%98%E8%AE%A4%E5%88%86%E7%B1%BB/"/>
    
    
      <category term="next.js" scheme="https://kitions.github.io/tags/next-js/"/>
    
  </entry>
  
  <entry>
    <title>golang 一维数组变二维数组，根据字段排序随机</title>
    <link href="https://kitions.github.io/2019/12/30/golang%E4%B8%80%E7%BB%B4%E6%95%B0%E7%BB%84%E5%8F%98%E4%BA%8C%E7%BB%B4%E6%95%B0%E7%BB%84%EF%BC%8C%E6%A0%B9%E6%8D%AE%E5%AD%97%E6%AE%B5%E6%8E%92%E5%BA%8F%E9%9A%8F%E6%9C%BA/"/>
    <id>https://kitions.github.io/2019/12/30/golang一维数组变二维数组，根据字段排序随机/</id>
    <published>2019-12-30T03:15:37.000Z</published>
    <updated>2019-12-30T03:16:33.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="golang-一维数组变二维数组，根据字段排序随机"><a href="#golang-一维数组变二维数组，根据字段排序随机" class="headerlink" title="golang 一维数组变二维数组，根据字段排序随机"></a>golang 一维数组变二维数组，根据字段排序随机</h1><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"encoding/json"</span></span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"math/rand"</span></span><br><span class="line"><span class="string">"sort"</span></span><br><span class="line"><span class="string">"time"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> DemoItemModel <span class="keyword">struct</span> &#123;</span><br><span class="line">ID        <span class="keyword">int</span>    <span class="string">`json:"id"`</span></span><br><span class="line">Name      <span class="keyword">string</span> <span class="string">`json:"name"`</span></span><br><span class="line">SortValue <span class="keyword">int</span>    <span class="string">`json:"sort_value"`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> DemoModel []DemoItemModel</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> SortKeys []<span class="keyword">int</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Groups <span class="keyword">struct</span> &#123;</span><br><span class="line">sortNum SortKeys</span><br><span class="line">data    <span class="keyword">map</span>[<span class="keyword">int</span>]DemoModel</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s SortKeys)</span> <span class="title">Len</span><span class="params">()</span> <span class="title">int</span></span>           &#123; <span class="keyword">return</span> <span class="built_in">len</span>(s) &#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s SortKeys)</span> <span class="title">Swap</span><span class="params">(i, j <span class="keyword">int</span>)</span></span>      &#123; s[i], s[j] = s[j], s[i] &#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s SortKeys)</span> <span class="title">Less</span><span class="params">(i, j <span class="keyword">int</span>)</span> <span class="title">bool</span></span> &#123; <span class="keyword">return</span> s[i] &lt; s[j] &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewGroups</span><span class="params">()</span> *<span class="title">Groups</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> &amp;Groups&#123;</span><br><span class="line">sortNum: <span class="built_in">make</span>([]<span class="keyword">int</span>, <span class="number">0</span>),</span><br><span class="line">data:    <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">int</span>]DemoModel, <span class="number">0</span>),</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(a *Groups)</span> <span class="title">sortKey</span><span class="params">()</span> []<span class="title">int</span></span> &#123;</span><br><span class="line">sort.Sort(a.sortNum)</span><br><span class="line"><span class="keyword">return</span> a.sortNum</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(a *Groups)</span> <span class="title">append</span><span class="params">(key <span class="keyword">int</span>, item DemoItemModel)</span></span> &#123;</span><br><span class="line">a.data[key] = <span class="built_in">append</span>(a.data[key], item)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewGroup</span><span class="params">()</span> <span class="title">DemoModel</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">make</span>([]DemoItemModel, <span class="number">0</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(a *Groups)</span> <span class="title">Add</span><span class="params">(num <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">a.sortNum = <span class="built_in">append</span>(a.sortNum, num)</span><br><span class="line">a.data[num] = NewGroup()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(a *Groups)</span> <span class="title">Exits</span><span class="params">(num <span class="keyword">int</span>)</span> <span class="title">bool</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> a.data[num] == <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">GetRandomItems</span><span class="params">(a DemoModel)</span> []<span class="title">DemoItemModel</span></span> &#123;</span><br><span class="line">groups := NewGroups()</span><br><span class="line"><span class="keyword">for</span> _, item := <span class="keyword">range</span> a &#123;</span><br><span class="line">sort := item.SortValue</span><br><span class="line"><span class="keyword">if</span> !groups.Exits(sort) &#123;</span><br><span class="line">groups.Add(sort)</span><br><span class="line">&#125;</span><br><span class="line">groups.<span class="built_in">append</span>(sort, item)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> groups.Sort()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(a *DemoModel)</span> <span class="title">Random</span><span class="params">()</span> <span class="title">DemoModel</span></span> &#123;</span><br><span class="line">length := <span class="built_in">len</span>(*a)</span><br><span class="line">temp := <span class="built_in">make</span>([]DemoItemModel, <span class="number">0</span>)</span><br><span class="line">r := rand.New(rand.NewSource(time.Now().UnixNano()))</span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">random := r.Intn(length)</span><br><span class="line">temp = <span class="built_in">append</span>(temp, (*a)[random])</span><br><span class="line">*a = <span class="built_in">append</span>((*a)[:random], (*a)[random+<span class="number">1</span>:]...)</span><br><span class="line">length = <span class="built_in">len</span>(*a)</span><br><span class="line"><span class="keyword">if</span> length &lt; <span class="number">1</span> &#123;</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">*a = temp</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> temp</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(a *Groups)</span> <span class="title">Sort</span><span class="params">()</span> []<span class="title">DemoItemModel</span></span> &#123;</span><br><span class="line">temp := <span class="built_in">make</span>([]DemoItemModel, <span class="number">0</span>)</span><br><span class="line"><span class="keyword">for</span> _, item := <span class="keyword">range</span> a.sortKey() &#123;</span><br><span class="line">data := a.data[item]</span><br><span class="line">temp = <span class="built_in">append</span>(temp, data.Random()...)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> temp</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line">objString := <span class="string">`[&#123;"id":1,"name":"1-1","sort_value":1&#125;,&#123;"id":2,"name":"1-2","sort_value":1&#125;,&#123;"id":3,"name":"2-1","sort_value":2&#125;,&#123;"id":4,"name":"2-2","sort_value":2&#125;,&#123;"id":5,"name":"2-3","sort_value":2&#125;,&#123;"id":6,"name":"5-1","sort_value":5&#125;]`</span></span><br><span class="line"><span class="keyword">var</span> someOne []DemoItemModel</span><br><span class="line"><span class="keyword">if</span> err := json.Unmarshal([]<span class="keyword">byte</span>(objString), &amp;someOne); err == <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"================json str 转struct=="</span>)</span><br><span class="line">fmt.Println(someOne)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">fmt.Println(err)</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(<span class="number">22</span>, GetRandomItems(someOne))</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      golang 一维数组变二维数组，json根据sort字段随机排序
    
    </summary>
    
      <category term="默认分类" scheme="https://kitions.github.io/categories/%E9%BB%98%E8%AE%A4%E5%88%86%E7%B1%BB/"/>
    
    
      <category term="go" scheme="https://kitions.github.io/tags/go/"/>
    
  </entry>
  
  <entry>
    <title>gitignore规则不生效</title>
    <link href="https://kitions.github.io/2019/10/11/gitignore/"/>
    <id>https://kitions.github.io/2019/10/11/gitignore/</id>
    <published>2019-10-11T09:04:52.000Z</published>
    <updated>2019-10-11T09:09:55.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="gitignore"><a href="#gitignore" class="headerlink" title=".gitignore"></a>.gitignore</h1><p>规则 作用<br>/mtk 过滤整个文件夹<br>*.zip 过滤所有.zip文件<br>/mtk/do.c 过滤某个具体文件<br>!/mtk/one.txt 追踪（不过滤）某个具体文件<br>注意：如果你创建.gitignore文件之前就push了某一文件，那么即使你在.gitignore文件中写入过滤该文件的规则，该规则也不会起作用，git仍然会对该文件进行版本管理。</p><p>配置语法<br>以斜杠“/”开头表示目录；<br>以星号“*”通配多个字符；<br>以问号“?”通配单个字符<br>以方括号“[]”包含单个字符的匹配列表；<br>以叹号“!”表示不忽略(跟踪)匹配到的文件或目录。<br>注意： git 对于 .gitignore配置文件是按行从上到下进行规则匹配的</p><h2 id="gitignore规则不生效"><a href="#gitignore规则不生效" class="headerlink" title=".gitignore规则不生效"></a>.gitignore规则不生效</h2><p>.gitignore只能忽略那些原来没有被track的文件，如果某些文件已经被纳入了版本管理中，则修改.gitignore是无效的。</p><p>解决方法就是先把本地缓存删除（改变成未track状态），然后再提交:</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git rm -r --cached .</span><br><span class="line">git <span class="keyword">add</span> .</span><br><span class="line">git commit -m <span class="string">'update .gitignore'</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      .gitignore规则不生效
    
    </summary>
    
      <category term="默认分类" scheme="https://kitions.github.io/categories/%E9%BB%98%E8%AE%A4%E5%88%86%E7%B1%BB/"/>
    
    
  </entry>
  
  <entry>
    <title>初识React-hooks</title>
    <link href="https://kitions.github.io/2019/06/20/React%20hooks/"/>
    <id>https://kitions.github.io/2019/06/20/React hooks/</id>
    <published>2019-06-20T03:53:52.000Z</published>
    <updated>2019-06-20T10:24:52.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="React-hooks"><a href="#React-hooks" class="headerlink" title="React hooks"></a>React hooks</h1><p><em>Hook</em> 是 React 16.8 的新增特性。它可以让你在不编写 class 的情况下使用 state 以及其他的 React 特性（生命周期等特性）。</p><h2 id="0-背景"><a href="#0-背景" class="headerlink" title="0. 背景"></a>0. 背景</h2><p> 长期以来很多人会把 <code>Stateless Component</code> 和 <code>Functional Component</code> 混为一谈；</p><p> Hooks 的出现本质是把这种<strong>面向生命周期编程</strong>变成了<strong>面向业务逻辑编程</strong>，你不用再去关心本不该关心的生命周期，写法上带来的优化只是顺带的。</p><h2 id="1-优势"><a href="#1-优势" class="headerlink" title="1. 优势"></a>1. 优势</h2><p>​     带来的好处不仅是 “更 FP，更新粒度更细，代码更清晰”</p><p>官方：</p><ul><li><strong>完全可选的。</strong> 你无需重写任何已有代码就可以在一些组件中尝试 Hook。但是如果你不想，你不必现在就去学习或使用 Hook。</li><li><strong>100% 向后兼容的。</strong> Hook 不包含任何破坏性改动。</li><li><strong>现在可用。</strong>  v16.8.0以后版本都可以使用。</li><li><strong>渐进策略</strong>。 Hook 和现有代码可以同时工作，你可以渐进式地使用他们。</li></ul><p>非官方：</p><ul><li>更容易将组件的 UI 与状态分离, 状态与 UI 的界限会越来越清晰。</li><li>多个状态不会产生嵌套，写法还是平铺的</li><li>Hooks 可以引用其他 Hooks。</li></ul><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Example</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span></span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(props)&#123;</span><br><span class="line">    <span class="keyword">super</span>(props)</span><br><span class="line">    <span class="keyword">this</span>.state = &#123;</span><br><span class="line">      count : <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;p&gt;You clicked &#123;<span class="keyword">this</span>.state.count&#125; times&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">      &lt;button onClick=&#123;() =&gt; this.setState(&#123;count:this.state.count + 1&#125;)&#125;&gt;</span></span><br><span class="line"><span class="regexp">        Click me</span></span><br><span class="line"><span class="regexp">      &lt;/</span>button&gt;</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">  );</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; useState &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Example</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 声明一个叫 “count” 的 state 变量。</span></span><br><span class="line">  <span class="keyword">const</span> [count, setCount] = useState(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;p&gt;You clicked &#123;count&#125; times&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">      &lt;button onClick=&#123;() =&gt; setCount(count + 1)&#125;&gt;</span></span><br><span class="line"><span class="regexp">        Click me</span></span><br><span class="line"><span class="regexp">      &lt;/</span>button&gt;</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">  );</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><p>可以看到，<code>Example</code>变成了一个函数，但这个函数却有自己的状态（count），同时它还可以更新自己的状态（setCount）。这个函数之所以这么了不得，就是因为它注入了一个hook–<code>useState</code>，就是这个hook让我们的函数变成了一个有状态的函数。</p><h2 id="2-动机"><a href="#2-动机" class="headerlink" title="2. 动机"></a>2. 动机</h2><h3 id="（1）有状态的组件之间复用状态逻辑很难"><a href="#（1）有状态的组件之间复用状态逻辑很难" class="headerlink" title="（1）有状态的组件之间复用状态逻辑很难"></a>（1）有状态的组件之间复用状态逻辑很难</h3><p>问题：React 需要为共享状态逻辑提供更好的原生途径。</p><p>解决：Hook 使你在无需修改组件结构的情况下复用状态逻辑</p><p>我们都知道react的<strong>核心思想</strong>就是，将一个页面拆成一堆独立的，可复用的组件，并且用自上而下的单向数据流的形式将这些组件串联起来。但假如你在大型的工作项目中用react，你会发现你的项目中实际上很多react组件冗长且难以复用。尤其是那些写成class的组件，它们本身包含了状态（state），所以复用这类组件就变得很麻烦。</p><p>之前，官方推荐怎么解决这个问题呢？答案是：<a href="https://reactjs.org/docs/render-props.html" target="_blank" rel="noopener">渲染属性（Render Props）</a>和<a href="https://segmentfault.com/img/bVbjfuz" target="_blank" rel="noopener">高阶组件（Higher-Order Components）</a>。我们可以稍微跑下题简单看一下这两种模式。</p><h4 id="渲染属性（Render-Props）"><a href="#渲染属性（Render-Props）" class="headerlink" title="- 渲染属性（Render Props）"></a>- 渲染属性（Render Props）</h4><p>渲染属性指的是使用一个值为函数的prop来传递需要动态渲染的nodes或组件。如下面的代码可以看到我们的<code>DataProvider</code>组件包含了所有跟状态相关的代码，而<code>Cat</code>组件则可以是一个单纯的展示型组件，这样一来<code>DataProvider</code>就可以单独复用了。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Cat <span class="keyword">from</span> <span class="string">'components/cat'</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DataProvider</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">    <span class="keyword">super</span>(props);</span><br><span class="line">    <span class="keyword">this</span>.state = &#123; <span class="attr">target</span>: <span class="string">'Zac'</span> &#125;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &#123;<span class="keyword">this</span>.props.render(<span class="keyword">this</span>.state)&#125;</span><br><span class="line">      &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    )</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;DataProvider render=&#123;data =&gt; (</span></span><br><span class="line"><span class="regexp">  &lt;Cat target=&#123;data.target&#125; /</span>&gt;</span><br><span class="line">)&#125;/&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 上下等同</span></span><br><span class="line">&lt;DataProvider&gt;</span><br><span class="line">  &#123;data =&gt; (</span><br><span class="line">    &lt;Cat target=&#123;data.target&#125; /&gt;</span><br><span class="line">  )&#125;</span><br><span class="line">&lt;<span class="regexp">/DataProvider&gt;</span></span><br></pre></td></tr></table></figure><h4 id="高阶组件"><a href="#高阶组件" class="headerlink" title="- 高阶组件"></a>- 高阶组件</h4><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> withUser = <span class="function"><span class="params">WrappedComponent</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> user = sessionStorage.getItem(<span class="string">"user"</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="params">props</span> =&gt;</span> &lt;WrappedComponent user=&#123;user&#125; &#123;...props&#125; /&gt;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> UserPage = <span class="function"><span class="params">props</span> =&gt;</span> (</span><br><span class="line">  &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"user-container"</span>&gt;</span><br><span class="line">    &lt;p&gt;My name is &#123;props.user&#125;!<span class="xml"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line">  &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">);</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">export default withUser(UserPage);</span></span><br></pre></td></tr></table></figure><p>以上这两种模式看上去都挺不错的，很多库也运用了这种模式，但我们仔细看这两种模式，会发现它们会增加我们代码的层级关系，这时候再回过头看hooks例子，是不是简洁多了，没有多余的层级嵌套</p><p><img src="https://img.alicdn.com/tfs/TB1oipbryrpK1RjSZFhXXXSdXXa-2048-860.jpg" alt="img"></p><h3 id="（2）复杂组件变得难以理解"><a href="#（2）复杂组件变得难以理解" class="headerlink" title="（2）复杂组件变得难以理解"></a>（2）复杂组件变得难以理解</h3><p>问题：组件起初很简单，但是逐渐会被状态逻辑和副作用充斥。相互关联且需要对照修改的代码被进行了拆分，而完全不相关的代码却在同一个方法中组合在一起</p><p>解决：Hook 将组件中相互关联的部分拆分成更小的函数（比如设置订阅或请求数据）</p><h3 id="（3）难以理解的-class"><a href="#（3）难以理解的-class" class="headerlink" title="（3）难以理解的 class"></a>（3）难以理解的 class</h3><p>问题：js的<code>this</code> 的工作方式；绑定事件处理器；对于函数组件与 class 组件的差异也存在分歧</p><p>解决：Hook 使你在非 class 的情况下可以使用更多的 React 特性，Hook 则拥抱了函数</p><p>我们经常在写一个组件的时候，把组件写成无状态组件的形式，这样更方便复用，独立厕所，然而很多时候，用SFC 写了一个简洁完美的无状态组件，后来因为需求变动，必须得有状态，又得很麻烦的改成class组件。就很烦，有了hook，就可以避免这样的问题</p><h3 id="（4）生命周期钩子函数里的逻辑太乱！"><a href="#（4）生命周期钩子函数里的逻辑太乱！" class="headerlink" title="（4）生命周期钩子函数里的逻辑太乱！"></a>（4）生命周期钩子函数里的逻辑太乱！</h3><p>我们通常希望一个函数只做一件事情，但我们的生命周期钩子函数里通常同时做了很多事情。比如我们需要在<code>componentDidMount</code>中发起ajax请求获取数据，绑定一些事件监听等等。同时，有时候我们还需要在<code>componentDidUpdate</code>做一遍同样的事情。当项目变复杂后，这一块的代码也变得不那么直观。</p><h2 id="3-useState"><a href="#3-useState" class="headerlink" title="3. useState"></a>3. useState</h2><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useState &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Example</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> [count, setCount] = useState(<span class="number">0</span>);</span><br></pre></td></tr></table></figure><p><code>useState</code>是react自带的一个hook函数，它的作用就是用来声明状态变量。<code>useState</code>这个函数接收的参数是我们的状态初始值（initial state），它返回了一个数组，这个数组的第<code>[0]</code>项是当前当前的状态值，第<code>[1]</code>项是可以改变状态值的方法函数。</p><h3 id="读取状态值"><a href="#读取状态值" class="headerlink" title="读取状态值"></a>读取状态值</h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;p&gt;You clicked &#123;count&#125; times&lt;<span class="regexp">/p&gt;</span></span><br></pre></td></tr></table></figure><h3 id="更新状态"><a href="#更新状态" class="headerlink" title="更新状态"></a>更新状态</h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;button onClick=&#123;() =&gt; setCount(count + <span class="number">1</span>)&#125;&gt;</span><br><span class="line">  Click me</span><br><span class="line">&lt;<span class="regexp">/button&gt;</span></span><br></pre></td></tr></table></figure><h3 id="多个状态值"><a href="#多个状态值" class="headerlink" title="多个状态值"></a>多个状态值</h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ExampleWithManyStates</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> [age, setAge] = useState(<span class="number">42</span>);</span><br><span class="line">  <span class="keyword">const</span> [fruit, setFruit] = useState(<span class="string">'banana'</span>);</span><br><span class="line">  <span class="keyword">const</span> [todos, setTodos] = useState([&#123; <span class="attr">text</span>: <span class="string">'Learn Hooks'</span> &#125;]);</span><br></pre></td></tr></table></figure><p>从ExampleWithManyStates函数我们可以看到，useState无论调用多少次，相互之间是独立的</p><p>（<a href="https://zh-hans.reactjs.org/docs/hooks-intro.html#gradual-adoption-strategy" target="_blank" rel="noopener">不推荐</a>把你已有的组件全部重写，但是你可以在新组件里开始使用 Hook。）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">import React, &#123; useState, useEffect &#125; from &apos;react&apos;;</span><br><span class="line"></span><br><span class="line">function Example() &#123;</span><br><span class="line">  const [count, setCount] = useState(0);</span><br><span class="line"></span><br><span class="line">  // 相当于 componentDidMount 和 componentDidUpdate:</span><br><span class="line">  useEffect(() =&gt; &#123;</span><br><span class="line">    // 使用浏览器的 API 更新页面标题</span><br><span class="line">    document.title = `You clicked $&#123;count&#125; times`;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  return (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;p&gt;You clicked &#123;count&#125; times&lt;/p&gt;</span><br><span class="line">      &lt;button onClick=&#123;() =&gt; setCount(count + 1)&#125;&gt;</span><br><span class="line">        Click me</span><br><span class="line">      &lt;/button&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-useEffect"><a href="#4-useEffect" class="headerlink" title="4. useEffect"></a>4. useEffect</h2><p>可以把 <code>useEffect</code> Hook 看做 <code>componentDidMount</code>，<code>componentDidUpdate</code> 和 <code>componentWillUnmount</code> 这三个函数的组合。</p><p>默认情况下，它在第一次渲染之后<em>和</em> 每次更新之后都会执行。</p><h3 id="Class"><a href="#Class" class="headerlink" title="Class"></a>Class</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">class Example extends React.Component &#123;</span><br><span class="line">  constructor(props) &#123;</span><br><span class="line">    super(props);</span><br><span class="line">    this.state = &#123;</span><br><span class="line">      count: 0</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  componentDidMount() &#123;</span><br><span class="line">    document.title = `You clicked $&#123;this.state.count&#125; times`;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  componentDidUpdate() &#123;</span><br><span class="line">    document.title = `You clicked $&#123;this.state.count&#125; times`;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    return (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;p&gt;You clicked &#123;this.state.count&#125; times&lt;/p&gt;</span><br><span class="line">        &lt;button onClick=&#123;() =&gt; this.setState(&#123; count: this.state.count + 1 &#125;)&#125;&gt;</span><br><span class="line">          Click me</span><br><span class="line">        &lt;/button&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="hook"><a href="#hook" class="headerlink" title="hook"></a>hook</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">import &#123; useState, useEffect &#125; from &apos;react&apos;;</span><br><span class="line"></span><br><span class="line">function Example() &#123;</span><br><span class="line">  const [count, setCount] = useState(0);</span><br><span class="line"></span><br><span class="line">  // 类似于componentDidMount 和 componentDidUpdate:</span><br><span class="line">  useEffect(() =&gt; &#123;</span><br><span class="line">    // 更新文档的标题</span><br><span class="line">    document.title = `You clicked $&#123;count&#125; times`;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  return (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;p&gt;You clicked &#123;count&#125; times&lt;/p&gt;</span><br><span class="line">      &lt;button onClick=&#123;() =&gt; setCount(count + 1)&#125;&gt;</span><br><span class="line">        Click me</span><br><span class="line">      &lt;/button&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>effect 有可选的清除机制。每个 effect 都可以返回一个清除函数。如此可以将添加和移除订阅的逻辑放在一起。它们都属于 effect 的一部分。</p><h3 id="React-何时清除-effect？"><a href="#React-何时清除-effect？" class="headerlink" title="React 何时清除 effect？"></a>React 何时清除 effect？</h3><p> React 会在组件卸载的时候执行清除操作。effect 在每次渲染的时候都会执行。这就是为什么 React <em>会</em>在执行当前 effect 之前对上一个 effect 进行清除。稍后<a href="https://zh-hans.reactjs.org/docs/hooks-effect.html#explanation-why-effects-run-on-each-update" target="_blank" rel="noopener">为什么这将助于避免 bug</a>以及<a href="https://zh-hans.reactjs.org/docs/hooks-effect.html#tip-optimizing-performance-by-skipping-effects" target="_blank" rel="noopener">如何在遇到性能问题时跳过此行为</a>。</p><blockquote><p>Tips</p><p>与 <code>componentDidMount</code> 或 <code>componentDidUpdate</code> 不同，使用 <code>useEffect</code> 调度的 effect 不会阻塞浏览器更新屏幕，这让你的应用看起来响应更快。大多数情况下，effect 不需要同步地执行。在个别情况下（例如测量布局），有单独的 <a href="https://zh-hans.reactjs.org/docs/hooks-reference.html#uselayouteffect" target="_blank" rel="noopener"><code>useLayoutEffect</code></a> Hook 供你使用，其 API 与 <code>useEffect</code> 相同。</p></blockquote><h3 id="通过跳过-Effect-进行性能优化"><a href="#通过跳过-Effect-进行性能优化" class="headerlink" title="通过跳过 Effect 进行性能优化"></a>通过跳过 Effect 进行性能优化</h3><p>在某些情况下，每次渲染后都执行清理或者执行 effect 可能会导致性能问题。在 class 组件中，我们可以通过在 <code>componentDidUpdate</code> 中添加对 <code>prevProps</code> 或 <code>prevState</code> 的比较逻辑解决：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">componentDidUpdate(prevProps, prevState) &#123;</span><br><span class="line">  <span class="keyword">if</span> (prevState.count !== <span class="keyword">this</span>.state.count) &#123;</span><br><span class="line">    <span class="built_in">document</span>.title = <span class="string">`You clicked <span class="subst">$&#123;<span class="keyword">this</span>.state.count&#125;</span> times`</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​        这是很常见的需求，所以它被内置到了 <code>useEffect</code> 的 Hook API 中。如果某些特定值在两次重渲染之间没有发生变化，你可以通知 React <strong>跳过 </strong>对 effect 的调用，只要传递数组作为 <code>useEffect</code> 的第二个可选参数即可：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">useEffect(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">document</span>.title = <span class="string">`You clicked <span class="subst">$&#123;count&#125;</span> times`</span>;</span><br><span class="line">&#125;, [count]); <span class="comment">// 仅在 count 更改时更新</span></span><br></pre></td></tr></table></figure><p>​        这个参数是什么作用呢？如果 <code>count</code>的值是 <code>5</code>，而且我们的组件重渲染的时候 <code>count</code> 还是等于 <code>5</code>，React 将对前一次渲染的 <code>[5]</code>和后一次渲染的 <code>[5]</code> 进行比较。因为数组中的所有元素都是相等的(<code>5 === 5</code>)，React 会跳过这个 effect，这就实现了性能的优化。</p><blockquote><p>如果想执行只运行一次的 effect（仅在组件挂载和卸载时执行），可以传递一个空数组（<code>[]</code>）作为第二个参数。这就告诉 React 你的 effect 不依赖于 props 或 state 中的任何值，所以它永远都不需要重复执行</p></blockquote><h2 id="5-还有哪些自带的Effect-Hooks"><a href="#5-还有哪些自带的Effect-Hooks" class="headerlink" title="5. 还有哪些自带的Effect Hooks?"></a>5. 还有哪些自带的Effect Hooks?</h2><p>除了上面介绍的useState和useEffect，react还给我们提供来很多有用的hooks：</p><p>useContext<br>useReducer<br>useCallback<br>useMemo<br>useRef<br>useImperativeMethods<br>useMutationEffect<br>useLayoutEffect</p><p>我不再一一介绍，大家自行去查阅官方文档。</p><h2 id="6-自定义hook"><a href="#6-自定义hook" class="headerlink" title="6. 自定义hook"></a>6. 自定义hook</h2><p>当我们想在两个函数之间共享逻辑时，我们会把它提取到第三个函数中。而组件和 Hook 都是函数，所以也同样适用这种方式。</p><p><strong>自定义 Hook 是一个函数，其名称以 “use” 开头，函数内部可以调用其他的 Hook。</strong> </p><blockquote><p>Hook 函数必须以 “use” 命名开头，这种声明目前是通过很弱的 <code>use</code> 前缀标识的（但是设计上会简洁很多），为了不弄错每个盒子和状态的对应关系，书写的时候 Hooks 需要 <code>use</code> 开头且放在顶层作用域，即不可以包裹 <code>if/switch/when/try</code> 等。引入了官方的 <a href="https://link.juejin.im/?target=https%3A%2F%2Fwww.npmjs.com%2Fpackage%2Feslint-plugin-react-hooks" target="_blank" rel="noopener">eslint-plugin-react-hooks</a>  就不用担心会弄错了。</p></blockquote><p>为什么不能用 condition 包裹 useHook 语句，详情可以见 <a href="https://link.juejin.im/?target=https%3A%2F%2Freactjs.org%2Fdocs%2Fhooks-rules.html%23explanation" target="_blank" rel="noopener">官方文档</a>，这里简单介绍一下。</p><p>React Hooks 并不是通过 Proxy 或者 getters 实现的（具体可以看这篇文章 <a href="https://medium.com/@ryardley/react-hooks-not-magic-just-arrays-cd4f1857236e" target="_blank" rel="noopener">React hooks: not magic, just arrays</a>），而是通过数组实现的，每次 <code>useState</code> 都会改变下标，如果 <code>useState</code> 被包裹在 condition 中，那每次执行的下标就可能对不上，导致 <code>useState</code> 导出的 <code>setter</code> 更新错数据。</p><h2 id="7-总结"><a href="#7-总结" class="headerlink" title="7. 总结"></a>7. 总结</h2><ul><li>Hooks本质是把<strong>面向生命周期程式设计</strong>变成了<strong>面向业务逻辑程式设计</strong>；</li><li>Hooks 是React 的未来，但还是无法完全替代原始的Class。</li></ul><h2 id="Example-1"><a href="#Example-1" class="headerlink" title="Example 1:"></a>Example 1:</h2><p>我们先假想一个常见的需求，一个 Modal 里需要展示一些信息，这些信息需要通过 API 获取且跟 Modal 强业务相关, Modal 打开的时候才进行数据获取：</p><p><a href="https://codepen.io/int64ago/pen/qQoJOX?editors=0010" target="_blank" rel="noopener">代码</a></p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RandomUserModal</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">    <span class="keyword">super</span>(props);</span><br><span class="line">    <span class="keyword">this</span>.state = &#123;</span><br><span class="line">      user: &#123;&#125;,</span><br><span class="line">      loading: <span class="literal">false</span>,</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">this</span>.fetchData = <span class="keyword">this</span>.fetchData.bind(<span class="keyword">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  componentDidMount() &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.props.visible) &#123;</span><br><span class="line">      <span class="keyword">this</span>.fetchData();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  componentDidUpdate(prevProps) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!prevProps.visible &amp;&amp; <span class="keyword">this</span>.props.visible) &#123;</span><br><span class="line">      <span class="keyword">this</span>.fetchData();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  fetchData() &#123;</span><br><span class="line">    <span class="keyword">this</span>.setState(&#123; <span class="attr">loading</span>: <span class="literal">true</span> &#125;);</span><br><span class="line">    fetch(<span class="string">'https://randomuser.me/api/'</span>)</span><br><span class="line">      .then(<span class="function"><span class="params">res</span> =&gt;</span> res.json())</span><br><span class="line">      .then(<span class="function"><span class="params">json</span> =&gt;</span> <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">        user: json.results[<span class="number">0</span>],</span><br><span class="line">        loading: <span class="literal">false</span>,</span><br><span class="line">      &#125;));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">const</span> user = <span class="keyword">this</span>.state.user;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;ReactModal</span><br><span class="line">        isOpen=&#123;<span class="keyword">this</span>.props.visible&#125;</span><br><span class="line">      &gt;</span><br><span class="line">        &lt;button onClick=&#123;<span class="keyword">this</span>.props.handleCloseModal&#125;&gt;Close Modal&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">        &#123;this.state.loading ?</span></span><br><span class="line"><span class="regexp">          &lt;div&gt;loading...&lt;/</span>div&gt;</span><br><span class="line">          :</span><br><span class="line">          &lt;ul&gt;</span><br><span class="line">            &lt;li&gt;Name: &#123;<span class="string">`<span class="subst">$&#123;(user.name || &#123;&#125;</span>).first&#125; <span class="subst">$&#123;(user.name || &#123;&#125;</span>).last&#125;`</span>&#125;&lt;<span class="regexp">/li&gt;</span></span><br><span class="line"><span class="regexp">            &lt;li&gt;Gender: &#123;user.gender&#125;&lt;/</span>li&gt;</span><br><span class="line">            &lt;li&gt;Phone: &#123;user.phone&#125;&lt;<span class="regexp">/li&gt;</span></span><br><span class="line"><span class="regexp">          &lt;/u</span>l&gt;</span><br><span class="line">        &#125;</span><br><span class="line">      &lt;<span class="regexp">/ReactModal&gt;</span></span><br><span class="line"><span class="regexp">    )</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><p>为了实现在 Modal 打开的时候才进行数据获取，我们需要同时在 <code>componentDidMount</code> 和 <code>componentDidUpdate</code> 两个生命周期里实现数据获取的逻辑，而且 <code>constructor</code> 里的一些初始化操作也少不了。</p><p>其实我们的要求很简单：在合适的时候通过 API 获取新的信息，这就是我们抽象出来的一个<strong>业务逻辑</strong>，为了这个业务逻辑能在 React 里正确工作，我们需要将其<strong>按照 React 组件生命周期进行拆解</strong>。这种拆解除了<strong>代码冗余</strong>，还<strong>很难复用</strong>。</p><p><a href="https://codepen.io/int64ago/pen/eQMLNX?editors=0010" target="_blank" rel="noopener">hooks的改造后</a>：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">RandomUserModal</span>(<span class="params">props</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> [user, setUser] = React.useState(&#123;&#125;);</span><br><span class="line">  <span class="keyword">const</span> [loading, setLoading] = React.useState(<span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">  React.useEffect(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!props.visible) <span class="keyword">return</span>;</span><br><span class="line">    setLoading(<span class="literal">true</span>);</span><br><span class="line">    fetch(<span class="string">'https://randomuser.me/api/'</span>).then(<span class="function"><span class="params">res</span> =&gt;</span> res.json()).then(<span class="function"><span class="params">json</span> =&gt;</span> &#123;</span><br><span class="line">      setUser(json.results[<span class="number">0</span>]);</span><br><span class="line">      setLoading(<span class="literal">false</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;, [props.visible]);</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="comment">// View 部分几乎与上面相同</span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>很明显地可以看到我们把 Class 形式变成了 Function 形式，使用了两个 State Hook 进行数据管理（类比 <code>constructor</code>），之前 <code>componentDidMount</code> 和 <code>componentDidUpdate</code> 两个生命周期里干的事我们直接在一个 Effect Hook 里做了。做了这些，最大的优势是<strong>代码精简</strong>，业务逻辑变的紧凑，代码行数也从 50+ 行减少到 30+ 行。</p><p>Hooks 的强大之处还不仅仅是这个，最重要的是这些业务逻辑可以随意地的的抽离出去，跟普通的函数没什么区别（仅仅是看起来没区别），于是就变成了可以<strong>复用</strong>的自定义 Hook。具体可以看下面的进一步改造：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 自定义 Hook</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">useFetchUser</span>(<span class="params">visible</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> [user, setUser] = React.useState(&#123;&#125;);</span><br><span class="line">  <span class="keyword">const</span> [loading, setLoading] = React.useState(<span class="literal">false</span>);</span><br><span class="line">  </span><br><span class="line">  React.useEffect(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!visible) <span class="keyword">return</span>;</span><br><span class="line">    setLoading(<span class="literal">true</span>);</span><br><span class="line">    fetch(<span class="string">'https://randomuser.me/api/'</span>).then(<span class="function"><span class="params">res</span> =&gt;</span> res.json()).then(<span class="function"><span class="params">json</span> =&gt;</span> &#123;</span><br><span class="line">      setUser(json.results[<span class="number">0</span>]);</span><br><span class="line">      setLoading(<span class="literal">false</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;, [visible]);</span><br><span class="line">  <span class="keyword">return</span> &#123; user, loading &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">RandomUserModal</span>(<span class="params">props</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; user, loading &#125; = useFetchUser(props.visible);</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="comment">// 与上面相同</span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里的 <code>useFetchUser</code> 为自定义 Hook，它的地位跟自带的 <code>useState</code> 等比也没什么区别，你可以在其它组件里使用，甚至在这个组件里使用两次，它们会天然地隔离开。</p><h2 id="Example-2"><a href="#Example-2" class="headerlink" title="Example 2:"></a>Example 2:</h2><p><a href="https://codesandbox.io/s/jvvkoo8pq3" target="_blank" rel="noopener">实例二</a></p><p>参考：</p><p> <a href="https://segmentfault.com/a/1190000017182184" target="_blank" rel="noopener">React Hooks 深入不浅出</a></p><p> <a href="https://segmentfault.com/a/1190000016950339" target="_blank" rel="noopener">30分钟精通React今年最劲爆的新特性——React Hooks</a></p><p> <a href="https://medium.com/@ryardley/react-hooks-not-magic-just-arrays-cd4f1857236e" target="_blank" rel="noopener">React hooks: not magic, just arrays </a></p><p> <a href="https://medium.com/@dan_abramov/making-sense-of-react-hooks-fdbde8803889" target="_blank" rel="noopener">Making Sense of React Hooks </a></p><p> <a href="https://overreacted.io/a-complete-guide-to-useeffect/" target="_blank" rel="noopener">A Complete Guide to useEffect  </a>  推荐 Dan 的这篇文章</p><p> <a href="https://medium.com/the-guild/under-the-hood-of-reacts-hooks-system-eb59638c9dba" target="_blank" rel="noopener">Under the hood of React’s hooks system</a>  原理  <a href="https://juejin.im/post/5c99a75af265da60ef635898" target="_blank" rel="noopener">中文版</a></p>]]></content>
    
    <summary type="html">
    
      Hook 是 React 16.8 的新增特性。它可以让你在不编写 class 的情况下使用 state 以及其他的 React 特性（生命周期等特性）。带来的好处不仅是 “更 FP，更新粒度更细，代码更清晰”
    
    </summary>
    
      <category term="默认分类" scheme="https://kitions.github.io/categories/%E9%BB%98%E8%AE%A4%E5%88%86%E7%B1%BB/"/>
    
    
      <category term="React" scheme="https://kitions.github.io/tags/React/"/>
    
  </entry>
  
</feed>
